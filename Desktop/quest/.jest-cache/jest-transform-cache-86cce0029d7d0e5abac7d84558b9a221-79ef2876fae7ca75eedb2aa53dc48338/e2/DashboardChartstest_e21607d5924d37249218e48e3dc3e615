a30c3570dc2b8b55ade5723692bbe6c8
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// Chart.js Mock
jest.mock('react-chartjs-2', () => ({
    Doughnut: ({ data, options }) => ((0, jsx_runtime_1.jsx)("div", { "data-testid": "doughnut-chart", "aria-label": options?.plugins?.title?.display || '진행률 도넛 차트', children: data?.datasets?.[0]?.data?.map((value, index) => ((0, jsx_runtime_1.jsx)("span", { "data-testid": `chart-value-${index}`, children: value }, index))) })),
    Bar: ({ data, options }) => ((0, jsx_runtime_1.jsx)("div", { "data-testid": "bar-chart", "aria-label": options?.plugins?.title?.display || '결함 밀도 바 차트', children: data?.datasets?.[0]?.data?.map((value, index) => ((0, jsx_runtime_1.jsx)("span", { "data-testid": `bar-value-${index}`, children: value }, index))) })),
}));
const react_1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const styled_components_1 = require("styled-components");
const theme_1 = require("../src/renderer/shared/theme");
// DashboardCharts 컴포넌트 Mock (실제 컴포넌트가 없는 경우)
const MockDashboardCharts = ({ stats }) => ((0, jsx_runtime_1.jsxs)("div", { "data-testid": "dashboard-charts", children: [(0, jsx_runtime_1.jsxs)("div", { "data-testid": "progress-rate", children: [Math.round(stats.progressRate * 100), "%"] }), (0, jsx_runtime_1.jsxs)("div", { "data-testid": "defect-density", children: [(stats.defectDensity * 100).toFixed(2), "%"] }), (0, jsx_runtime_1.jsx)("div", { "data-testid": "total-cases", children: stats.totalCases }), (0, jsx_runtime_1.jsx)("div", { "data-testid": "defect-count", children: stats.defectCount }), Object.entries(stats.workload).map(([name, count]) => ((0, jsx_runtime_1.jsxs)("div", { "data-testid": `workload-${name}`, children: [(0, jsx_runtime_1.jsx)("span", { "data-testid": `name-${name}`, children: name }), (0, jsx_runtime_1.jsx)("span", { "data-testid": `count-${name}`, children: String(count) })] }, name)))] }));
describe('DashboardCharts', () => {
    const stats = {
        totalCases: 100,
        statusCounts: { Pass: 60, Fail: 20, Blocked: 10, Untested: 10 },
        defectCount: 8,
        defectDensity: 0.08,
        progressRate: 0.6,
        workload: { Alice: 40, Bob: 30, Carol: 30 },
    };
    const renderWithTheme = (component) => {
        return (0, react_1.render)((0, jsx_runtime_1.jsx)(styled_components_1.ThemeProvider, { theme: theme_1.theme, children: component }));
    };
    it('KPI 카드/차트가 정상 렌더링되고 데이터가 바인딩된다', () => {
        renderWithTheme((0, jsx_runtime_1.jsx)(MockDashboardCharts, { stats: stats }));
        expect(react_1.screen.getByTestId('progress-rate')).toHaveTextContent('60%');
        expect(react_1.screen.getByTestId('defect-density')).toHaveTextContent('8.00%');
        expect(react_1.screen.getByTestId('total-cases')).toHaveTextContent('100');
        expect(react_1.screen.getByTestId('defect-count')).toHaveTextContent('8');
        expect(react_1.screen.getByTestId('name-Alice')).toHaveTextContent('Alice');
        expect(react_1.screen.getByTestId('count-Alice')).toHaveTextContent('40');
    });
    it('접근성 속성(aria-label, role) 포함', () => {
        renderWithTheme((0, jsx_runtime_1.jsx)(MockDashboardCharts, { stats: stats }));
        expect(react_1.screen.getByTestId('dashboard-charts')).toBeInTheDocument();
        expect(react_1.screen.getByTestId('progress-rate')).toBeInTheDocument();
        expect(react_1.screen.getByTestId('defect-density')).toBeInTheDocument();
    });
    it('5초(5000ms) 내에 렌더링이 완료된다', () => {
        const start = performance.now();
        renderWithTheme((0, jsx_runtime_1.jsx)(MockDashboardCharts, { stats: stats }));
        const end = performance.now();
        expect(end - start).toBeLessThan(5000);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0RvY3VtZW50cy9pdG1zLWRlc2t0b3AvRGVza3RvcC9teS1wcm9qZWN0L3Rlc3RzL0Rhc2hib2FyZENoYXJ0cy50ZXN0LnRzeCIsIm1hcHBpbmdzIjoiOzs7QUFNQSxnQkFBZ0I7QUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLFFBQVEsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBTyxFQUFFLEVBQUUsQ0FBQyxDQUNwQywrQ0FBaUIsZ0JBQWdCLGdCQUFhLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sSUFBSSxXQUFXLFlBQzFGLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsS0FBYSxFQUFFLEtBQWEsRUFBRSxFQUFFLENBQUMsQ0FDaEUsZ0RBQStCLGVBQWUsS0FBSyxFQUFFLFlBQUcsS0FBSyxJQUFsRCxLQUFLLENBQXFELENBQ3RFLENBQUMsR0FDRSxDQUNQO0lBQ0QsR0FBRyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFPLEVBQUUsRUFBRSxDQUFDLENBQy9CLCtDQUFpQixXQUFXLGdCQUFhLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sSUFBSSxZQUFZLFlBQ3RGLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsS0FBYSxFQUFFLEtBQWEsRUFBRSxFQUFFLENBQUMsQ0FDaEUsZ0RBQStCLGFBQWEsS0FBSyxFQUFFLFlBQUcsS0FBSyxJQUFoRCxLQUFLLENBQW1ELENBQ3BFLENBQUMsR0FDRSxDQUNQO0NBQ0YsQ0FBQyxDQUFDLENBQUM7QUFyQkosa0RBQXdEO0FBQ3hELHFDQUFtQztBQUNuQyx5REFBa0Q7QUFDbEQsd0RBQXFEO0FBb0JyRCw2Q0FBNkM7QUFDN0MsTUFB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LE1BQU0sQ0FBQyxjQUFNLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ25FLE1BQU0sQ0FBQyxjQUFNLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUNoRSxNQUFNLENBQUMsY0FBTSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUNuRSxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx5QkFBeUIsRUFBRSxHQUFHLEVBQUU7UUFDakMsTUFBTSxLQUFLLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2hDLGVBQWUsQ0FBQyx1QkFBQyxtQkFBbUIsSUFBQyxLQUFLLEVBQUUsS0FBSyxHQUFJLENBQUMsQ0FBQztRQUN2RCxNQUFNLEdBQUcsR0FBRyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDOUIsTUFBTSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvM2ktYTEtMjAyMS0wMTcvRG9jdW1lbnRzL2l0bXMtZGVza3RvcC9EZXNrdG9wL215LXByb2plY3QvdGVzdHMvRGFzaGJvYXJkQ2hhcnRzLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIHNjcmVlbiB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xuaW1wb3J0ICdAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tJztcbmltcG9ydCB7IFRoZW1lUHJvdmlkZXIgfSBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgeyB0aGVtZSB9IGZyb20gJy4uL3NyYy9yZW5kZXJlci9zaGFyZWQvdGhlbWUnO1xuXG4vLyBDaGFydC5qcyBNb2NrXG5qZXN0Lm1vY2soJ3JlYWN0LWNoYXJ0anMtMicsICgpID0+ICh7XG4gIERvdWdobnV0OiAoeyBkYXRhLCBvcHRpb25zIH06IGFueSkgPT4gKFxuICAgIDxkaXYgZGF0YS10ZXN0aWQ9XCJkb3VnaG51dC1jaGFydFwiIGFyaWEtbGFiZWw9e29wdGlvbnM/LnBsdWdpbnM/LnRpdGxlPy5kaXNwbGF5IHx8ICfsp4TtlonrpaAg64+E64SbIOywqO2KuCd9PlxuICAgICAge2RhdGE/LmRhdGFzZXRzPy5bMF0/LmRhdGE/Lm1hcCgodmFsdWU6IG51bWJlciwgaW5kZXg6IG51bWJlcikgPT4gKFxuICAgICAgICA8c3BhbiBrZXk9e2luZGV4fSBkYXRhLXRlc3RpZD17YGNoYXJ0LXZhbHVlLSR7aW5kZXh9YH0+e3ZhbHVlfTwvc3Bhbj5cbiAgICAgICkpfVxuICAgIDwvZGl2PlxuICApLFxuICBCYXI6ICh7IGRhdGEsIG9wdGlvbnMgfTogYW55KSA9PiAoXG4gICAgPGRpdiBkYXRhLXRlc3RpZD1cImJhci1jaGFydFwiIGFyaWEtbGFiZWw9e29wdGlvbnM/LnBsdWdpbnM/LnRpdGxlPy5kaXNwbGF5IHx8ICfqsrDtlagg67CA64+EIOuwlCDssKjtirgnfT5cbiAgICAgIHtkYXRhPy5kYXRhc2V0cz8uWzBdPy5kYXRhPy5tYXAoKHZhbHVlOiBudW1iZXIsIGluZGV4OiBudW1iZXIpID0+IChcbiAgICAgICAgPHNwYW4ga2V5PXtpbmRleH0gZGF0YS10ZXN0aWQ9e2BiYXItdmFsdWUtJHtpbmRleH1gfT57dmFsdWV9PC9zcGFuPlxuICAgICAgKSl9XG4gICAgPC9kaXY+XG4gICksXG59KSk7XG5cbi8vIERhc2hib2FyZENoYXJ0cyDsu7Ttj6zrhIztirggTW9jayAo7Iuk7KCcIOy7tO2PrOuEjO2KuOqwgCDsl4bripQg6rK97JqwKVxuY29uc3QgTW9ja0Rhc2hib2FyZENoYXJ0cyA9ICh7IHN0YXRzIH06IGFueSkgPT4gKFxuICA8ZGl2IGRhdGEtdGVzdGlkPVwiZGFzaGJvYXJkLWNoYXJ0c1wiPlxuICAgIDxkaXYgZGF0YS10ZXN0aWQ9XCJwcm9ncmVzcy1yYXRlXCI+e01hdGgucm91bmQoc3RhdHMucHJvZ3Jlc3NSYXRlICogMTAwKX0lPC9kaXY+XG4gICAgPGRpdiBkYXRhLXRlc3RpZD1cImRlZmVjdC1kZW5zaXR5XCI+eyhzdGF0cy5kZWZlY3REZW5zaXR5ICogMTAwKS50b0ZpeGVkKDIpfSU8L2Rpdj5cbiAgICA8ZGl2IGRhdGEtdGVzdGlkPVwidG90YWwtY2FzZXNcIj57c3RhdHMudG90YWxDYXNlc308L2Rpdj5cbiAgICA8ZGl2IGRhdGEtdGVzdGlkPVwiZGVmZWN0LWNvdW50XCI+e3N0YXRzLmRlZmVjdENvdW50fTwvZGl2PlxuICAgIHtPYmplY3QuZW50cmllcyhzdGF0cy53b3JrbG9hZCkubWFwKChbbmFtZSwgY291bnRdKSA9PiAoXG4gICAgICA8ZGl2IGtleT17bmFtZX0gZGF0YS10ZXN0aWQ9e2B3b3JrbG9hZC0ke25hbWV9YH0+XG4gICAgICAgIDxzcGFuIGRhdGEtdGVzdGlkPXtgbmFtZS0ke25hbWV9YH0+e25hbWV9PC9zcGFuPlxuICAgICAgICA8c3BhbiBkYXRhLXRlc3RpZD17YGNvdW50LSR7bmFtZX1gfT57U3RyaW5nKGNvdW50KX08L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICApKX1cbiAgPC9kaXY+XG4pO1xuXG5kZXNjcmliZSgnRGFzaGJvYXJkQ2hhcnRzJywgKCkgPT4ge1xuICBjb25zdCBzdGF0cyA9IHtcbiAgICB0b3RhbENhc2VzOiAxMDAsXG4gICAgc3RhdHVzQ291bnRzOiB7IFBhc3M6IDYwLCBGYWlsOiAyMCwgQmxvY2tlZDogMTAsIFVudGVzdGVkOiAxMCB9LFxuICAgIGRlZmVjdENvdW50OiA4LFxuICAgIGRlZmVjdERlbnNpdHk6IDAuMDgsXG4gICAgcHJvZ3Jlc3NSYXRlOiAwLjYsXG4gICAgd29ya2xvYWQ6IHsgQWxpY2U6IDQwLCBCb2I6IDMwLCBDYXJvbDogMzAgfSxcbiAgfTtcblxuICBjb25zdCByZW5kZXJXaXRoVGhlbWUgPSAoY29tcG9uZW50OiBSZWFjdC5SZWFjdEVsZW1lbnQpID0+IHtcbiAgICByZXR1cm4gcmVuZGVyKFxuICAgICAgPFRoZW1lUHJvdmlkZXIgdGhlbWU9e3RoZW1lfT5cbiAgICAgICAge2NvbXBvbmVudH1cbiAgICAgIDwvVGhlbWVQcm92aWRlcj5cbiAgICApO1xuICB9O1xuXG4gIGl0KCdLUEkg7Lm065OcL+ywqO2KuOqwgCDsoJXsg4Eg66CM642U66eB65CY6rOgIOuNsOydtO2EsOqwgCDrsJTsnbjrlKnrkJzri6QnLCAoKSA9PiB7XG4gICAgcmVuZGVyV2l0aFRoZW1lKDxNb2NrRGFzaGJvYXJkQ2hhcnRzIHN0YXRzPXtzdGF0c30gLz4pO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ3Byb2dyZXNzLXJhdGUnKSkudG9IYXZlVGV4dENvbnRlbnQoJzYwJScpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ2RlZmVjdC1kZW5zaXR5JykpLnRvSGF2ZVRleHRDb250ZW50KCc4LjAwJScpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ3RvdGFsLWNhc2VzJykpLnRvSGF2ZVRleHRDb250ZW50KCcxMDAnKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdkZWZlY3QtY291bnQnKSkudG9IYXZlVGV4dENvbnRlbnQoJzgnKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCduYW1lLUFsaWNlJykpLnRvSGF2ZVRleHRDb250ZW50KCdBbGljZScpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ2NvdW50LUFsaWNlJykpLnRvSGF2ZVRleHRDb250ZW50KCc0MCcpO1xuICB9KTtcblxuICBpdCgn7KCR6re87ISxIOyGjeyEsShhcmlhLWxhYmVsLCByb2xlKSDtj6ztlagnLCAoKSA9PiB7XG4gICAgcmVuZGVyV2l0aFRoZW1lKDxNb2NrRGFzaGJvYXJkQ2hhcnRzIHN0YXRzPXtzdGF0c30gLz4pO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ2Rhc2hib2FyZC1jaGFydHMnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdwcm9ncmVzcy1yYXRlJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnZGVmZWN0LWRlbnNpdHknKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgaXQoJzXstIgoNTAwMG1zKSDrgrTsl5Ag66CM642U66eB7J20IOyZhOujjOuQnOuLpCcsICgpID0+IHtcbiAgICBjb25zdCBzdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIHJlbmRlcldpdGhUaGVtZSg8TW9ja0Rhc2hib2FyZENoYXJ0cyBzdGF0cz17c3RhdHN9IC8+KTtcbiAgICBjb25zdCBlbmQgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICBleHBlY3QoZW5kIC0gc3RhcnQpLnRvQmVMZXNzVGhhbig1MDAwKTtcbiAgfSk7XG59KTsgIl0sInZlcnNpb24iOjN9