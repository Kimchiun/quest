{"file":"/Users/3i-a1-2021-017/Documents/itms-desktop/Desktop/my-project/tests/DashboardCharts.test.tsx","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Documents/itms-desktop/Desktop/my-project/tests/DashboardCharts.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport { ThemeProvider } from 'styled-components';\nimport { theme } from '../src/renderer/shared/theme';\n\n// Chart.js Mock\njest.mock('react-chartjs-2', () => ({\n  Doughnut: ({ data, options }: any) => (\n    <div data-testid=\"doughnut-chart\" aria-label={options?.plugins?.title?.display || '진행률 도넛 차트'}>\n      {data?.datasets?.[0]?.data?.map((value: number, index: number) => (\n        <span key={index} data-testid={`chart-value-${index}`}>{value}</span>\n      ))}\n    </div>\n  ),\n  Bar: ({ data, options }: any) => (\n    <div data-testid=\"bar-chart\" aria-label={options?.plugins?.title?.display || '결함 밀도 바 차트'}>\n      {data?.datasets?.[0]?.data?.map((value: number, index: number) => (\n        <span key={index} data-testid={`bar-value-${index}`}>{value}</span>\n      ))}\n    </div>\n  ),\n}));\n\n// DashboardCharts 컴포넌트 Mock (실제 컴포넌트가 없는 경우)\nconst MockDashboardCharts = ({ stats }: any) => (\n  <div data-testid=\"dashboard-charts\">\n    <div data-testid=\"progress-rate\">{Math.round(stats.progressRate * 100)}%</div>\n    <div data-testid=\"defect-density\">{(stats.defectDensity * 100).toFixed(2)}%</div>\n    <div data-testid=\"total-cases\">{stats.totalCases}</div>\n    <div data-testid=\"defect-count\">{stats.defectCount}</div>\n    {Object.entries(stats.workload).map(([name, count]) => (\n      <div key={name} data-testid={`workload-${name}`}>\n        <span data-testid={`name-${name}`}>{name}</span>\n        <span data-testid={`count-${name}`}>{String(count)}</span>\n      </div>\n    ))}\n  </div>\n);\n\ndescribe('DashboardCharts', () => {\n  const stats = {\n    totalCases: 100,\n    statusCounts: { Pass: 60, Fail: 20, Blocked: 10, Untested: 10 },\n    defectCount: 8,\n    defectDensity: 0.08,\n    progressRate: 0.6,\n    workload: { Alice: 40, Bob: 30, Carol: 30 },\n  };\n\n  const renderWithTheme = (component: React.ReactElement) => {\n    return render(\n      <ThemeProvider theme={theme}>\n        {component}\n      </ThemeProvider>\n    );\n  };\n\n  it('KPI 카드/차트가 정상 렌더링되고 데이터가 바인딩된다', () => {\n    renderWithTheme(<MockDashboardCharts stats={stats} />);\n    expect(screen.getByTestId('progress-rate')).toHaveTextContent('60%');\n    expect(screen.getByTestId('defect-density')).toHaveTextContent('8.00%');\n    expect(screen.getByTestId('total-cases')).toHaveTextContent('100');\n    expect(screen.getByTestId('defect-count')).toHaveTextContent('8');\n    expect(screen.getByTestId('name-Alice')).toHaveTextContent('Alice');\n    expect(screen.getByTestId('count-Alice')).toHaveTextContent('40');\n  });\n\n  it('접근성 속성(aria-label, role) 포함', () => {\n    renderWithTheme(<MockDashboardCharts stats={stats} />);\n    expect(screen.getByTestId('dashboard-charts')).toBeInTheDocument();\n    expect(screen.getByTestId('progress-rate')).toBeInTheDocument();\n    expect(screen.getByTestId('defect-density')).toBeInTheDocument();\n  });\n\n  it('5초(5000ms) 내에 렌더링이 완료된다', () => {\n    const start = performance.now();\n    renderWithTheme(<MockDashboardCharts stats={stats} />);\n    const end = performance.now();\n    expect(end - start).toBeLessThan(5000);\n  });\n}); "],"version":3}