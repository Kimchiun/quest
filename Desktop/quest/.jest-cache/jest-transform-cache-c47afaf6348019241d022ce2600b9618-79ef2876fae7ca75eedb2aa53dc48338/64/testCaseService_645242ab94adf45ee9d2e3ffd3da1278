4d9d9a1e79a8a665e56dc326e43dfec8
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTestCaseWithVersion = createTestCaseWithVersion;
exports.updateTestCaseWithVersion = updateTestCaseWithVersion;
exports.deleteTestCaseWithIndex = deleteTestCaseWithIndex;
exports.getTestCaseVersions = getTestCaseVersions;
exports.getTestCases = getTestCases;
exports.getTestCaseById = getTestCaseById;
exports.createTestCase = createTestCase;
exports.updateTestCase = updateTestCase;
exports.deleteTestCase = deleteTestCase;
const testCaseRepository_1 = require("../repositories/testCaseRepository");
function omitFields(obj, keys) {
    const copy = { ...obj };
    keys.forEach(k => { delete copy[k]; });
    return copy;
}
async function createTestCaseWithVersion(tc) {
    const created = await (0, testCaseRepository_1.createTestCase)(tc);
    await (0, testCaseRepository_1.createTestCaseVersion)({
        testcaseId: created.id,
        version: 1,
        data: { ...tc },
        createdBy: tc.createdBy,
    });
    // Elasticsearch 인덱싱 임시 비활성화
    // await indexTestCase(created);
    return created;
}
async function updateTestCaseWithVersion(id, patch, user) {
    const before = await (0, testCaseRepository_1.getTestCaseById)(id);
    if (!before)
        return null;
    const updated = await (0, testCaseRepository_1.updateTestCase)(id, patch);
    if (!updated)
        return null;
    const versions = await (0, testCaseRepository_1.listTestCaseVersions)(id);
    await (0, testCaseRepository_1.createTestCaseVersion)({
        testcaseId: id,
        version: (versions[0]?.version || 1) + 1,
        data: omitFields(updated, ['id', 'createdAt', 'updatedAt']),
        createdBy: user,
    });
    // Elasticsearch 인덱싱 임시 비활성화
    // await indexTestCase(updated);
    return updated;
}
async function deleteTestCaseWithIndex(id) {
    const ok = await (0, testCaseRepository_1.deleteTestCase)(id);
    // Elasticsearch 인덱싱 임시 비활성화
    // if (ok) await removeTestCaseFromIndex(id);
    return ok;
}
async function getTestCaseVersions(id) {
    return (0, testCaseRepository_1.listTestCaseVersions)(id);
}
// 컨트롤러에서 사용할 메서드들
async function getTestCases(params) {
    const testCases = await (0, testCaseRepository_1.listTestCases)();
    // 간단한 필터링 (실제로는 repository에서 처리해야 함)
    let filteredCases = testCases;
    if (params.search) {
        filteredCases = filteredCases.filter(tc => tc.title.toLowerCase().includes(params.search.toLowerCase()) ||
            tc.prereq?.toLowerCase().includes(params.search.toLowerCase()) ||
            tc.expected?.toLowerCase().includes(params.search.toLowerCase()));
    }
    if (params.folderId) {
        filteredCases = filteredCases.filter(tc => tc.folderId === params.folderId);
    }
    // 페이징 처리
    const offset = (params.page - 1) * params.limit;
    const paginatedCases = filteredCases.slice(offset, offset + params.limit);
    return {
        testCases: paginatedCases,
        total: filteredCases.length
    };
}
async function getTestCaseById(id) {
    return await (0, testCaseRepository_1.getTestCaseById)(id);
}
async function createTestCase(data) {
    return await createTestCaseWithVersion(data);
}
async function updateTestCase(id, data) {
    return await updateTestCaseWithVersion(id, data, data.createdBy || 'system');
}
async function deleteTestCase(id) {
    return await deleteTestCaseWithIndex(id);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,