{"file":"/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/src/main/app/domains/testcases/services/testCaseService.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/src/main/app/domains/testcases/services/testCaseService.ts"],"sourcesContent":["import { createTestCase as createTestCaseRepo, getTestCaseById as getTestCaseByIdRepo, updateTestCase as updateTestCaseRepo, deleteTestCase as deleteTestCaseRepo, listTestCases, createTestCaseVersion, listTestCaseVersions } from '../repositories/testCaseRepository';\nimport { indexTestCase, removeTestCaseFromIndex } from '../elasticsearch/testCaseIndexer';\nimport { TestCase, TestCaseVersion } from '../types';\n\nfunction omitFields<T extends object, K extends keyof T>(obj: T, keys: K[]): Omit<T, K> {\n    const copy = { ...obj };\n    keys.forEach(k => { delete (copy as any)[k]; });\n    return copy as Omit<T, K>;\n}\n\nexport async function createTestCaseWithVersion(tc: Omit<TestCase, 'id' | 'createdAt' | 'updatedAt'>): Promise<TestCase> {\n    const created = await createTestCaseRepo(tc);\n    await createTestCaseVersion({\n        testcaseId: created.id,\n        version: 1,\n        data: { ...tc },\n        createdBy: tc.createdBy,\n    });\n    // Elasticsearch 인덱싱 임시 비활성화\n    // await indexTestCase(created);\n    return created;\n}\n\nexport async function updateTestCaseWithVersion(id: number, patch: Partial<TestCase>, user: string): Promise<TestCase | null> {\n    const before = await getTestCaseByIdRepo(id);\n    if (!before) return null;\n    const updated = await updateTestCaseRepo(id, patch);\n    if (!updated) return null;\n    const versions = await listTestCaseVersions(id);\n    await createTestCaseVersion({\n        testcaseId: id,\n        version: (versions[0]?.version || 1) + 1,\n        data: omitFields(updated, ['id', 'createdAt', 'updatedAt']),\n        createdBy: user,\n    });\n    // Elasticsearch 인덱싱 임시 비활성화\n    // await indexTestCase(updated);\n    return updated;\n}\n\nexport async function deleteTestCaseWithIndex(id: number): Promise<boolean> {\n    const ok = await deleteTestCaseRepo(id);\n    // Elasticsearch 인덱싱 임시 비활성화\n    // if (ok) await removeTestCaseFromIndex(id);\n    return ok;\n}\n\nexport async function getTestCaseVersions(id: number): Promise<TestCaseVersion[]> {\n    return listTestCaseVersions(id);\n}\n\n// 컨트롤러에서 사용할 메서드들\nexport async function getTestCases(params: {\n    page: number;\n    limit: number;\n    search?: string;\n    folderId?: number;\n}): Promise<{ testCases: TestCase[]; total: number }> {\n    const testCases = await listTestCases();\n    \n    // 간단한 필터링 (실제로는 repository에서 처리해야 함)\n    let filteredCases = testCases;\n    \n    if (params.search) {\n        filteredCases = filteredCases.filter(tc => \n            tc.title.toLowerCase().includes(params.search!.toLowerCase()) ||\n            tc.prereq?.toLowerCase().includes(params.search!.toLowerCase()) ||\n            tc.expected?.toLowerCase().includes(params.search!.toLowerCase())\n        );\n    }\n    \n    if (params.folderId) {\n        filteredCases = filteredCases.filter(tc => tc.folderId === params.folderId);\n    }\n    \n    // 페이징 처리\n    const offset = (params.page - 1) * params.limit;\n    const paginatedCases = filteredCases.slice(offset, offset + params.limit);\n    \n    return { \n        testCases: paginatedCases, \n        total: filteredCases.length \n    };\n}\n\nexport async function getTestCaseById(id: number): Promise<TestCase | null> {\n    return await getTestCaseByIdRepo(id);\n}\n\nexport async function createTestCase(data: Omit<TestCase, 'id' | 'createdAt' | 'updatedAt'>): Promise<TestCase> {\n    return await createTestCaseWithVersion(data);\n}\n\nexport async function updateTestCase(id: number, data: Partial<TestCase>): Promise<TestCase | null> {\n    return await updateTestCaseWithVersion(id, data, data.createdBy || 'system');\n}\n\nexport async function deleteTestCase(id: number): Promise<boolean> {\n    return await deleteTestCaseWithIndex(id);\n} "],"version":3}