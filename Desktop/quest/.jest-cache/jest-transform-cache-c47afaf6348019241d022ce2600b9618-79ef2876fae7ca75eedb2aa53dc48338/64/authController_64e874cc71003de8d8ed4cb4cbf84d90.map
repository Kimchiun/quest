{"file":"/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/src/main/app/domains/users/controllers/authController.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/src/main/app/domains/users/controllers/authController.ts"],"sourcesContent":["import { Router } from 'express';\nimport passport from '../../../infrastructure/security/passport';\nimport jwt from 'jsonwebtoken';\nimport { createUser, findUserByUsername } from '../services/userService';\nimport { UserRole } from '../types';\n\n/**\n * @swagger\n * components:\n *   schemas:\n *     User:\n *       type: object\n *       properties:\n *         id:\n *           type: integer\n *           description: 사용자 ID\n *         username:\n *           type: string\n *           description: 사용자명 (이메일)\n *         role:\n *           type: string\n *           enum: [ADMIN, QA, DEV, PM]\n *           description: 사용자 역할\n *     LoginRequest:\n *       type: object\n *       required:\n *         - email\n *         - password\n *       properties:\n *         email:\n *           type: string\n *           format: email\n *           description: 사용자 이메일\n *         password:\n *           type: string\n *           description: 비밀번호\n *     LoginResponse:\n *       type: object\n *       properties:\n *         token:\n *           type: string\n *           description: JWT 토큰\n *         user:\n *           $ref: '#/components/schemas/User'\n *     RegisterRequest:\n *       type: object\n *       required:\n *         - username\n *         - password\n *         - role\n *       properties:\n *         username:\n *           type: string\n *           description: 사용자명 (이메일)\n *         password:\n *           type: string\n *           description: 비밀번호\n *         role:\n *           type: string\n *           enum: [ADMIN, QA, DEV, PM]\n *           description: 사용자 역할\n */\n\nconst router = Router();\nconst JWT_SECRET = process.env.JWT_SECRET || 'dev_secret';\n\n// 개발 환경에서는 24시간, 프로덕션에서는 1시간\nconst JWT_EXPIRES_IN = process.env.NODE_ENV === 'production' ? '1h' : '24h';\n\n/**\n * @swagger\n * /api/auth/register:\n *   post:\n *     summary: 사용자 등록\n *     description: 새로운 사용자를 등록합니다.\n *     tags: [Authentication]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/RegisterRequest'\n *     responses:\n *       201:\n *         description: 사용자 등록 성공\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/User'\n *       400:\n *         description: 잘못된 요청\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *       409:\n *         description: 사용자명 중복\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n */\nrouter.post('/register', async (req, res) => {\n    const { username, password, role } = req.body;\n    if (!username || !password || !role) {\n        return res.status(400).json({ message: '필수 입력값 누락' });\n    }\n    if (!['ADMIN', 'QA', 'DEV', 'PM'].includes(role)) {\n        return res.status(400).json({ message: '유효하지 않은 역할' });\n    }\n    const existing = await findUserByUsername(username);\n    if (existing) {\n        return res.status(409).json({ message: '이미 존재하는 사용자명' });\n    }\n    const user = await createUser(username, password, role as UserRole);\n    res.status(201).json({ id: user.id, username: user.username, role: user.role });\n});\n\n/**\n * @swagger\n * /api/auth/login:\n *   post:\n *     summary: 사용자 로그인\n *     description: 사용자 인증 후 JWT 토큰을 반환합니다.\n *     tags: [Authentication]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/LoginRequest'\n *     responses:\n *       200:\n *         description: 로그인 성공\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/LoginResponse'\n *       401:\n *         description: 인증 실패\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n */\nrouter.post('/login', (req, res, next) => {\n    console.log('🔐 로그인 요청 받음');\n    console.log('📥 요청 본문:', req.body);\n    console.log('📥 요청 헤더:', req.headers);\n    \n    passport.authenticate('local', { session: false }, (err: any, user: any, info: any) => {\n        if (err) {\n            console.log('❌ 인증 오류:', err);\n            return next(err);\n        }\n        if (!user) {\n            console.log('❌ 인증 실패:', info?.message || '사용자를 찾을 수 없음');\n            return res.status(401).json({ message: info?.message || '인증 실패' });\n        }\n        \n        console.log('✅ 인증 성공:', user.username);\n        const token = jwt.sign({ id: user.id, username: user.username, role: user.role }, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\n        const response = { token, user: { id: user.id, username: user.username, role: user.role } };\n        console.log('📤 응답 데이터:', response);\n        res.json(response);\n    })(req, res, next);\n});\n\nexport default router; "],"version":3}