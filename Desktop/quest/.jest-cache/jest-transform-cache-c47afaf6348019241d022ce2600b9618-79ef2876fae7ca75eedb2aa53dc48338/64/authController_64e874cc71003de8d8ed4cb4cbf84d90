8671c707af76f431d9085368294bada9
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const passport_1 = __importDefault(require("../../../infrastructure/security/passport"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const userService_1 = require("../services/userService");
/**
 * @swagger
 * components:
 *   schemas:
 *     User:
 *       type: object
 *       properties:
 *         id:
 *           type: integer
 *           description: ÏÇ¨Ïö©Ïûê ID
 *         username:
 *           type: string
 *           description: ÏÇ¨Ïö©ÏûêÎ™Ö (Ïù¥Î©îÏùº)
 *         role:
 *           type: string
 *           enum: [ADMIN, QA, DEV, PM]
 *           description: ÏÇ¨Ïö©Ïûê Ïó≠Ìï†
 *     LoginRequest:
 *       type: object
 *       required:
 *         - email
 *         - password
 *       properties:
 *         email:
 *           type: string
 *           format: email
 *           description: ÏÇ¨Ïö©Ïûê Ïù¥Î©îÏùº
 *         password:
 *           type: string
 *           description: ÎπÑÎ∞ÄÎ≤àÌò∏
 *     LoginResponse:
 *       type: object
 *       properties:
 *         token:
 *           type: string
 *           description: JWT ÌÜ†ÌÅ∞
 *         user:
 *           $ref: '#/components/schemas/User'
 *     RegisterRequest:
 *       type: object
 *       required:
 *         - username
 *         - password
 *         - role
 *       properties:
 *         username:
 *           type: string
 *           description: ÏÇ¨Ïö©ÏûêÎ™Ö (Ïù¥Î©îÏùº)
 *         password:
 *           type: string
 *           description: ÎπÑÎ∞ÄÎ≤àÌò∏
 *         role:
 *           type: string
 *           enum: [ADMIN, QA, DEV, PM]
 *           description: ÏÇ¨Ïö©Ïûê Ïó≠Ìï†
 */
const router = (0, express_1.Router)();
const JWT_SECRET = process.env.JWT_SECRET || 'dev_secret';
// Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑúÎäî 24ÏãúÍ∞Ñ, ÌîÑÎ°úÎçïÏÖòÏóêÏÑúÎäî 1ÏãúÍ∞Ñ
const JWT_EXPIRES_IN = process.env.NODE_ENV === 'production' ? '1h' : '24h';
/**
 * @swagger
 * /api/auth/register:
 *   post:
 *     summary: ÏÇ¨Ïö©Ïûê Îì±Î°ù
 *     description: ÏÉàÎ°úÏö¥ ÏÇ¨Ïö©ÏûêÎ•º Îì±Î°ùÌï©ÎãàÎã§.
 *     tags: [Authentication]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/RegisterRequest'
 *     responses:
 *       201:
 *         description: ÏÇ¨Ïö©Ïûê Îì±Î°ù ÏÑ±Í≥µ
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/User'
 *       400:
 *         description: ÏûòÎ™ªÎêú ÏöîÏ≤≠
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *       409:
 *         description: ÏÇ¨Ïö©ÏûêÎ™Ö Ï§ëÎ≥µ
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 */
router.post('/register', async (req, res) => {
    const { username, password, role } = req.body;
    if (!username || !password || !role) {
        return res.status(400).json({ message: 'ÌïÑÏàò ÏûÖÎ†•Í∞í ÎàÑÎùΩ' });
    }
    if (!['ADMIN', 'QA', 'DEV', 'PM'].includes(role)) {
        return res.status(400).json({ message: 'Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Ïó≠Ìï†' });
    }
    const existing = await (0, userService_1.findUserByUsername)(username);
    if (existing) {
        return res.status(409).json({ message: 'Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî ÏÇ¨Ïö©ÏûêÎ™Ö' });
    }
    const user = await (0, userService_1.createUser)(username, password, role);
    res.status(201).json({ id: user.id, username: user.username, role: user.role });
});
/**
 * @swagger
 * /api/auth/login:
 *   post:
 *     summary: ÏÇ¨Ïö©Ïûê Î°úÍ∑∏Ïù∏
 *     description: ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù ÌõÑ JWT ÌÜ†ÌÅ∞ÏùÑ Î∞òÌôòÌï©ÎãàÎã§.
 *     tags: [Authentication]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/LoginRequest'
 *     responses:
 *       200:
 *         description: Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/LoginResponse'
 *       401:
 *         description: Ïù∏Ï¶ù Ïã§Ìå®
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 */
router.post('/login', (req, res, next) => {
    console.log('üîê Î°úÍ∑∏Ïù∏ ÏöîÏ≤≠ Î∞õÏùå');
    console.log('üì• ÏöîÏ≤≠ Î≥∏Î¨∏:', req.body);
    console.log('üì• ÏöîÏ≤≠ Ìó§Îçî:', req.headers);
    passport_1.default.authenticate('local', { session: false }, (err, user, info) => {
        if (err) {
            console.log('‚ùå Ïù∏Ï¶ù Ïò§Î•ò:', err);
            return next(err);
        }
        if (!user) {
            console.log('‚ùå Ïù∏Ï¶ù Ïã§Ìå®:', info?.message || 'ÏÇ¨Ïö©ÏûêÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùå');
            return res.status(401).json({ message: info?.message || 'Ïù∏Ï¶ù Ïã§Ìå®' });
        }
        console.log('‚úÖ Ïù∏Ï¶ù ÏÑ±Í≥µ:', user.username);
        const token = jsonwebtoken_1.default.sign({ id: user.id, username: user.username, role: user.role }, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });
        const response = { token, user: { id: user.id, username: user.username, role: user.role } };
        console.log('üì§ ÏùëÎãµ Îç∞Ïù¥ÌÑ∞:', response);
        res.json(response);
    })(req, res, next);
});
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,