bfadb2849317af2f33d18d92e9747560
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock folderRepository
globals_1.jest.mock('../src/main/app/domains/folders/repositories/folderRepository');
const folderService = __importStar(require("../src/main/app/domains/folders/services/folderService"));
const folderRepository = __importStar(require("../src/main/app/domains/folders/repositories/folderRepository"));
const mockFolderRepository = folderRepository;
(0, globals_1.describe)('Folder Service', () => {
    (0, globals_1.beforeEach)(() => {
        globals_1.jest.clearAllMocks();
        // listFolders 모킹 추가
        mockFolderRepository.listFolders.mockResolvedValue([]);
        // getFolderById 모킹 추가
        mockFolderRepository.getFolderById.mockResolvedValue({
            id: 1,
            name: 'Test Folder',
            description: 'Test Description',
            parentId: undefined,
            projectId: 1,
            orderIndex: 100,
            depth: 0,
            createdBy: 'testuser',
            isLocked: false,
            isArchived: false,
            createdAt: new Date(),
            updatedAt: new Date()
        });
    });
    (0, globals_1.describe)('createFolder', () => {
        (0, globals_1.it)('should create a folder successfully', async () => {
            const folderData = {
                name: 'Test Folder',
                description: 'Test Description',
                parentId: undefined,
                projectId: 1
            };
            const expectedFolder = {
                id: 1,
                name: 'Test Folder',
                description: 'Test Description',
                parentId: undefined,
                projectId: 1,
                orderIndex: 100,
                depth: 0,
                createdBy: 'testuser',
                isLocked: false,
                isArchived: false,
                createdAt: new Date(),
                updatedAt: new Date()
            };
            mockFolderRepository.createFolder.mockResolvedValue(expectedFolder);
            const result = await folderService.createFolder(folderData, 'testuser');
            (0, globals_1.expect)(result).toEqual(expectedFolder);
            (0, globals_1.expect)(mockFolderRepository.createFolder).toHaveBeenCalledWith({
                projectId: 1,
                parentId: undefined,
                name: 'Test Folder',
                description: 'Test Description',
                orderIndex: 100,
                depth: 0,
                createdBy: 'testuser',
                isLocked: false,
                isArchived: false
            });
        });
    });
    (0, globals_1.describe)('getFolderById', () => {
        (0, globals_1.it)('should return folder when found', async () => {
            const folderId = 1;
            const expectedFolder = {
                id: 1,
                name: 'Test Folder',
                description: 'Test Description',
                parentId: undefined,
                projectId: 1,
                orderIndex: 100,
                depth: 0,
                createdBy: 'testuser',
                isLocked: false,
                isArchived: false,
                createdAt: new Date(),
                updatedAt: new Date()
            };
            mockFolderRepository.getFolderById.mockResolvedValue(expectedFolder);
            const result = await folderService.getFolderById(folderId);
            (0, globals_1.expect)(result).toEqual(expectedFolder);
            (0, globals_1.expect)(mockFolderRepository.getFolderById).toHaveBeenCalledWith(folderId);
        });
        (0, globals_1.it)('should return null when folder not found', async () => {
            const folderId = 999;
            mockFolderRepository.getFolderById.mockResolvedValue(null);
            const result = await folderService.getFolderById(folderId);
            (0, globals_1.expect)(result).toBeNull();
            (0, globals_1.expect)(mockFolderRepository.getFolderById).toHaveBeenCalledWith(folderId);
        });
    });
    (0, globals_1.describe)('listFolders', () => {
        (0, globals_1.it)('should return list of folders', async () => {
            const expectedFolders = [
                {
                    id: 1,
                    name: 'Folder 1',
                    description: 'Description 1',
                    parentId: undefined,
                    projectId: 1,
                    orderIndex: 100,
                    depth: 0,
                    createdBy: 'testuser',
                    isLocked: false,
                    isArchived: false,
                    createdAt: new Date(),
                    updatedAt: new Date()
                },
                {
                    id: 2,
                    name: 'Folder 2',
                    description: 'Description 2',
                    parentId: 1,
                    projectId: 1,
                    orderIndex: 200,
                    depth: 1,
                    createdBy: 'testuser',
                    isLocked: false,
                    isArchived: false,
                    createdAt: new Date(),
                    updatedAt: new Date()
                }
            ];
            mockFolderRepository.listFolders.mockResolvedValue(expectedFolders);
            const result = await folderService.listFoldersByProject(1);
            (0, globals_1.expect)(result).toEqual(expectedFolders);
            (0, globals_1.expect)(mockFolderRepository.listFolders).toHaveBeenCalled();
        });
    });
    (0, globals_1.describe)('updateFolder', () => {
        (0, globals_1.it)('should update folder successfully', async () => {
            const folderId = 1;
            const updateData = {
                name: 'Updated Folder',
                description: 'Updated Description',
                updatedBy: 'testuser'
            };
            const expectedFolder = {
                id: 1,
                name: 'Updated Folder',
                description: 'Updated Description',
                parentId: undefined,
                projectId: 1,
                orderIndex: 100,
                depth: 0,
                createdBy: 'testuser',
                isLocked: false,
                isArchived: false,
                createdAt: new Date(),
                updatedAt: new Date()
            };
            mockFolderRepository.updateFolder.mockResolvedValue(expectedFolder);
            const result = await folderService.updateFolder(folderId, updateData, 'testuser');
            (0, globals_1.expect)(result).toEqual(expectedFolder);
            (0, globals_1.expect)(mockFolderRepository.updateFolder).toHaveBeenCalledWith(folderId, { ...updateData, updatedBy: 'testuser' });
        });
        (0, globals_1.it)('should return null when folder not found', async () => {
            const folderId = 999;
            const updateData = {
                name: 'Updated Folder',
                updatedBy: 'testuser'
            };
            mockFolderRepository.updateFolder.mockResolvedValue(null);
            const result = await folderService.updateFolder(folderId, updateData, 'testuser');
            (0, globals_1.expect)(result).toBeNull();
            (0, globals_1.expect)(mockFolderRepository.updateFolder).toHaveBeenCalledWith(folderId, { ...updateData, updatedBy: 'testuser' });
        });
    });
    (0, globals_1.describe)('deleteFolder', () => {
        (0, globals_1.it)('should delete folder successfully', async () => {
            const folderId = 1;
            mockFolderRepository.deleteFolder.mockResolvedValue(true);
            const result = await folderService.deleteFolder(folderId, 'soft', 'testuser');
            (0, globals_1.expect)(result).toBe(true);
            (0, globals_1.expect)(mockFolderRepository.deleteFolder).toHaveBeenCalledWith(folderId, 'soft', 'testuser');
        });
        (0, globals_1.it)('should return false when folder not found', async () => {
            const folderId = 999;
            mockFolderRepository.deleteFolder.mockResolvedValue(false);
            const result = await folderService.deleteFolder(folderId, 'soft', 'testuser');
            (0, globals_1.expect)(result).toBe(false);
            (0, globals_1.expect)(mockFolderRepository.deleteFolder).toHaveBeenCalledWith(folderId, 'soft', 'testuser');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,