{"file":"/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/src/main/app/domains/executions/repositories/executionRepository.ts","mappings":";;;AACA,wEAA2F;AAE9E,QAAA,mBAAmB,GAAG;IAC/B,KAAK,CAAC,MAAM,CAAC,SAA4D;QACrE,MAAM,IAAA,4BAAiB,GAAE,CAAC;QAC1B,MAAM,QAAQ,GAAG,IAAA,sBAAW,GAAE,CAAC;QAC/B,IAAI,CAAC,QAAQ,EAAE,CAAC;YACZ,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;QACtD,CAAC;QACD,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;QAEvB,OAAO,CAAC,GAAG,CAAC,sBAAsB,EAAE,SAAS,CAAC,CAAC;QAE/C,MAAM,GAAG,GAAG;;;qBAGC,CAAC;QAEd,MAAM,MAAM,GAAG;YACX,SAAS,CAAC,UAAU;YACpB,SAAS,CAAC,SAAS;YACnB,SAAS,CAAC,MAAM;YAChB,SAAS,CAAC,UAAU;YACpB,SAAS,CAAC,UAAU;YACpB,SAAS,CAAC,OAAO,IAAI,IAAI;YACzB,GAAG;YACH,GAAG;SACN,CAAC;QAEF,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;QACnC,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;QAEpC,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,KAAK,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;QACjD,OAAO,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7C,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,EAAU;QACrB,MAAM,IAAA,4BAAiB,GAAE,CAAC;QAC1B,MAAM,QAAQ,GAAG,IAAA,sBAAW,GAAE,CAAC;QAC/B,IAAI,CAAC,QAAQ,EAAE,CAAC;YACZ,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;QACtD,CAAC;QACD,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,KAAK,CAAC,wCAAwC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACpF,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IACrE,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,UAAkB;QACnC,MAAM,IAAA,4BAAiB,GAAE,CAAC;QAC1B,MAAM,QAAQ,GAAG,IAAA,sBAAW,GAAE,CAAC;QAC/B,IAAI,CAAC,QAAQ,EAAE,CAAC;YACZ,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;QACtD,CAAC;QACD,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,KAAK,CAAC,iDAAiD,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;QACrG,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;IAC9C,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAU,EAAE,MAAoD;QACzE,MAAM,IAAA,4BAAiB,GAAE,CAAC;QAC1B,MAAM,QAAQ,GAAG,IAAA,sBAAW,GAAE,CAAC;QAC/B,IAAI,CAAC,QAAQ,EAAE,CAAC;YACZ,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;QACtD,CAAC;QAED,MAAM,UAAU,GAAa,EAAE,CAAC;QAChC,MAAM,MAAM,GAAU,EAAE,CAAC;QACzB,IAAI,UAAU,GAAG,CAAC,CAAC;QAEnB,IAAI,MAAM,CAAC,MAAM,KAAK,SAAS,EAAE,CAAC;YAC9B,UAAU,CAAC,IAAI,CAAC,aAAa,UAAU,EAAE,EAAE,CAAC,CAAC;YAC7C,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC/B,CAAC;QAED,IAAI,MAAM,CAAC,UAAU,KAAK,SAAS,EAAE,CAAC;YAClC,UAAU,CAAC,IAAI,CAAC,kBAAkB,UAAU,EAAE,EAAE,CAAC,CAAC;YAClD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QACnC,CAAC;QAED,IAAI,MAAM,CAAC,UAAU,KAAK,SAAS,EAAE,CAAC;YAClC,UAAU,CAAC,IAAI,CAAC,kBAAkB,UAAU,EAAE,EAAE,CAAC,CAAC;YAClD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QACnC,CAAC;QAED,IAAI,MAAM,CAAC,OAAO,KAAK,SAAS,EAAE,CAAC;YAC/B,UAAU,CAAC,IAAI,CAAC,eAAe,UAAU,EAAE,EAAE,CAAC,CAAC;YAC/C,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAChC,CAAC;QAED,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAEtD,UAAU,CAAC,IAAI,CAAC,iBAAiB,UAAU,EAAE,EAAE,CAAC,CAAC;QACjD,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;QACxB,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAEhB,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,KAAK,CAC/B,yBAAyB,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,UAAU,cAAc,EACtF,MAAM,CACT,CAAC;QACF,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IACrE,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAU;QACnB,MAAM,IAAA,4BAAiB,GAAE,CAAC;QAC1B,MAAM,QAAQ,GAAG,IAAA,sBAAW,GAAE,CAAC;QAC/B,IAAI,CAAC,QAAQ,EAAE,CAAC;YACZ,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;QACtD,CAAC;QACD,MAAM,QAAQ,CAAC,KAAK,CAAC,sCAAsC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACvE,CAAC;CACJ,CAAC;AAEF,SAAS,iBAAiB,CAAC,GAAQ;IAC/B,OAAO;QACH,EAAE,EAAE,GAAG,CAAC,EAAE;QACV,UAAU,EAAE,GAAG,CAAC,WAAW;QAC3B,SAAS,EAAE,GAAG,CAAC,UAAU;QACzB,MAAM,EAAE,GAAG,CAAC,MAAM;QAClB,UAAU,EAAE,GAAG,CAAC,WAAW;QAC3B,UAAU,EAAE,GAAG,CAAC,WAAW;QAC3B,OAAO,EAAE,GAAG,CAAC,QAAQ,EAAE,2BAA2B;QAClD,SAAS,EAAE,GAAG,CAAC,UAAU;QACzB,SAAS,EAAE,GAAG,CAAC,UAAU;KAC5B,CAAC;AACN,CAAC","names":[],"sources":["/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/src/main/app/domains/executions/repositories/executionRepository.ts"],"sourcesContent":["import { Execution } from '../types';\nimport { getPgClient, ensurePgConnected } from '../../../infrastructure/database/pgClient';\n\nexport const executionRepository = {\n    async insert(execution: Omit<Execution, 'id' | 'createdAt' | 'updatedAt'>): Promise<Execution> {\n        await ensurePgConnected();\n        const pgClient = getPgClient();\n        if (!pgClient) {\n            throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n        }\n        const now = new Date();\n        \n        console.log('Inserting execution:', execution);\n        \n        const sql = `INSERT INTO executions \n            (testcase_id, release_id, status, executed_by, executed_at, comments, created_at, updated_at)\n         VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n         RETURNING *`;\n        \n        const params = [\n            execution.testcaseId,\n            execution.releaseId,\n            execution.status,\n            execution.executedBy,\n            execution.executedAt,\n            execution.comment || null,\n            now,\n            now\n        ];\n        \n        console.log('Executing SQL:', sql);\n        console.log('With params:', params);\n        \n        const result = await pgClient.query(sql, params);\n        return mapRowToExecution(result.rows[0]);\n    },\n\n    async findById(id: number): Promise<Execution | null> {\n        await ensurePgConnected();\n        const pgClient = getPgClient();\n        if (!pgClient) {\n            throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n        }\n        const result = await pgClient.query('SELECT * FROM executions WHERE id = $1', [id]);\n        return result.rows[0] ? mapRowToExecution(result.rows[0]) : null;\n    },\n\n    async findByTestCase(testcaseId: number): Promise<Execution[]> {\n        await ensurePgConnected();\n        const pgClient = getPgClient();\n        if (!pgClient) {\n            throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n        }\n        const result = await pgClient.query('SELECT * FROM executions WHERE testcase_id = $1', [testcaseId]);\n        return result.rows.map(mapRowToExecution);\n    },\n\n    async update(id: number, update: Partial<Omit<Execution, 'id' | 'createdAt'>>): Promise<Execution | null> {\n        await ensurePgConnected();\n        const pgClient = getPgClient();\n        if (!pgClient) {\n            throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n        }\n        \n        const setClauses: string[] = [];\n        const values: any[] = [];\n        let paramIndex = 1;\n        \n        if (update.status !== undefined) {\n            setClauses.push(`status = $${paramIndex++}`);\n            values.push(update.status);\n        }\n        \n        if (update.executedBy !== undefined) {\n            setClauses.push(`executed_by = $${paramIndex++}`);\n            values.push(update.executedBy);\n        }\n        \n        if (update.executedAt !== undefined) {\n            setClauses.push(`executed_at = $${paramIndex++}`);\n            values.push(update.executedAt);\n        }\n        \n        if (update.comment !== undefined) {\n            setClauses.push(`comments = $${paramIndex++}`);\n            values.push(update.comment);\n        }\n        \n        if (setClauses.length === 0) return this.findById(id);\n        \n        setClauses.push(`updated_at = $${paramIndex++}`);\n        values.push(new Date());\n        values.push(id);\n        \n        const result = await pgClient.query(\n            `UPDATE executions SET ${setClauses.join(', ')} WHERE id = $${paramIndex} RETURNING *`,\n            values\n        );\n        return result.rows[0] ? mapRowToExecution(result.rows[0]) : null;\n    },\n\n    async delete(id: number): Promise<void> {\n        await ensurePgConnected();\n        const pgClient = getPgClient();\n        if (!pgClient) {\n            throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n        }\n        await pgClient.query('DELETE FROM executions WHERE id = $1', [id]);\n    }\n};\n\nfunction mapRowToExecution(row: any): Execution {\n    return {\n        id: row.id,\n        testcaseId: row.testcase_id,\n        releaseId: row.release_id,\n        status: row.status,\n        executedBy: row.executed_by,\n        executedAt: row.executed_at,\n        comment: row.comments, // ✅ comments -> comment 매핑\n        createdAt: row.created_at,\n        updatedAt: row.updated_at\n    };\n}"],"version":3}