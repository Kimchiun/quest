c499edc25340d3bcb711574e57e44e17
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const styled_components_1 = __importDefault(require("styled-components"));
const api_1 = require("../../../services/api");
const SimpleStatusDropdown_1 = __importDefault(require("./SimpleStatusDropdown"));
// 스타일 컴포넌트
const ExecutionContainer = styled_components_1.default.div `
  display: flex;
  flex-direction: column;
  height: 100%;
  background: #f8fafc;
  margin: 0; // 패딩 상쇄 제거
`;
// 상단 컨텍스트 바 - 흰색 컨셉 디자인
const TopContextBar = styled_components_1.default.div `
  background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
  border-bottom: 1px solid #e2e8f0;
  padding: ${props => props.isCollapsed ? '16px 24px' : '24px 24px'};
  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);
  color: #1e293b;
  transition: all 0.3s ease;
  position: relative;

  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(90deg, transparent 0%, #cbd5e1 50%, transparent 100%);
  }
  
  @media (max-width: 1440px) {
    padding: ${props => props.isCollapsed ? '14px 20px' : '20px 20px'};
  }
  
  @media (max-width: 1280px) {
    padding: ${props => props.isCollapsed ? '12px 16px' : '16px 16px'};
  }
  
  @media (max-width: 768px) {
    padding: ${props => props.isCollapsed ? '10px 12px' : '12px 12px'};
  }
`;
const ReleaseMeta = styled_components_1.default.div `
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: ${props => props.isCollapsed ? '0' : '16px'};
`;
const ReleaseLeft = styled_components_1.default.div `
  display: flex;
  align-items: center;
  gap: 20px;
`;
const ReleaseRight = styled_components_1.default.div `
  display: flex;
  align-items: center;
  gap: 12px;
`;
const ReleaseInfo = styled_components_1.default.div `
  display: flex;
  flex-direction: ${props => props.isCollapsed ? 'row' : 'column'};
  align-items: ${props => props.isCollapsed ? 'center' : 'flex-start'};
  gap: ${props => props.isCollapsed ? '16px' : '6px'};
`;
const ReleaseNameContainer = styled_components_1.default.div `
  display: flex;
  align-items: center;
  gap: 12px;
`;
const ReleaseName = styled_components_1.default.h2 `
  margin: 0;
  font-size: ${props => props.isCollapsed ? '18px' : '24px'};
  font-weight: 700;
  color: #1e293b;
  transition: all 0.3s ease;
`;
const ReleaseDetails = styled_components_1.default.div `
  display: flex;
  gap: ${props => props.isCollapsed ? '12px' : '20px'};
  font-size: ${props => props.isCollapsed ? '12px' : '14px'};
  color: #64748b;
  align-items: center;
  transition: all 0.3s ease;
`;
const ReleaseDetailItem = styled_components_1.default.div `
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 6px 12px;
  background: #f1f5f9;
  border-radius: 6px;
  font-weight: 500;
  font-size: 13px;
  border: 1px solid #e2e8f0;
  color: #475569;

  &::before {
    content: '';
    width: 4px;
    height: 4px;
    background: #64748b;
    border-radius: 50%;
  }
`;
const ProgressSummary = styled_components_1.default.div `
  display: ${props => props.isCollapsed ? 'none' : 'flex'};
  align-items: center;
  gap: 20px;
  padding: 16px 20px;
  background: #f8fafc;
  border-radius: 12px;
  margin-bottom: 16px;
  border: 1px solid #e2e8f0;
  transition: all 0.3s ease;
`;
const ActionButton = styled_components_1.default.button `
  padding: 10px 20px;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  background: #3b82f6;
  color: white;
  font-size: 14px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  gap: 8px;
  
  &:hover:not(:disabled) {
    background: #2563eb;
    border-color: #2563eb;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
  }
  
  &:active:not(:disabled) {
    transform: translateY(0);
  }
  
  &:disabled {
    background: #e5e7eb;
    border-color: #d1d5db;
    color: #9ca3af;
    cursor: not-allowed;
    opacity: 0.6;
  }

  &::before {
    content: '';
    width: 16px;
    height: 16px;
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/></svg>');
    background-size: contain;
    background-repeat: no-repeat;
  }
`;
const CollapseButton = styled_components_1.default.button `
  padding: 8px 16px;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  background: #f8fafc;
  color: #64748b;
  font-size: 13px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  gap: 8px;
  
  &:hover {
    background: #f1f5f9;
    border-color: #94a3b8;
    color: #475569;
  }

  &::before {
    content: '';
    width: 14px;
    height: 14px;
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="${props => props.isCollapsed ? 'M19 9l-7 7-7-7' : 'M5 15l7-7 7 7'}"/></svg>');
    background-size: contain;
    background-repeat: no-repeat;
    transition: transform 0.2s ease;
  }
`;
// 모달 스타일 컴포넌트들
const ModalOverlay = styled_components_1.default.div `
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 9999;
`;
const ModalContent = styled_components_1.default.div `
  background: white;
  border-radius: 8px;
  padding: 24px;
  width: 80%;
  max-width: 800px;
  max-height: 80vh;
  overflow: hidden;
  display: flex;
  flex-direction: column;
`;
const ModalHeader = styled_components_1.default.div `
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
  padding-bottom: 16px;
  border-bottom: 1px solid #e5e7eb;
`;
const ModalTitle = styled_components_1.default.h2 `
  margin: 0;
  font-size: 18px;
  font-weight: 600;
  color: #1f2937;
`;
const ModalBody = styled_components_1.default.div `
  flex: 1;
  overflow-y: auto;
  margin-bottom: 20px;
`;
const FolderList = styled_components_1.default.div `
  display: flex;
  flex-direction: column;
  gap: 4px;
`;
// 테스트 관리 영역과 동일한 폴더 트리 스타일드 컴포넌트들
const ImportFolderItem = styled_components_1.default.div `
  display: flex;
  align-items: center;
  height: 28px;
  padding-left: ${props => props.level * 16 + 12}px;
  padding-right: 12px;
  cursor: pointer;
  position: relative;
  background: ${props => props.$isSelected ? '#dbeafe' : 'transparent'};
  border-left: ${props => props.$isSelected ? '3px solid #3b82f6' : 'none'};
  transition: background-color 0.2s ease;
  font-weight: ${props => props.$isSelected ? '600' : '400'};

  &:hover {
    background: ${props => props.$isSelected ? '#dbeafe' : '#f9fafb'};
  }
`;
const ImportFolderCheckbox = styled_components_1.default.input `
  margin-right: 8px;
  width: 14px;
  height: 14px;
  accent-color: #3b82f6;
`;
const ImportFolderIcon = styled_components_1.default.div `
  width: 16px;
  height: 16px;
  margin-right: 8px;
  position: relative;
  color: #6b7280;

  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: 2px solid currentColor;
    border-radius: 2px;
    background: transparent;
  }

  &::after {
    content: '';
    position: absolute;
    top: 0;
    left: 2px;
    right: 2px;
    height: 3px;
    background: currentColor;
    border-radius: 1px 1px 0 0;
  }
`;
const ImportTextContainer = styled_components_1.default.div `
  flex: 1;
  display: flex;
  align-items: center;
  min-width: 0;
  overflow: hidden;
`;
const ImportFolderName = styled_components_1.default.span `
  font-size: 14px;
  font-weight: 400;
  color: #111827;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
  display: block;
`;
const ImportTestCaseCount = styled_components_1.default.span `
  font-size: 12px;
  font-weight: 500;
  color: #6b7280;
  margin-left: 4px;
`;
const ImportFolderChildren = styled_components_1.default.div `
  position: relative;
`;
const ImportRemoveButton = styled_components_1.default.button `
  width: 20px;
  height: 20px;
  background: #ef4444;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  opacity: 0;
  transition: opacity 0.2s;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 12px;
  font-weight: bold;
  margin-left: 8px;

  &:hover {
    background: #dc2626;
  }

  ${ImportFolderItem}:hover & {
    opacity: 1;
  }
`;
const FolderItem = styled_components_1.default.div `
  display: flex;
  align-items: center;
  padding: 8px 12px;
  border: 1px solid #e5e7eb;
  border-radius: 6px;
  cursor: pointer;
  transition: all 0.2s;
  margin-left: ${props => props.level * 20}px;
  
  &:hover {
    background: #f9fafb;
    border-color: #d1d5db;
  }
  
  &.selected {
    background: #eff6ff;
    border-color: #3b82f6;
  }
`;
const FolderCheckbox = styled_components_1.default.input `
  margin-right: 12px;
`;
const FolderInfo = styled_components_1.default.div `
  flex: 1;
  display: flex;
  align-items: center;
  gap: 8px;
`;
const FolderIcon = styled_components_1.default.span `
  color: #6b7280;
  font-size: 16px;
`;
const FolderName = styled_components_1.default.div `
  font-weight: 500;
  color: #1f2937;
`;
const FolderCount = styled_components_1.default.div `
  font-size: 12px;
  color: #6b7280;
  background: #f3f4f6;
  padding: 2px 6px;
  border-radius: 4px;
  margin-left: auto;
`;
const ModalFooter = styled_components_1.default.div `
  display: flex;
  justify-content: flex-end;
  gap: 12px;
  padding-top: 16px;
  border-top: 1px solid #e5e7eb;
`;
const CancelButton = styled_components_1.default.button `
  padding: 8px 16px;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  background: white;
  color: #374151;
  font-size: 14px;
  cursor: pointer;
  
  &:hover {
    background: #f9fafb;
  }
`;
const AddButton = styled_components_1.default.button `
  padding: 8px 16px;
  border: 1px solid #3b82f6;
  border-radius: 6px;
  background: #3b82f6;
  color: white;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  
  &:hover {
    background: #2563eb;
  }
  
  &:disabled {
    background: #9ca3af;
    border-color: #9ca3af;
    cursor: not-allowed;
  }
`;
const ProgressItem = styled_components_1.default.div `
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 6px;
  padding: 12px 16px;
  background: white;
  border-radius: 6px;
  border: 1px solid #e2e8f0;
  transition: all 0.2s ease;
  min-width: 80px;
  min-height: 65px;
  flex: 1;

  &:hover {
    background: #fafafa;
    border-color: #cbd5e1;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }
`;
const ProgressNumber = styled_components_1.default.span `
  font-size: 20px;
  font-weight: 700;
  color: ${props => props.color};
  line-height: 1;
`;
const ProgressLabel = styled_components_1.default.span `
  font-size: 11px;
  color: ${props => props.color};
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
`;
const ProgressBar = styled_components_1.default.div `
  flex: 1;
  height: 8px;
  background: #f1f5f9;
  border-radius: 4px;
  overflow: hidden;
  margin: 0 24px;
  border: 1px solid #e2e8f0;
`;
const ProgressFill = styled_components_1.default.div `
  height: 100%;
  background: linear-gradient(90deg, #3b82f6, #10b981);
  width: ${props => props.percentage}%;
  transition: width 0.3s ease;
  border-radius: 4px;
`;
const FilterSummary = styled_components_1.default.div `
  display: ${props => props.isCollapsed ? 'none' : 'flex'};
  align-items: center;
  gap: 8px;
  flex-wrap: wrap;
  margin-top: 12px;
`;
const FilterBadge = styled_components_1.default.span `
  background: #f1f5f9;
  color: #475569;
  padding: 6px 12px;
  border-radius: 6px;
  font-size: 12px;
  font-weight: 500;
  border: 1px solid #e2e8f0;
`;
const LiveIndicator = styled_components_1.default.div `
  display: flex;
  align-items: center;
  gap: 6px;
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 11px;
  font-weight: 600;
  background: ${props => props.$isLive
    ? '#ecfdf5'
    : '#fef2f2'};
  color: ${props => props.$isLive ? '#16a34a' : '#dc2626'};
  border: 1px solid ${props => props.$isLive
    ? '#bbf7d0'
    : '#fecaca'};
  text-transform: uppercase;
  letter-spacing: 0.5px;
`;
const LiveDot = styled_components_1.default.div `
  width: 6px;
  height: 6px;
  border-radius: 50%;
  background: ${props => props.$isLive ? '#16a34a' : '#dc2626'};
  animation: ${props => props.$isLive ? 'livePulse 2s infinite' : 'none'};
  
  @keyframes livePulse {
    0%, 100% { 
      opacity: 1; 
      transform: scale(1);
    }
    50% { 
      opacity: 0.5; 
      transform: scale(1.1);
    }
  }
`;
// 메인 콘텐츠 영역
const MainContent = styled_components_1.default.div `
  display: flex;
  flex: 1;
  overflow: hidden;
  min-height: 0; // flex 아이템이 축소될 수 있도록 함
  
  @media (max-width: 768px) {
    flex-direction: column;
  }
`;
// 좌측 필터 패널
const FilterPanel = styled_components_1.default.div `
  width: ${props => props.width}px;
  background: white;
  border-right: 1px solid #e2e8f0;
  display: flex;
  flex-direction: column;
  overflow-y: auto;
  position: relative;
  height: 100%; // 전체 높이 사용
  min-height: 0; // flex 축소 허용
  
  @media (max-width: 1440px) {
    width: ${props => Math.max(props.width * 0.9, 200)}px;
  }
  
  @media (max-width: 1280px) {
    width: ${props => Math.max(props.width * 0.7, 180)}px;
  }
  
  @media (max-width: 1024px) {
    width: ${props => Math.max(props.width * 0.6, 160)}px;
  }
  
  @media (max-width: 768px) {
    width: 100%;
    height: auto;
    border-right: none;
    border-bottom: 1px solid #e2e8f0;
  }
`;
// 좌측 패널 크기 조절 핸들
const LeftPanelResizeHandle = styled_components_1.default.div `
  position: absolute;
  top: 0;
  right: -4px;
  width: 8px;
  height: 100%;
  cursor: col-resize;
  background: transparent;
  z-index: 10;

  &:hover {
    background: rgba(59, 130, 246, 0.1);
  }

  &::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 2px;
    height: 20px;
    background: #d1d5db;
    border-radius: 1px;
  }
`;
const FilterSection = styled_components_1.default.div `
  padding: 16px;
  border-bottom: 1px solid #f1f5f9;
`;
const FilterTitle = styled_components_1.default.h3 `
  margin: 0 0 12px 0;
  font-size: 14px;
  font-weight: 600;
  color: #1e293b;
`;
const FilterGroup = styled_components_1.default.div `
  margin-bottom: 16px;
`;
const FilterLabel = styled_components_1.default.label `
  display: block;
  font-size: 12px;
  font-weight: 500;
  color: #64748b;
  margin-bottom: 6px;
`;
const FilterSelect = styled_components_1.default.select `
  width: 100%;
  padding: 8px 12px;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  font-size: 14px;
  background: white;
  
  &:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }
`;
const FilterInput = styled_components_1.default.input `
  width: 100%;
  padding: 8px 12px;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  font-size: 14px;
  
  &:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }
`;
const SavedFilters = styled_components_1.default.div `
  padding: 16px;
`;
const SavedFilterItem = styled_components_1.default.div `
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 8px 12px;
  margin-bottom: 8px;
  background: #f8fafc;
  border-radius: 6px;
  cursor: pointer;
  transition: background 0.2s;
  
  &:hover {
    background: #f1f5f9;
  }
`;
const BulkActionPanel = styled_components_1.default.div `
  padding: 16px;
  background: #fef3c7;
  border-top: 1px solid #fde68a;
`;
const BulkActionButton = styled_components_1.default.button `
  width: 100%;
  padding: 8px 12px;
  margin-bottom: 8px;
  border: none;
  border-radius: 6px;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
  
  background: ${props => {
    switch (props.variant) {
        case 'pass': return '#10b981';
        case 'fail': return '#ef4444';
        case 'block': return '#f59e0b';
        case 'skip': return '#8b5cf6';
        default: return '#6b7280';
    }
}};
  color: white;
  
  &:hover {
    opacity: 0.9;
  }
  
  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
`;
// 중앙 테스트 리스트
const TestListContainer = styled_components_1.default.div `
  flex: 1;
  display: flex;
  flex-direction: column;
  background: white;
  min-width: 0; // flex 아이템이 축소될 수 있도록 함
  height: 100%; // 전체 높이 사용
  min-height: 0; // flex 축소 허용
`;
const TestListHeader = styled_components_1.default.div `
  padding: 16px 24px;
  border-bottom: 1px solid #e2e8f0;
  background: #f8fafc;
  
  @media (max-width: 1440px) {
    padding: 14px 20px;
  }
  
  @media (max-width: 1280px) {
    padding: 12px 16px;
  }
  
  @media (max-width: 768px) {
    padding: 10px 12px;
  }
`;
const TestListTitle = styled_components_1.default.h3 `
  margin: 0;
  font-size: 16px;
  font-weight: 600;
  color: #1e293b;
`;
const TestTable = styled_components_1.default.div `
  flex: 1;
  overflow-y: auto;
  min-height: 0; // flex 아이템이 축소될 수 있도록 함
  height: 100%; // 전체 높이 사용
`;
const TableHeader = styled_components_1.default.div `
  display: grid;
  grid-template-columns: 40px 80px 80px 1fr 120px 120px 100px 120px 120px;
  gap: 16px;
  padding: 12px 24px;
  background: #f8fafc;
  border-bottom: 1px solid #e2e8f0;
  font-size: 12px;
  font-weight: 600;
  color: #64748b;
  position: sticky;
  top: 0;
  z-index: 10;
  
  @media (max-width: 1440px) {
    grid-template-columns: 40px 70px 70px 1fr 100px 100px 90px 100px 90px;
    gap: 12px;
    padding: 10px 20px;
    font-size: 11px;
  }
  
  @media (max-width: 1280px) {
    grid-template-columns: 35px 60px 60px 1fr 90px 90px 80px 90px 80px;
    gap: 10px;
    padding: 8px 16px;
    font-size: 11px;
  }
  
  @media (max-width: 1024px) {
    grid-template-columns: 30px 50px 50px 1fr 80px 80px 70px;
    gap: 8px;
    padding: 8px 12px;
    font-size: 10px;
  }
  
  @media (max-width: 768px) {
    display: none; // 모바일에서는 카드 형태로 변경
  }
`;
const TableRow = styled_components_1.default.div `
  display: grid;
  grid-template-columns: 40px 80px 80px 1fr 120px 120px 100px 120px 120px;
  gap: 16px;
  padding: 12px 24px;
  border-bottom: 1px solid #f1f5f9;
  cursor: pointer;
  transition: all 0.2s;
  position: relative;
  
  /* 실행되지 않은 케이스 - 흐릿하게 표시 */
  opacity: ${props => {
    const isExecuted = props.status && props.status !== 'Not Run' && props.status !== 'Inactive';
    return isExecuted ? 1 : 0.6;
}};
  
  /* 실행 상태에 따른 배경색 */
  background: ${props => {
    if (props.isSelected)
        return '#eff6ff';
    const isExecuted = props.status && props.status !== 'Not Run' && props.status !== 'Inactive';
    if (!isExecuted)
        return '#fafafa'; // 실행되지 않은 케이스는 회색 배경
    switch (props.status) {
        case 'Pass': return '#f0fdf4';
        case 'Fail': return '#fef2f2';
        case 'Block': return '#fffbeb';
        case 'Skip': return '#faf5ff';
        default: return '#ffffff';
    }
}};
  
  /* 실행된 케이스는 좌측에 상태 표시 바 */
  &::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 4px;
    background: ${props => {
    if (props.isSelected)
        return '#3b82f6';
    const isExecuted = props.status && props.status !== 'Not Run' && props.status !== 'Inactive';
    if (!isExecuted)
        return 'transparent';
    switch (props.status) {
        case 'Pass': return '#10b981';
        case 'Fail': return '#ef4444';
        case 'Block': return '#f59e0b';
        case 'Skip': return '#8b5cf6';
        default: return 'transparent';
    }
}};
  }
  
  /* 실행되지 않은 케이스에 점선 테두리 */
  border: ${props => {
    const isExecuted = props.status && props.status !== 'Not Run' && props.status !== 'Inactive';
    return isExecuted ? 'none' : '1px dashed #d1d5db';
}};
  
  &:hover {
    opacity: 1;
    background: ${props => {
    if (props.isSelected)
        return '#dbeafe';
    const isExecuted = props.status && props.status !== 'Not Run' && props.status !== 'Inactive';
    if (!isExecuted)
        return '#f3f4f6';
    switch (props.status) {
        case 'Pass': return '#ecfdf5';
        case 'Fail': return '#fef2f2';
        case 'Block': return '#fefce8';
        case 'Skip': return '#f5f3ff';
        default: return '#f8fafc';
    }
}};
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
  
  @media (max-width: 1440px) {
    grid-template-columns: 40px 70px 70px 1fr 100px 100px 90px 100px 90px;
    gap: 12px;
    padding: 10px 20px;
  }
  
  @media (max-width: 1280px) {
    grid-template-columns: 35px 60px 60px 1fr 90px 90px 80px 90px 80px;
    gap: 10px;
    padding: 8px 16px;
  }
  
  @media (max-width: 1024px) {
    grid-template-columns: 30px 50px 50px 1fr 80px 80px 70px;
    gap: 8px;
    padding: 8px 12px;
  }
  
  @media (max-width: 768px) {
    display: block; // 카드 형태로 변경
    padding: 16px;
    margin-bottom: 8px;
    border-radius: 8px;
    border: 1px solid #e2e8f0;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }
`;
const TableCell = styled_components_1.default.div `
  display: flex;
  align-items: center;
  font-size: 14px;
  color: #1e293b;
`;
const StatusBadge = styled_components_1.default.span `
  display: inline-flex;
  align-items: center;
  gap: 6px;
  padding: 6px 12px;
  border-radius: 16px;
  font-size: 12px;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  border: 2px solid transparent;
  min-width: 80px;
  justify-content: center;
  
  background: ${props => {
    switch (props.status) {
        case 'Not Run': return '#f8fafc';
        case 'Pass': return '#dcfce7';
        case 'Fail': return '#fee2e2';
        case 'Block': return '#fef3c7';
        case 'Skip': return '#f3e8ff';
        default: return '#f8fafc';
    }
}};
  
  border-color: ${props => {
    switch (props.status) {
        case 'Not Run': return '#e2e8f0';
        case 'Pass': return '#10b981';
        case 'Fail': return '#ef4444';
        case 'Block': return '#f59e0b';
        case 'Skip': return '#8b5cf6';
        default: return '#e2e8f0';
    }
}};
  
  color: ${props => {
    switch (props.status) {
        case 'Not Run': return '#64748b';
        case 'Pass': return '#065f46';
        case 'Fail': return '#dc2626';
        case 'Block': return '#92400e';
        case 'Skip': return '#6b21a8';
        default: return '#64748b';
    }
}};
  
  &::before {
    content: '';
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: ${props => {
    switch (props.status) {
        case 'Not Run': return '#94a3b8';
        case 'Pass': return '#10b981';
        case 'Fail': return '#ef4444';
        case 'Block': return '#f59e0b';
        case 'Skip': return '#8b5cf6';
        default: return '#94a3b8';
    }
}};
  }
`;
const PriorityBadge = styled_components_1.default.span `
  padding: 4px 8px;
  border-radius: 12px;
  font-size: 12px;
  font-weight: 500;
  
  background: ${props => {
    switch (props.priority) {
        case 'P0': return '#fee2e2';
        case 'P1': return '#fef3c7';
        case 'P2': return '#dbeafe';
        case 'P3': return '#f3f4f6';
        default: return '#f3f4f6';
    }
}};
  
  color: ${props => {
    switch (props.priority) {
        case 'P0': return '#dc2626';
        case 'P1': return '#d97706';
        case 'P2': return '#2563eb';
        case 'P3': return '#6b7280';
        default: return '#6b7280';
    }
}};
`;
// 드롭다운 컨테이너
const StatusDropdownContainer = styled_components_1.default.div `
  position: relative;
  display: inline-block;
  z-index: 999999; /* 최상단 z-index */
`;
// 드롭다운 버튼
const StatusDropdownButton = styled_components_1.default.button `
  display: inline-flex;
  align-items: center;
  gap: 8px;
  padding: 8px 12px;
  border: 1px solid;
  border-radius: 6px;
  font-size: 13px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
  min-width: 110px;
  justify-content: space-between;
  
  /* 상태별 스타일 */
  background: ${props => {
    switch (props.status) {
        case 'Pass': return '#f0fdf4';
        case 'Fail': return '#fef2f2';
        case 'Block': return '#fffbeb';
        case 'Skip': return '#faf5ff';
        case 'Not Run':
        case 'Inactive':
        default: return 'white';
    }
}};
  
  border-color: ${props => {
    if (props.isOpen)
        return '#3b82f6';
    switch (props.status) {
        case 'Pass': return '#10b981';
        case 'Fail': return '#ef4444';
        case 'Block': return '#f59e0b';
        case 'Skip': return '#8b5cf6';
        case 'Not Run':
        case 'Inactive':
        default: return '#d1d5db';
    }
}};
  
  color: ${props => {
    switch (props.status) {
        case 'Pass': return '#065f46';
        case 'Fail': return '#dc2626';
        case 'Block': return '#92400e';
        case 'Skip': return '#6b21a8';
        case 'Not Run':
        case 'Inactive':
        default: return '#374151';
    }
}};
  
  &:hover {
    border-color: #3b82f6;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }
  
  ${props => props.isOpen && `
    border-color: #3b82f6 !important;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  `}
`;
// 상태 표시 점
const StatusDot = styled_components_1.default.span `
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background: ${props => {
    switch (props.status) {
        case 'Pass': return '#10b981';
        case 'Fail': return '#ef4444';
        case 'Block': return '#f59e0b';
        case 'Skip': return '#8b5cf6';
        case 'Not Run':
        case 'Inactive':
        default: return '#94a3b8';
    }
}};
`;
// 상태 텍스트
const StatusText = styled_components_1.default.span `
  flex: 1;
  text-align: left;
`;
// 드롭다운 화살표
const DropdownArrow = styled_components_1.default.span `
  font-size: 12px;
  transition: transform 0.2s;
  transform: ${props => props.isOpen ? 'rotate(180deg)' : 'rotate(0deg)'};
`;
// 상태 표시 정보 함수
const getStatusDisplay = (status) => {
    switch (status) {
        case 'Pass': return { text: 'Pass', color: '#10b981' };
        case 'Fail': return { text: 'Fail', color: '#ef4444' };
        case 'Block': return { text: 'Block', color: '#f59e0b' };
        case 'Skip': return { text: 'Skip', color: '#8b5cf6' };
        case 'Not Run': return { text: 'Not Run', color: '#94a3b8' };
        case 'Inactive': return { text: 'Inactive', color: '#6b7280' };
        case 'Untested': return { text: 'Untested', color: '#9ca3af' };
        case '':
        case null:
        case undefined:
        default: return { text: 'Not Run', color: '#94a3b8' };
    }
};
// Portal용 드롭다운 메뉴 - 절대 위치로 렌더링
const PortalDropdownMenu = styled_components_1.default.div `
  position: fixed;
  top: ${props => props.rect.bottom + 4}px;
  left: ${props => props.rect.left}px;
  width: ${props => props.rect.width}px;
  z-index: 99999999; /* 최상단 z-index */
  min-width: 140px;
  background: white;
  border: 1px solid #d1d5db;
  border-radius: 8px;
  box-shadow: 
    0 20px 25px -5px rgba(0, 0, 0, 0.1), 
    0 10px 10px -5px rgba(0, 0, 0, 0.04),
    0 0 0 1px rgba(0, 0, 0, 0.05);
  overflow: hidden;
  
  display: ${props => props.isOpen ? 'block' : 'none'};
  opacity: ${props => props.isOpen ? '1' : '0'};
  transform: ${props => props.isOpen ? 'translateY(0) scale(1)' : 'translateY(-10px) scale(0.95)'};
  transition: all 0.15s ease-out;
  transform-origin: top center;
`;
// 기존 드롭다운 메뉴 (Portal 사용하지 않을 때)
const StatusDropdownMenu = styled_components_1.default.div `
  position: absolute;
  top: calc(100% + 4px);
  left: 0;
  right: 0;
  z-index: 9999999; /* 최상단 z-index */
  min-width: 140px;
  background: white;
  border: 1px solid #d1d5db;
  border-radius: 8px;
  box-shadow: 
    0 20px 25px -5px rgba(0, 0, 0, 0.1), 
    0 10px 10px -5px rgba(0, 0, 0, 0.04),
    0 0 0 1px rgba(0, 0, 0, 0.05);
  overflow: hidden;
  
  display: ${props => props.isOpen ? 'block' : 'none'};
  opacity: ${props => props.isOpen ? '1' : '0'};
  transform: ${props => props.isOpen ? 'translateY(0) scale(1)' : 'translateY(-10px) scale(0.95)'};
  transition: all 0.15s ease-out;
  transform-origin: top center;
`;
// 드롭다운 아이템
const StatusDropdownItem = styled_components_1.default.button `
  display: flex;
  align-items: center;
  gap: 8px;
  width: 100%;
  padding: 10px 12px;
  border: none;
  background: ${props => props.isSelected ?
    (() => {
        switch (props.status) {
            case 'Pass': return '#f0fdf4';
            case 'Fail': return '#fef2f2';
            case 'Block': return '#fffbeb';
            case 'Skip': return '#faf5ff';
            default: return '#f8fafc';
        }
    })() : 'white'};
  color: #374151;
  font-size: 14px;
  font-weight: ${props => props.isSelected ? '600' : '500'};
  cursor: pointer;
  transition: background 0.2s;
  text-align: left;
  position: relative;
  z-index: 9999999; /* 최상단 z-index */
  
  /* 선택된 항목 표시 */
  ${props => props.isSelected && `
    &::after {
      content: '✓';
      position: absolute;
      right: 12px;
      color: ${(() => {
    switch (props.status) {
        case 'Pass': return '#10b981';
        case 'Fail': return '#ef4444';
        case 'Block': return '#f59e0b';
        case 'Skip': return '#8b5cf6';
        default: return '#94a3b8';
    }
})()};
      font-weight: bold;
      font-size: 16px;
    }
  `}
  
  &:hover {
    background: ${props => {
    switch (props.status) {
        case 'Pass': return '#f0fdf4';
        case 'Fail': return '#fef2f2';
        case 'Block': return '#fffbeb';
        case 'Skip': return '#faf5ff';
        default: return '#f8fafc';
    }
}};
  }
  
  &::before {
    content: '';
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: ${props => {
    switch (props.status) {
        case 'Pass': return '#10b981';
        case 'Fail': return '#ef4444';
        case 'Block': return '#f59e0b';
        case 'Skip': return '#8b5cf6';
        default: return '#94a3b8';
    }
}};
  }
`;
// 우측 상세 패널
const DetailPanel = styled_components_1.default.div `
  width: ${props => props.isOpen ? `${props.width}px` : '0'};
  background: white;
  border-left: 1px solid #e2e8f0;
  overflow: hidden;
  transition: width 0.3s ease;
  position: relative;
  height: 100%;
  display: flex;
  flex-direction: column;
  
  @media (max-width: 1440px) {
    width: ${props => props.isOpen ? `${Math.min(props.width, 320)}px` : '0'};
  }
  
  @media (max-width: 1280px) {
    width: ${props => props.isOpen ? `${Math.min(props.width, 280)}px` : '0'};
  }
  
  @media (max-width: 1024px) {
    width: ${props => props.isOpen ? `${Math.min(props.width, 250)}px` : '0'};
  }
  
  @media (max-width: 768px) {
    width: ${props => props.isOpen ? '100%' : '0'};
    position: absolute;
    top: 0;
    right: 0;
    z-index: 1000;
    box-shadow: -4px 0 12px rgba(0, 0, 0, 0.1);
  }
`;
const ResizeHandle = styled_components_1.default.div `
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  width: 4px;
  background: transparent;
  cursor: col-resize;
  z-index: 10;
  
  &:hover {
    background: #3b82f6;
  }
  
  &:active {
    background: #2563eb;
  }
`;
const DetailHeader = styled_components_1.default.div `
  padding: 16px 20px;
  border-bottom: 1px solid #e5e7eb;
  background: #f9fafb;
  display: flex;
  justify-content: space-between;
  align-items: center;
  height: 56px;
  min-height: 56px;
  flex-shrink: 0;
`;
const DetailHeaderTitle = styled_components_1.default.h3 `
  margin: 0;
  font-size: 16px;
  font-weight: 600;
  color: #111827;
`;
const CloseButton = styled_components_1.default.button `
  background: none;
  border: none;
  font-size: 18px;
  cursor: pointer;
  color: #6b7280;
  padding: 4px;
  border-radius: 4px;
  
  &:hover {
    background: #f3f4f6;
    color: #374151;
  }
`;
const DetailContent = styled_components_1.default.div `
  flex: 1;
  padding: 24px;
  overflow-y: auto;
  overflow-x: hidden;
  height: 0;
  min-height: 0;
`;
// 심플한 오버뷰 스타일드 컴포넌트들
const SimpleHeader = styled_components_1.default.div `
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 20px;
  padding-bottom: 12px;
  border-bottom: 1px solid #e5e7eb;
`;
const SimpleTitle = styled_components_1.default.h2 `
  margin: 0;
  font-size: 18px;
  font-weight: 600;
  color: #1e293b;
  line-height: 1.4;
  flex: 1;
`;
const SimpleStatus = styled_components_1.default.span `
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 12px;
  font-weight: 500;
  margin-left: 12px;
  
  background: ${props => {
    switch (props.status) {
        case 'Pass': return '#dcfce7';
        case 'Fail': return '#fee2e2';
        case 'Block': return '#fef3c7';
        case 'Skip': return '#f3e8ff';
        case 'Active': return '#dbeafe';
        case 'Inactive': return '#f1f5f9';
        default: return '#f1f5f9';
    }
}};
  
  color: ${props => {
    switch (props.status) {
        case 'Pass': return '#166534';
        case 'Fail': return '#dc2626';
        case 'Block': return '#d97706';
        case 'Skip': return '#7c3aed';
        case 'Active': return '#2563eb';
        case 'Inactive': return '#64748b';
        default: return '#64748b';
    }
}};
`;
const SimpleInfo = styled_components_1.default.div `
  display: flex;
  gap: 20px;
  margin-bottom: 20px;
  padding: 12px;
  background: #f9fafb;
  border-radius: 6px;
`;
const SimpleInfoItem = styled_components_1.default.div `
  display: flex;
  align-items: center;
  gap: 4px;
`;
const SimpleLabel = styled_components_1.default.span `
  font-size: 13px;
  font-weight: 500;
  color: #64748b;
`;
const SimpleValue = styled_components_1.default.span `
  font-size: 13px;
  font-weight: 600;
  color: #1e293b;
  
  ${props => props.priority && `
    color: ${props.priority === 'High' ? '#dc2626' :
    props.priority === 'Medium' ? '#d97706' :
        props.priority === 'Low' ? '#059669' : '#1e293b'};
  `}
`;
const SimpleSection = styled_components_1.default.div `
  margin-bottom: 16px;
`;
const SimpleText = styled_components_1.default.div `
  font-size: 14px;
  line-height: 1.5;
  color: #4b5563;
  margin-top: 4px;
  padding: 8px 0;
`;
const SimpleSteps = styled_components_1.default.div `
  margin-top: 4px;
`;
const SimpleStep = styled_components_1.default.div `
  display: flex;
  gap: 8px;
  margin-bottom: 8px;
  padding: 4px 0;
`;
const SimpleStepNumber = styled_components_1.default.span `
  font-size: 13px;
  font-weight: 600;
  color: #3b82f6;
  min-width: 20px;
`;
const SimpleStepText = styled_components_1.default.span `
  font-size: 14px;
  line-height: 1.4;
  color: #4b5563;
`;
const DetailSection = styled_components_1.default.div `
  margin-bottom: 24px;
`;
const DetailTitle = styled_components_1.default.h4 `
  margin: 0 0 12px 0;
  font-size: 14px;
  font-weight: 600;
  color: #1e293b;
`;
const DetailText = styled_components_1.default.p `
  margin: 0 0 8px 0;
  font-size: 14px;
  color: #374151;
  line-height: 1.5;
`;
const StatusChangeForm = styled_components_1.default.div `
  margin-top: 16px;
`;
const StatusRadioGroup = styled_components_1.default.div `
  display: flex;
  flex-direction: column;
  gap: 8px;
  margin-bottom: 16px;
`;
const StatusRadio = styled_components_1.default.label `
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 8px 12px;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  cursor: pointer;
  transition: all 0.2s;
  
  &:hover {
    background: #f8fafc;
  }
  
  input[type="radio"]:checked + & {
    background: #eff6ff;
    border-color: #3b82f6;
  }
`;
const CommentTextarea = styled_components_1.default.textarea `
  width: 100%;
  padding: 12px;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  font-size: 14px;
  resize: vertical;
  min-height: 80px;
  
  &:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }
`;
const SaveButton = styled_components_1.default.button `
  width: 100%;
  padding: 12px;
  background: #3b82f6;
  color: white;
  border: none;
  border-radius: 6px;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: background 0.2s;
  
  &:hover {
    background: #2563eb;
  }
`;
const HistoryList = styled_components_1.default.div `
  max-height: 200px;
  overflow-y: auto;
`;
const HistoryItem = styled_components_1.default.div `
  padding: 8px 0;
  border-bottom: 1px solid #f1f5f9;
  
  &:last-child {
    border-bottom: none;
  }
`;
const HistoryMeta = styled_components_1.default.div `
  display: flex;
  justify-content: space-between;
  font-size: 12px;
  color: #64748b;
  margin-bottom: 4px;
`;
const HistoryChange = styled_components_1.default.div `
  font-size: 14px;
  color: #1e293b;
`;
const ExecutionView = ({ release, testCases = [], onTestCaseUpdate, onBulkUpdate, onAddTestCases, onTestCasesLoad }) => {
    const [selectedTestCase, setSelectedTestCase] = (0, react_1.useState)(null);
    const [selectedTestCases, setSelectedTestCases] = (0, react_1.useState)([]);
    const [filters, setFilters] = (0, react_1.useState)({
        status: '',
        priority: '',
        suite: '',
        assignee: '',
        search: ''
    });
    const [isLive, setIsLive] = (0, react_1.useState)(true);
    const [openDropdowns, setOpenDropdowns] = (0, react_1.useState)({});
    const [dropdownPositions, setDropdownPositions] = (0, react_1.useState)({});
    const [dropdownRects, setDropdownRects] = (0, react_1.useState)({});
    const [currentComment, setCurrentComment] = (0, react_1.useState)('');
    const [localTestCases, setLocalTestCases] = (0, react_1.useState)([]);
    // 폴더 가져오기 관련 상태
    const [showTestCaseModal, setShowTestCaseModal] = (0, react_1.useState)(false);
    const [selectedTestCasesToAdd, setSelectedTestCasesToAdd] = (0, react_1.useState)([]);
    const [isLoadingTestCases, setIsLoadingTestCases] = (0, react_1.useState)(false);
    const [isCollapsed, setIsCollapsed] = (0, react_1.useState)(false);
    const [selectedImportedFolder, setSelectedImportedFolder] = (0, react_1.useState)(null);
    const [folderTestCases, setFolderTestCases] = (0, react_1.useState)([]);
    const [importedFolders, setImportedFolders] = (0, react_1.useState)([]);
    const [detailPanelWidth, setDetailPanelWidth] = (0, react_1.useState)(350); // 400 → 350으로 축소
    const [isResizing, setIsResizing] = (0, react_1.useState)(false);
    const [leftPanelWidth, setLeftPanelWidth] = (0, react_1.useState)(240); // 280 → 240으로 축소
    const [isLeftPanelResizing, setIsLeftPanelResizing] = (0, react_1.useState)(false);
    // API 호출 - 자동으로 테스트케이스 조회
    const { data: apiTestCasesResponse = [], isLoading, error, refetch } = (0, api_1.useGetReleaseTestCasesQuery)(release.id, {
        pollingInterval: 5000, // 5초마다 자동 갱신
    });
    // API 응답 디버깅
    console.log('=== API 응답 디버깅 ===');
    console.log('Release ID:', release.id);
    console.log('API 데이터:', apiTestCasesResponse);
    console.log('API 로딩 상태:', isLoading);
    console.log('API 에러:', error);
    console.log('API 데이터 타입:', typeof apiTestCasesResponse);
    console.log('API 데이터 배열 여부:', Array.isArray(apiTestCasesResponse));
    console.log('API 데이터 배열 여부:', Array.isArray(apiTestCasesResponse));
    if (Array.isArray(apiTestCasesResponse)) {
        console.log('API 데이터 길이:', apiTestCasesResponse.length);
        console.log('첫 번째 아이템:', apiTestCasesResponse[0]);
    }
    const [updateExecutionStats] = (0, api_1.useUpdateReleaseExecutionStatsMutation)();
    // 실행 통계 데이터 가져오기 - 실시간 업데이트
    const { data: executionStats, isLoading: statsLoading, error: statsError, refetch: refetchStats } = (0, api_1.useGetReleaseExecutionStatsQuery)(release.id, {
        pollingInterval: 5000, // 5초마다 자동 갱신
    });
    // 폴더 데이터 가져오기
    const { data: folders = [] } = (0, api_1.useGetTestFoldersQuery)();
    // 가져온 폴더 데이터 가져오기 (DB에서)
    const { data: dbImportedFolders = [], refetch: refetchImportedFolders } = (0, api_1.useGetImportedFoldersQuery)(release.id);
    const [addImportedFolders] = (0, api_1.useAddImportedFoldersMutation)();
    const [removeImportedFolder] = (0, api_1.useRemoveImportedFolderMutation)();
    (0, react_1.useEffect)(() => {
        if (Array.isArray(dbImportedFolders)) {
            setImportedFolders(dbImportedFolders.map(folder => ({
                id: folder.folderId,
                name: folder.name,
                parentId: folder.parentId,
                testCaseCount: folder.testCaseCount,
                children: []
            })));
        }
        else {
            setImportedFolders([]);
        }
    }, [dbImportedFolders]);
    (0, react_1.useEffect)(() => {
        const totalTestCasesFromFolders = importedFolders.reduce((total, folder) => {
            return total + (folder.testCaseCount || 0);
        }, 0);
        const currentPlannedCount = executionStats?.data?.planned || 0;
        // 가져온 폴더가 있는 경우에만 업데이트
        if (totalTestCasesFromFolders !== currentPlannedCount) {
            console.log(`plannedCount 업데이트: ${currentPlannedCount} -> ${totalTestCasesFromFolders}`);
            updateExecutionStats({
                releaseId: release.id,
                plannedCount: totalTestCasesFromFolders
            }).then(() => {
                console.log('plannedCount 업데이트 완료');
                refetchStats();
            }).catch(error => {
                console.error('plannedCount 업데이트 실패:', error);
            });
        }
    }, [importedFolders, executionStats, release.id, updateExecutionStats, refetchStats]);
    // 우측 패널 크기 조절 이벤트 핸들러
    const handleDetailPanelResizeStart = (e) => {
        e.preventDefault();
        setIsResizing(true);
    };
    const handleDetailPanelResizeMove = (0, react_1.useCallback)((e) => {
        if (!isResizing)
            return;
        const container = document.querySelector('.execution-container');
        if (!container)
            return;
        const containerRect = container.getBoundingClientRect();
        const newWidth = containerRect.right - e.clientX;
        // 최소/최대 너비 제한
        if (newWidth >= 300 && newWidth <= 800) {
            setDetailPanelWidth(newWidth);
        }
    }, [isResizing]);
    const handleDetailPanelResizeEnd = (0, react_1.useCallback)(() => {
        setIsResizing(false);
    }, []);
    // 좌측 패널 크기 조절 이벤트 핸들러
    const handleLeftPanelResizeStart = (e) => {
        e.preventDefault();
        setIsLeftPanelResizing(true);
    };
    const handleLeftPanelResizeMove = (0, react_1.useCallback)((e) => {
        if (!isLeftPanelResizing)
            return;
        const container = document.querySelector('.execution-container');
        if (!container)
            return;
        const containerRect = container.getBoundingClientRect();
        const newWidth = e.clientX - containerRect.left;
        // 최소 200px, 최대 500px로 제한
        const clampedWidth = Math.max(200, Math.min(500, newWidth));
        setLeftPanelWidth(clampedWidth);
    }, [isLeftPanelResizing]);
    const handleLeftPanelResizeEnd = (0, react_1.useCallback)(() => {
        setIsLeftPanelResizing(false);
    }, []);
    (0, react_1.useEffect)(() => {
        if (isResizing) {
            document.addEventListener('mousemove', handleDetailPanelResizeMove);
            document.addEventListener('mouseup', handleDetailPanelResizeEnd);
            return () => {
                document.removeEventListener('mousemove', handleDetailPanelResizeMove);
                document.removeEventListener('mouseup', handleDetailPanelResizeEnd);
            };
        }
    }, [isResizing, handleDetailPanelResizeMove, handleDetailPanelResizeEnd]);
    (0, react_1.useEffect)(() => {
        if (isLeftPanelResizing) {
            document.addEventListener('mousemove', handleLeftPanelResizeMove);
            document.addEventListener('mouseup', handleLeftPanelResizeEnd);
            return () => {
                document.removeEventListener('mousemove', handleLeftPanelResizeMove);
                document.removeEventListener('mouseup', handleLeftPanelResizeEnd);
            };
        }
    }, [isLeftPanelResizing, handleLeftPanelResizeMove, handleLeftPanelResizeEnd]);
    // 진행률 계산 - 실제 API 데이터 사용
    const totalTestCases = executionStats?.data?.planned || 0;
    const executedTestCases = executionStats?.data?.executed || 0;
    const passedTestCases = executionStats?.data?.passed || 0;
    const failedTestCases = executionStats?.data?.failed || 0;
    const blockedTestCases = executionStats?.data?.blocked || 0;
    const skippedTestCases = executionStats?.data?.skipped || 0;
    const notRunTestCases = totalTestCases - executedTestCases;
    const progressPercentage = executionStats?.data?.passRate || 0;
    // API에서 가져온 테스트케이스 사용 - API 응답 구조에 맞게 처리
    const apiTestCasesArray = Array.isArray(apiTestCasesResponse) ? apiTestCasesResponse : [];
    // 로컬 스토리지 키
    const LOCAL_STORAGE_KEY = `testCases_release_${release.id}`;
    // 로컬 스토리지에서 저장된 테스트케이스 불러오기
    const getStoredTestCases = () => {
        try {
            const stored = localStorage.getItem(LOCAL_STORAGE_KEY);
            return stored ? JSON.parse(stored) : null;
        }
        catch (error) {
            console.error('로컬 스토리지에서 테스트케이스 불러오기 실패:', error);
            return null;
        }
    };
    // 로컬 스토리지에 테스트케이스 저장하기
    const saveTestCasesToStorage = (testCases) => {
        try {
            localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(testCases));
            console.log('테스트케이스를 로컬 스토리지에 저장했습니다:', testCases.length, '개');
        }
        catch (error) {
            console.error('로컬 스토리지에 테스트케이스 저장 실패:', error);
        }
    };
    // 로컬 스토리지에서 저장된 테스트케이스만 사용 (더미 데이터 제거)
    const storedTestCases = getStoredTestCases();
    // 더미 데이터가 저장되어 있으면 삭제 (한 번만 실행)
    (0, react_1.useEffect)(() => {
        if (storedTestCases && storedTestCases.length > 0) {
            const isDummyData = storedTestCases.some((testCase) => testCase.id === '81' || testCase.id === '82' ||
                testCase.name === 'Test Case 1' || testCase.name === 'Test Case 2');
            if (isDummyData) {
                console.log('더미 데이터 감지, 로컬 스토리지 정리 중...');
                localStorage.removeItem(LOCAL_STORAGE_KEY);
            }
        }
    }, [LOCAL_STORAGE_KEY, storedTestCases]);
    // 더미 데이터 완전 제거 - API 데이터 또는 저장된 데이터만 사용
    const dummyTestCases = [];
    // 데이터 우선순위: 1) 부모 props, 2) 저장된 데이터, 3) API 데이터
    const allTestCases = testCases.length > 0 ? testCases : (storedTestCases && storedTestCases.length > 0 ? storedTestCases : apiTestCasesArray);
    console.log('=== 데이터 소스 확인 ===');
    console.log('Props testCases:', testCases.length);
    console.log('Stored testCases:', storedTestCases ? storedTestCases.length : 0);
    console.log('API testCases:', apiTestCasesArray.length);
    console.log('Final allTestCases:', allTestCases.length);
    // API 데이터가 변경될 때 로컬 상태 업데이트 (부모 데이터가 없을 때만)
    (0, react_1.useEffect)(() => {
        if (testCases.length === 0) {
            if (storedTestCases && storedTestCases.length > 0) {
                console.log('저장된 데이터 사용, 부모에게 전달:', storedTestCases.length, '개 테스트케이스');
                setLocalTestCases(storedTestCases);
                // 부모 컴포넌트에 저장된 데이터 전달
                if (onTestCasesLoad) {
                    onTestCasesLoad(storedTestCases);
                }
            }
            else if (apiTestCasesArray.length > 0) {
                console.log('API 데이터 업데이트, 부모에게 전달:', apiTestCasesArray.length, '개 테스트케이스');
                setLocalTestCases(apiTestCasesArray);
                // 부모 컴포넌트에 API 데이터 전달
                if (onTestCasesLoad) {
                    onTestCasesLoad(apiTestCasesArray);
                }
            }
        }
        else if (testCases.length > 0) {
            console.log('부모 props 데이터 사용:', testCases.length, '개 테스트케이스');
            setLocalTestCases(testCases);
        }
    }, [testCases, apiTestCasesArray, storedTestCases, onTestCasesLoad]);
    // 실제 렌더링에 사용할 테스트 케이스 (부모 props 우선)
    const displayTestCases = testCases.length > 0 ? testCases : (localTestCases.length > 0 ? localTestCases : allTestCases);
    // 디버깅: 렌더링할 테스트 케이스 상태 확인
    console.log('렌더링 테스트케이스:', {
        propsTestCasesCount: testCases.length,
        localTestCasesCount: localTestCases.length,
        apiTestCasesCount: apiTestCasesArray.length,
        displayTestCasesCount: displayTestCases.length,
        firstTestCaseStatus: displayTestCases[0]?.status
    });
    // 필터링된 테스트 케이스 - 로컬 상태 우선 사용
    const filteredTestCases = displayTestCases.filter((testCase) => {
        if (filters.status && testCase.status !== filters.status)
            return false;
        if (filters.priority && testCase.priority !== filters.priority)
            return false;
        if (filters.suite && testCase.suite !== filters.suite)
            return false;
        if (filters.assignee && testCase.assignee !== filters.assignee)
            return false;
        if (filters.search && !(testCase.name || testCase.title)?.toLowerCase().includes(filters.search.toLowerCase()))
            return false;
        return true;
    });
    // 테스트 케이스 선택 처리
    const handleTestCaseSelect = (0, react_1.useCallback)((testCaseId, isSelected) => {
        if (isSelected) {
            setSelectedTestCases(prev => [...prev, testCaseId]);
        }
        else {
            setSelectedTestCases(prev => prev.filter(id => id !== testCaseId));
        }
    }, []);
    // 전체 선택/해제
    const handleSelectAll = (0, react_1.useCallback)((isSelected) => {
        if (isSelected) {
            setSelectedTestCases(filteredTestCases.map((tc) => tc.id));
        }
        else {
            setSelectedTestCases([]);
        }
    }, [filteredTestCases]);
    // API 훅 추가
    const [updateTestCaseStatus] = (0, api_1.useUpdateTestCaseStatusMutation)();
    // 드롭다운 위치 계산 함수 - 임시로 항상 아래쪽으로 열리도록 설정
    const calculateDropdownPosition = (0, react_1.useCallback)((testCaseId, buttonElement) => {
        // 임시로 항상 아래쪽으로 열리도록 설정 (클릭 문제 해결을 위해)
        console.log('드롭다운 위치: 항상 아래쪽으로 열림 (임시 설정)');
        return 'bottom';
    }, []);
    // 드롭다운 토글 처리
    const toggleDropdown = (0, react_1.useCallback)((testCaseId, buttonElement) => {
        const isCurrentlyOpen = openDropdowns[testCaseId];
        if (!isCurrentlyOpen && buttonElement) {
            // 드롭다운을 열 때 위치 계산 및 저장
            const rect = buttonElement.getBoundingClientRect();
            const position = calculateDropdownPosition(testCaseId, buttonElement);
            setDropdownRects(prev => ({
                ...prev,
                [testCaseId]: rect
            }));
            setDropdownPositions(prev => ({
                ...prev,
                [testCaseId]: position
            }));
        }
        setOpenDropdowns(prev => ({
            ...prev,
            [testCaseId]: !prev[testCaseId]
        }));
    }, [openDropdowns, calculateDropdownPosition]);
    // 드롭다운 닫기
    const closeDropdown = (0, react_1.useCallback)((testCaseId) => {
        setOpenDropdowns(prev => ({
            ...prev,
            [testCaseId]: false
        }));
    }, []);
    // 간단한 상태 변경 처리
    const handleStatusChange = (0, react_1.useCallback)(async (testCaseId, newStatus) => {
        try {
            console.log('=== 간단한 상태 변경 시작 ===');
            console.log('테스트케이스 ID:', testCaseId);
            console.log('새로운 상태:', newStatus);
            console.log('현재 선택된 폴더:', selectedImportedFolder?.name);
            // 즉시 부모 컴포넌트 상태 업데이트
            onTestCaseUpdate(testCaseId, {
                status: newStatus,
                lastUpdated: new Date().toISOString()
            });
            // 선택된 테스트케이스가 변경된 경우 상태 업데이트
            if (selectedTestCase?.id === testCaseId) {
                setSelectedTestCase({
                    ...selectedTestCase,
                    status: newStatus,
                    lastUpdated: new Date().toISOString()
                });
            }
            // 폴더 선택 상태인 경우 folderTestCases도 즉시 업데이트
            if (selectedImportedFolder) {
                setFolderTestCases(prev => prev.map(tc => tc.id === testCaseId
                    ? { ...tc, status: newStatus, lastUpdated: new Date().toISOString() }
                    : tc));
                console.log('폴더 테스트케이스 상태 즉시 업데이트 완료');
            }
            // API 호출 (백그라운드)
            try {
                const result = await updateTestCaseStatus({
                    releaseId: release.id,
                    testCaseId,
                    status: newStatus,
                    comment: currentComment
                }).unwrap();
                console.log('API 호출 성공:', result);
                // 데이터 새로고침
                await refetch();
                await refetchStats();
                // 폴더 선택 상태인 경우 폴더 데이터도 새로고침하되, 로컬 상태 업데이트를 유지
                if (selectedImportedFolder) {
                    try {
                        const response = await fetch(`http://localhost:3001/api/releases/folders/${selectedImportedFolder.id}/testcases`);
                        if (response.ok) {
                            const data = await response.json();
                            const updatedFolderTestCases = data.data || [];
                            // 새로고침된 데이터에 로컬 상태 업데이트를 병합
                            const mergedTestCases = updatedFolderTestCases.map((tc) => {
                                // 현재 로컬 상태에서 해당 테스트케이스 찾기
                                const localTestCase = folderTestCases.find((localTc) => localTc.id === tc.id);
                                // 로컬 상태가 더 최신이면 로컬 상태 사용, 아니면 서버 상태 사용
                                return localTestCase && localTestCase.lastUpdated > tc.lastUpdated
                                    ? localTestCase
                                    : tc;
                            });
                            setFolderTestCases(mergedTestCases);
                            console.log('폴더 테스트케이스 새로고침 및 병합 완료:', mergedTestCases.length, '개');
                        }
                    }
                    catch (error) {
                        console.error('폴더 테스트케이스 새로고침 실패:', error);
                    }
                }
            }
            catch (apiError) {
                console.error('API 호출 실패:', apiError);
                alert(`상태 변경에 실패했습니다: ${apiError}`);
            }
            console.log('=== 상태 변경 완료 ===');
        }
        catch (error) {
            console.error('=== 상태 변경 실패 ===');
            console.error('Error details:', error);
            alert(`상태 변경에 실패했습니다: ${error}`);
        }
    }, [updateTestCaseStatus, release.id, onTestCaseUpdate, selectedTestCase, currentComment, refetch, refetchStats, selectedImportedFolder, folderTestCases]);
    // 외부 클릭 시 드롭다운 닫기
    (0, react_1.useEffect)(() => {
        const handleClickOutside = (event) => {
            const target = event.target;
            if (!target.closest('[data-dropdown]')) {
                setOpenDropdowns({});
            }
        };
        document.addEventListener('mousedown', handleClickOutside);
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, []);
    // 일괄 상태 변경
    const handleBulkStatusChange = (0, react_1.useCallback)((status) => {
        if (selectedTestCases.length === 0)
            return;
        onBulkUpdate(selectedTestCases, {
            status,
            lastUpdated: new Date().toISOString()
        });
        setSelectedTestCases([]);
    }, [selectedTestCases, onBulkUpdate]);
    // 테스트 케이스 클릭 처리
    const handleTestCaseClick = (0, react_1.useCallback)((testCase) => {
        setSelectedTestCase(testCase);
    }, []);
    const handleFetchTestCases = (0, react_1.useCallback)(() => {
        setShowTestCaseModal(true);
    }, []);
    // 선택된 폴더들의 모든 테스트케이스 추가
    const handleAddSelectedFolders = (0, react_1.useCallback)(async () => {
        if (selectedTestCasesToAdd.length === 0)
            return;
        setIsLoadingTestCases(true);
        try {
            // 선택된 폴더들을 가져온 폴더 목록에 추가 (하위 폴더 제외)
            const selectedFolderObjects = Array.isArray(folders) ? folders.filter(folder => selectedTestCasesToAdd.includes(folder.id.toString())) : [];
            // 각 폴더의 실제 테스트케이스 개수를 가져와서 업데이트
            const foldersWithRealCounts = await Promise.all(selectedFolderObjects.map(async (folder) => {
                try {
                    // 실제 API 호출로 테스트케이스 개수 가져오기
                    const response = await fetch(`http://localhost:3001/api/releases/folders/${folder.id}/testcases`);
                    if (response.ok) {
                        const data = await response.json();
                        return {
                            ...folder,
                            testCaseCount: data.data?.length || 0
                        };
                    }
                }
                catch (error) {
                    console.error(`폴더 ${folder.id} 테스트케이스 조회 실패:`, error);
                }
                return folder;
            }));
            // 중복 제거하여 가져온 폴더 목록에 추가
            const existingIds = new Set(importedFolders.map((f) => f.id));
            const newFolders = foldersWithRealCounts.filter((f) => !existingIds.has(f.id));
            // DB에 폴더 추가
            if (newFolders.length > 0) {
                const foldersToAdd = newFolders.map(folder => ({
                    folder_id: folder.id,
                    folder_name: folder.name,
                    parent_id: folder.parentId || null,
                    test_case_count: folder.testCaseCount || 0
                }));
                await addImportedFolders({
                    releaseId: release.id,
                    folders: foldersToAdd
                });
                // 로컬 상태 업데이트
                setImportedFolders(prev => [...prev, ...newFolders]);
            }
            // 선택된 모든 폴더의 테스트케이스를 실제로 가져와서 릴리즈에 추가
            const allTestCaseIds = [];
            for (const folder of selectedFolderObjects) {
                try {
                    const response = await fetch(`http://localhost:3001/api/releases/folders/${folder.id}/testcases`);
                    if (response.ok) {
                        const data = await response.json();
                        if (data.data && Array.isArray(data.data)) {
                            // 테스트케이스 ID들을 수집
                            const testCaseIds = data.data.map((tc) => tc.id);
                            allTestCaseIds.push(...testCaseIds);
                        }
                    }
                }
                catch (error) {
                    console.error(`폴더 ${folder.id} 테스트케이스 조회 실패:`, error);
                }
            }
            // 릴리즈에 테스트케이스 추가
            if (allTestCaseIds.length > 0) {
                try {
                    const addResponse = await fetch(`http://localhost:3001/api/releases/${release.id}/testcases`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            testCaseIds: allTestCaseIds
                        })
                    });
                    if (addResponse.ok) {
                        const addResult = await addResponse.json();
                        // 성공 후 모달 닫기 및 선택 초기화
                        setShowTestCaseModal(false);
                        setSelectedTestCasesToAdd([]);
                        // 데이터 새로고침
                        await refetch();
                        await refetchImportedFolders();
                    }
                    else {
                        console.error('테스트케이스 릴리즈 추가 실패:', addResponse.statusText);
                    }
                }
                catch (error) {
                    console.error('테스트케이스 릴리즈 추가 실패:', error);
                }
            }
        }
        catch (error) {
            console.error('테스트케이스 추가 실패:', error);
        }
        finally {
            setIsLoadingTestCases(false);
        }
    }, [selectedTestCasesToAdd, folders, release.id, refetch]);
    // 폴더의 모든 하위 폴더 ID를 재귀적으로 가져오기
    const getAllSubFolderIds = (0, react_1.useCallback)((folder) => {
        let ids = [folder.id];
        if (folder.children) {
            folder.children.forEach((child) => {
                ids = [...ids, ...getAllSubFolderIds(child)];
            });
        }
        return ids;
    }, []);
    // 폴더 선택 (하위 폴더 자동 선택 없음)
    const handleFolderSelection = (0, react_1.useCallback)((folder, isSelected) => {
        if (isSelected) {
            setSelectedTestCasesToAdd(prev => [...new Set([...prev, folder.id])]);
        }
        else {
            setSelectedTestCasesToAdd(prev => prev.filter(id => id !== folder.id));
        }
    }, []);
    // 접기/펼치기 기능
    const handleToggleCollapse = (0, react_1.useCallback)(() => {
        setIsCollapsed(prev => !prev);
    }, []);
    // 가져온 폴더 삭제
    const handleRemoveImportedFolder = (0, react_1.useCallback)(async (folderId) => {
        try {
            // 해당 폴더의 테스트케이스들을 릴리즈에서 제거
            const folder = importedFolders.find((f) => f.id === folderId);
            if (folder) {
                try {
                    // 폴더의 테스트케이스들을 가져와서 릴리즈에서 제거
                    const response = await fetch(`http://localhost:3001/api/releases/folders/${folderId}/testcases`);
                    if (response.ok) {
                        const data = await response.json();
                        if (data.data && Array.isArray(data.data)) {
                            const testCaseIds = data.data.map((tc) => tc.id);
                            // 릴리즈에서 테스트케이스 제거
                            if (testCaseIds.length > 0) {
                                await fetch(`http://localhost:3001/api/releases/${release.id}/testcases`, {
                                    method: 'DELETE',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify({
                                        testCaseIds: testCaseIds
                                    })
                                });
                            }
                        }
                    }
                }
                catch (error) {
                    console.error('폴더 테스트케이스 제거 실패:', error);
                }
            }
            // DB에서 폴더 제거
            await removeImportedFolder({
                releaseId: release.id,
                folderId: folderId
            });
            // 로컬 상태 업데이트
            setImportedFolders(prev => {
                const updatedFolders = prev.filter((f) => f.id !== folderId);
                // plannedCount 즉시 업데이트
                const totalTestCasesFromFolders = updatedFolders.reduce((total, folder) => {
                    return total + (folder.testCaseCount || 0);
                }, 0);
                // 실행 통계 업데이트 (비동기)
                updateExecutionStats({
                    releaseId: release.id,
                    plannedCount: totalTestCasesFromFolders
                }).then(() => {
                    // 통계 업데이트 후 즉시 새로고침
                    refetchStats();
                }).catch(error => {
                    console.error('실행 통계 업데이트 실패:', error);
                });
                return updatedFolders;
            });
            // 삭제된 폴더가 현재 선택된 폴더였다면 선택 해제
            if (selectedImportedFolder?.id === folderId) {
                setSelectedImportedFolder(null);
                setFolderTestCases([]);
            }
        }
        catch (error) {
            console.error('폴더 제거 실패:', error);
        }
    }, [selectedImportedFolder, removeImportedFolder, release.id, importedFolders, updateExecutionStats, refetchStats]);
    // 가져온 폴더 클릭 처리
    const handleImportedFolderClick = (0, react_1.useCallback)(async (folder) => {
        setSelectedImportedFolder(folder);
        try {
            // 해당 폴더의 테스트 케이스 가져오기
            const response = await fetch(`http://localhost:3001/api/releases/folders/${folder.id}/testcases`);
            if (response.ok) {
                const data = await response.json();
                const testCases = data.data || [];
                setFolderTestCases(testCases);
                setImportedFolders(prev => prev.map(f => f.id === folder.id ? { ...f, testCaseCount: testCases.length } : f));
            }
            else {
                console.error('폴더 테스트 케이스 조회 실패:', response.statusText);
                setFolderTestCases([]);
            }
        }
        catch (error) {
            console.error('폴더 테스트 케이스 조회 실패:', error);
            setFolderTestCases([]);
        }
    }, []);
    // 폴더 배열을 트리 구조로 변환하는 함수
    const buildFolderTree = (0, react_1.useCallback)((folders) => {
        const folderMap = new Map();
        const rootFolders = [];
        // 모든 폴더를 Map에 저장
        folders.forEach(folder => {
            folderMap.set(folder.id, { ...folder, children: [] });
        });
        // 부모-자식 관계 설정
        folders.forEach(folder => {
            const folderNode = folderMap.get(folder.id);
            if (folder.parentId === null) {
                // 루트 폴더
                rootFolders.push(folderNode);
            }
            else {
                // 하위 폴더
                const parentNode = folderMap.get(folder.parentId);
                if (parentNode) {
                    parentNode.children.push(folderNode);
                }
            }
        });
        return rootFolders;
    }, []);
    // 폴더 트리 렌더링 컴포넌트 (모달용)
    const renderFolderTree = (0, react_1.useCallback)((folders, level = 0) => {
        if (!Array.isArray(folders)) {
            console.warn('folders is not an array:', folders);
            return null;
        }
        return folders.map((folder) => ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsxs)(ImportFolderItem, { level: level, "$isSelected": selectedTestCasesToAdd.includes(folder.id), onClick: () => handleFolderSelection(folder, !selectedTestCasesToAdd.includes(folder.id)), children: [(0, jsx_runtime_1.jsx)(ImportFolderCheckbox, { type: "checkbox", checked: selectedTestCasesToAdd.includes(folder.id), onChange: (e) => handleFolderSelection(folder, e.target.checked), onClick: (e) => e.stopPropagation() }), (0, jsx_runtime_1.jsx)(ImportFolderIcon, {}), (0, jsx_runtime_1.jsxs)(ImportTextContainer, { children: [(0, jsx_runtime_1.jsx)(ImportFolderName, { children: folder.name }), (0, jsx_runtime_1.jsxs)(ImportTestCaseCount, { children: ["(", folder.testCaseCount, "\uAC1C)"] })] })] }), folder.children && folder.children.length > 0 && ((0, jsx_runtime_1.jsx)(ImportFolderChildren, { children: renderFolderTree(folder.children, level + 1) }))] }, folder.id)));
    }, [selectedTestCasesToAdd, handleFolderSelection]);
    // 가져온 폴더 트리 렌더링 컴포넌트 (좌측 패널용)
    const renderImportedFolderTree = (0, react_1.useCallback)((folders, level = 0) => {
        if (!Array.isArray(folders)) {
            console.warn('folders is not an array:', folders);
            return null;
        }
        return folders.map((folder) => ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsxs)(ImportFolderItem, { level: level, "$isSelected": selectedImportedFolder?.id === folder.id, onClick: () => handleImportedFolderClick(folder), children: [(0, jsx_runtime_1.jsx)(ImportFolderIcon, {}), (0, jsx_runtime_1.jsxs)(ImportTextContainer, { children: [(0, jsx_runtime_1.jsx)(ImportFolderName, { children: folder.name }), (0, jsx_runtime_1.jsxs)(ImportTestCaseCount, { children: ["(", folder.testCaseCount, "\uAC1C)"] })] }), (0, jsx_runtime_1.jsx)(ImportRemoveButton, { onClick: (e) => {
                                e.stopPropagation();
                                handleRemoveImportedFolder(folder.id);
                            }, children: "\u00D7" })] }), folder.children && folder.children.length > 0 && ((0, jsx_runtime_1.jsx)(ImportFolderChildren, { children: renderImportedFolderTree(folder.children, level + 1) }))] }, folder.id)));
    }, [handleRemoveImportedFolder, handleImportedFolderClick, selectedImportedFolder]);
    return ((0, jsx_runtime_1.jsxs)(ExecutionContainer, { className: "execution-container", children: [(0, jsx_runtime_1.jsxs)(TopContextBar, { isCollapsed: isCollapsed, children: [(0, jsx_runtime_1.jsxs)(ReleaseMeta, { isCollapsed: isCollapsed, children: [(0, jsx_runtime_1.jsx)(ReleaseLeft, { children: (0, jsx_runtime_1.jsxs)(ReleaseInfo, { isCollapsed: isCollapsed, children: [(0, jsx_runtime_1.jsxs)(ReleaseNameContainer, { children: [(0, jsx_runtime_1.jsx)(ReleaseName, { isCollapsed: isCollapsed, children: release.name }), (0, jsx_runtime_1.jsxs)(LiveIndicator, { "$isLive": isLive, children: [(0, jsx_runtime_1.jsx)(LiveDot, { "$isLive": isLive }), isLive ? 'LIVE' : 'OFFLINE'] })] }), (0, jsx_runtime_1.jsxs)(ReleaseDetails, { isCollapsed: isCollapsed, children: [(0, jsx_runtime_1.jsxs)(ReleaseDetailItem, { children: ["v", release.version] }), release.sprint && (0, jsx_runtime_1.jsxs)(ReleaseDetailItem, { children: ["Sprint ", release.sprint] }), release.period && (0, jsx_runtime_1.jsx)(ReleaseDetailItem, { children: release.period }), (0, jsx_runtime_1.jsx)(ReleaseDetailItem, { children: release.owner }), (0, jsx_runtime_1.jsx)(ReleaseDetailItem, { children: new Date(release.createdAt).toLocaleDateString('ko-KR') })] })] }) }), (0, jsx_runtime_1.jsxs)(ReleaseRight, { children: [(0, jsx_runtime_1.jsx)(ActionButton, { onClick: handleFetchTestCases, disabled: isLoadingTestCases, children: isLoadingTestCases ? '가져오는 중...' : '테스트케이스 가져오기' }), (0, jsx_runtime_1.jsx)(CollapseButton, { isCollapsed: isCollapsed, onClick: handleToggleCollapse, children: isCollapsed ? '펼치기' : '접기' })] })] }), (0, jsx_runtime_1.jsxs)(ProgressSummary, { isCollapsed: isCollapsed, children: [(0, jsx_runtime_1.jsxs)(ProgressItem, { children: [(0, jsx_runtime_1.jsx)(ProgressNumber, { color: "#3b82f6", children: totalTestCases }), (0, jsx_runtime_1.jsx)(ProgressLabel, { color: "#3b82f6", children: "PLANNED" })] }), (0, jsx_runtime_1.jsxs)(ProgressItem, { children: [(0, jsx_runtime_1.jsx)(ProgressNumber, { color: "#8b5cf6", children: executedTestCases }), (0, jsx_runtime_1.jsx)(ProgressLabel, { color: "#8b5cf6", children: "EXECUTED" })] }), (0, jsx_runtime_1.jsxs)(ProgressItem, { children: [(0, jsx_runtime_1.jsx)(ProgressNumber, { color: "#10b981", children: passedTestCases }), (0, jsx_runtime_1.jsx)(ProgressLabel, { color: "#10b981", children: "PASS" })] }), (0, jsx_runtime_1.jsxs)(ProgressItem, { children: [(0, jsx_runtime_1.jsx)(ProgressNumber, { color: "#ef4444", children: failedTestCases }), (0, jsx_runtime_1.jsx)(ProgressLabel, { color: "#ef4444", children: "FAIL" })] }), (0, jsx_runtime_1.jsxs)(ProgressItem, { children: [(0, jsx_runtime_1.jsx)(ProgressNumber, { color: "#f59e0b", children: blockedTestCases }), (0, jsx_runtime_1.jsx)(ProgressLabel, { color: "#f59e0b", children: "BLOCK" })] }), (0, jsx_runtime_1.jsxs)(ProgressItem, { children: [(0, jsx_runtime_1.jsx)(ProgressNumber, { color: "#6b7280", children: skippedTestCases }), (0, jsx_runtime_1.jsx)(ProgressLabel, { color: "#6b7280", children: "SKIP" })] }), (0, jsx_runtime_1.jsx)(ProgressBar, { children: (0, jsx_runtime_1.jsx)(ProgressFill, { percentage: progressPercentage }) }), (0, jsx_runtime_1.jsxs)(ProgressItem, { children: [(0, jsx_runtime_1.jsxs)(ProgressNumber, { color: "#059669", children: [progressPercentage.toFixed(1), "%"] }), (0, jsx_runtime_1.jsx)(ProgressLabel, { color: "#059669", children: "PROGRESS" })] })] }), (0, jsx_runtime_1.jsxs)(FilterSummary, { isCollapsed: isCollapsed, children: [filters.status && (0, jsx_runtime_1.jsxs)(FilterBadge, { children: ["Status: ", filters.status] }), filters.priority && (0, jsx_runtime_1.jsxs)(FilterBadge, { children: ["Priority: ", filters.priority] }), filters.suite && (0, jsx_runtime_1.jsxs)(FilterBadge, { children: ["Suite: ", filters.suite] }), filters.assignee && (0, jsx_runtime_1.jsxs)(FilterBadge, { children: ["Assignee: ", filters.assignee] }), filters.search && (0, jsx_runtime_1.jsxs)(FilterBadge, { children: ["Search: \"", filters.search, "\""] }), selectedTestCases.length > 0 && ((0, jsx_runtime_1.jsxs)(FilterBadge, { children: [selectedTestCases.length, " selected"] }))] })] }), (0, jsx_runtime_1.jsxs)(MainContent, { children: [(0, jsx_runtime_1.jsxs)(FilterPanel, { width: leftPanelWidth, children: [(0, jsx_runtime_1.jsx)(LeftPanelResizeHandle, { onMouseDown: handleLeftPanelResizeStart }), (0, jsx_runtime_1.jsxs)(FilterSection, { children: [(0, jsx_runtime_1.jsx)(FilterTitle, { children: "\uAC00\uC838\uC628 \uD14C\uC2A4\uD2B8\uCF00\uC774\uC2A4 \uD3F4\uB354" }), importedFolders.length > 0 ? ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("div", { style: { marginBottom: '16px' }, children: (0, jsx_runtime_1.jsx)("button", { onClick: () => setShowTestCaseModal(true), style: {
                                                        padding: '8px 16px',
                                                        background: '#3b82f6',
                                                        color: 'white',
                                                        border: 'none',
                                                        borderRadius: '6px',
                                                        cursor: 'pointer',
                                                        fontSize: '12px'
                                                    }, children: "+ \uD3F4\uB354 \uCD94\uAC00" }) }), (0, jsx_runtime_1.jsx)(FolderList, { children: renderImportedFolderTree(buildFolderTree(importedFolders)) })] })) : ((0, jsx_runtime_1.jsxs)("div", { style: {
                                            padding: '20px',
                                            textAlign: 'center',
                                            color: '#6b7280',
                                            display: 'flex',
                                            flexDirection: 'column',
                                            alignItems: 'center',
                                            justifyContent: 'center',
                                            height: '100%',
                                            minHeight: '400px',
                                            flex: '1'
                                        }, children: ["\uAC00\uC838\uC628 \uD14C\uC2A4\uD2B8\uCF00\uC774\uC2A4\uAC00 \uC5C6\uC2B5\uB2C8\uB2E4.", (0, jsx_runtime_1.jsx)("br", {}), (0, jsx_runtime_1.jsx)("button", { onClick: () => setShowTestCaseModal(true), style: {
                                                    marginTop: '10px',
                                                    padding: '8px 16px',
                                                    background: '#3b82f6',
                                                    color: 'white',
                                                    border: 'none',
                                                    borderRadius: '6px',
                                                    cursor: 'pointer'
                                                }, children: "\uD14C\uC2A4\uD2B8\uCF00\uC774\uC2A4 \uAC00\uC838\uC624\uAE30" })] }))] }), (0, jsx_runtime_1.jsxs)(SavedFilters, { children: [(0, jsx_runtime_1.jsx)(FilterTitle, { children: "Saved Views" }), (0, jsx_runtime_1.jsx)(SavedFilterItem, { children: (0, jsx_runtime_1.jsx)("span", { children: "My Default View" }) }), (0, jsx_runtime_1.jsx)(SavedFilterItem, { children: (0, jsx_runtime_1.jsx)("span", { children: "High Priority Tests" }) }), (0, jsx_runtime_1.jsx)(SavedFilterItem, { children: (0, jsx_runtime_1.jsx)("span", { children: "Failed Tests" }) })] }), selectedTestCases.length > 0 && ((0, jsx_runtime_1.jsxs)(BulkActionPanel, { children: [(0, jsx_runtime_1.jsx)(FilterTitle, { children: "Bulk Actions" }), (0, jsx_runtime_1.jsx)(BulkActionButton, { variant: "pass", onClick: () => handleBulkStatusChange('Pass'), children: "Mark All as Pass" }), (0, jsx_runtime_1.jsx)(BulkActionButton, { variant: "fail", onClick: () => handleBulkStatusChange('Fail'), children: "Mark All as Fail" }), (0, jsx_runtime_1.jsx)(BulkActionButton, { variant: "block", onClick: () => handleBulkStatusChange('Block'), children: "Mark All as Block" }), (0, jsx_runtime_1.jsx)(BulkActionButton, { variant: "skip", onClick: () => handleBulkStatusChange('Skip'), children: "Mark All as Skip" })] }))] }), (0, jsx_runtime_1.jsxs)(TestListContainer, { children: [(0, jsx_runtime_1.jsx)(TestListHeader, { children: (0, jsx_runtime_1.jsx)(TestListTitle, { children: selectedImportedFolder
                                        ? `${selectedImportedFolder.name} 폴더의 테스트 케이스 (${folderTestCases.length}개)`
                                        : `Test Cases (${filteredTestCases.length} of ${totalTestCases})` }) }), (0, jsx_runtime_1.jsxs)(TestTable, { children: [(0, jsx_runtime_1.jsxs)(TableHeader, { children: [(0, jsx_runtime_1.jsx)("div", { children: (0, jsx_runtime_1.jsx)("input", { type: "checkbox", checked: selectedTestCases.length === (selectedImportedFolder ? folderTestCases : filteredTestCases).length && (selectedImportedFolder ? folderTestCases : filteredTestCases).length > 0, onChange: (e) => handleSelectAll(e.target.checked) }) }), (0, jsx_runtime_1.jsx)("div", { children: "Status" }), (0, jsx_runtime_1.jsx)("div", { children: "Priority" }), (0, jsx_runtime_1.jsx)("div", { children: "Test Case" }), (0, jsx_runtime_1.jsx)("div", { children: "Suite" }), (0, jsx_runtime_1.jsx)("div", { children: "Module" }), (0, jsx_runtime_1.jsx)("div", { children: "Assignee" }), (0, jsx_runtime_1.jsx)("div", { children: "Last Result" }), (0, jsx_runtime_1.jsx)("div", { children: "Actions" })] }), (selectedImportedFolder ? folderTestCases : filteredTestCases).map((testCase) => ((0, jsx_runtime_1.jsxs)(TableRow, { isSelected: selectedTestCases.includes(testCase.id), status: testCase.status, onClick: () => handleTestCaseClick(testCase), children: [(0, jsx_runtime_1.jsx)(TableCell, { children: (0, jsx_runtime_1.jsx)("input", { type: "checkbox", checked: selectedTestCases.includes(testCase.id), onChange: (e) => handleTestCaseSelect(testCase.id, e.target.checked), onClick: (e) => e.stopPropagation() }) }), (0, jsx_runtime_1.jsx)(TableCell, { children: (0, jsx_runtime_1.jsx)(StatusBadge, { status: testCase.status, children: testCase.status }) }), (0, jsx_runtime_1.jsx)(TableCell, { children: (0, jsx_runtime_1.jsx)(PriorityBadge, { priority: testCase.priority, children: testCase.priority }) }), (0, jsx_runtime_1.jsx)(TableCell, { children: (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("div", { style: { fontWeight: 500 }, children: testCase.name || testCase.title }), (0, jsx_runtime_1.jsxs)("div", { style: { fontSize: 12, color: '#64748b' }, children: [(testCase.description || '').substring(0, 60), "..."] })] }) }), (0, jsx_runtime_1.jsx)(TableCell, { children: testCase.suite || '-' }), (0, jsx_runtime_1.jsx)(TableCell, { children: testCase.module || '-' }), (0, jsx_runtime_1.jsx)(TableCell, { children: testCase.assignee || '-' }), (0, jsx_runtime_1.jsx)(TableCell, { children: testCase.lastUpdated ? new Date(testCase.lastUpdated).toLocaleDateString() : '-' }), (0, jsx_runtime_1.jsx)(TableCell, { children: (0, jsx_runtime_1.jsx)(SimpleStatusDropdown_1.default, { testCaseId: testCase.id, currentStatus: testCase.status || 'Inactive', onStatusChange: handleStatusChange }) })] }, testCase.id)))] })] }), (0, jsx_runtime_1.jsxs)(DetailPanel, { isOpen: !!selectedTestCase, width: detailPanelWidth, onMouseDown: handleDetailPanelResizeStart, children: [(0, jsx_runtime_1.jsxs)(DetailHeader, { children: [(0, jsx_runtime_1.jsx)(DetailHeaderTitle, { children: "Test Case Details" }), (0, jsx_runtime_1.jsx)(CloseButton, { onClick: () => setSelectedTestCase(null), children: "\u00D7" })] }), (0, jsx_runtime_1.jsx)(ResizeHandle, { onMouseDown: handleDetailPanelResizeStart }), (0, jsx_runtime_1.jsx)(DetailContent, { onMouseUp: handleDetailPanelResizeEnd, onMouseLeave: handleDetailPanelResizeEnd, children: selectedTestCase && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)(DetailSection, { children: [(0, jsx_runtime_1.jsx)(DetailTitle, { children: "Overview" }), (0, jsx_runtime_1.jsxs)(SimpleHeader, { children: [(0, jsx_runtime_1.jsx)(SimpleTitle, { children: selectedTestCase.title || selectedTestCase.name }), (0, jsx_runtime_1.jsx)(SimpleStatus, { status: selectedTestCase.status, children: selectedTestCase.status })] }), (0, jsx_runtime_1.jsxs)(SimpleInfo, { children: [(0, jsx_runtime_1.jsxs)(SimpleInfoItem, { children: [(0, jsx_runtime_1.jsx)(SimpleLabel, { children: "ID:" }), (0, jsx_runtime_1.jsxs)(SimpleValue, { children: ["#", selectedTestCase.id] })] }), (0, jsx_runtime_1.jsxs)(SimpleInfoItem, { children: [(0, jsx_runtime_1.jsx)(SimpleLabel, { children: "Priority:" }), (0, jsx_runtime_1.jsx)(SimpleValue, { priority: selectedTestCase.priority, children: selectedTestCase.priority })] }), (0, jsx_runtime_1.jsxs)(SimpleInfoItem, { children: [(0, jsx_runtime_1.jsx)(SimpleLabel, { children: "Author:" }), (0, jsx_runtime_1.jsx)(SimpleValue, { children: selectedTestCase.createdBy || 'admin' })] })] }), (0, jsx_runtime_1.jsxs)(SimpleSection, { children: [(0, jsx_runtime_1.jsx)(SimpleLabel, { children: "Description" }), (0, jsx_runtime_1.jsx)(SimpleText, { children: selectedTestCase.description || '설명이 없습니다.' })] }), (0, jsx_runtime_1.jsxs)(SimpleSection, { children: [(0, jsx_runtime_1.jsx)(SimpleLabel, { children: "Prerequisites" }), (0, jsx_runtime_1.jsx)(SimpleText, { children: selectedTestCase.prereq || '사전 조건이 없습니다.' })] }), (0, jsx_runtime_1.jsxs)(SimpleSection, { children: [(0, jsx_runtime_1.jsx)(SimpleLabel, { children: "Test Steps" }), (0, jsx_runtime_1.jsx)(SimpleSteps, { children: (() => {
                                                                let stepsArray = [];
                                                                if (selectedTestCase.steps) {
                                                                    if (Array.isArray(selectedTestCase.steps)) {
                                                                        stepsArray = selectedTestCase.steps;
                                                                    }
                                                                    else if (typeof selectedTestCase.steps === 'string') {
                                                                        try {
                                                                            stepsArray = JSON.parse(selectedTestCase.steps);
                                                                        }
                                                                        catch (e) {
                                                                            stepsArray = [selectedTestCase.steps];
                                                                        }
                                                                    }
                                                                }
                                                                if (stepsArray.length > 0) {
                                                                    return stepsArray.map((step, index) => ((0, jsx_runtime_1.jsxs)(SimpleStep, { children: [(0, jsx_runtime_1.jsxs)(SimpleStepNumber, { children: [index + 1, "."] }), (0, jsx_runtime_1.jsx)(SimpleStepText, { children: step })] }, index)));
                                                                }
                                                                else {
                                                                    return ((0, jsx_runtime_1.jsxs)(SimpleStep, { children: [(0, jsx_runtime_1.jsx)(SimpleStepNumber, { children: "1." }), (0, jsx_runtime_1.jsx)(SimpleStepText, { children: "No steps defined" })] }));
                                                                }
                                                            })() })] }), (0, jsx_runtime_1.jsxs)(SimpleSection, { children: [(0, jsx_runtime_1.jsx)(SimpleLabel, { children: "Expected Result" }), (0, jsx_runtime_1.jsx)(SimpleText, { children: selectedTestCase.expected || selectedTestCase.expectedResult || '예상 결과가 없습니다.' })] })] }), selectedTestCase.steps && ((0, jsx_runtime_1.jsxs)(DetailSection, { children: [(0, jsx_runtime_1.jsx)(DetailTitle, { children: "Steps" }), (0, jsx_runtime_1.jsx)(DetailText, { children: (() => {
                                                        let stepsArray = [];
                                                        if (selectedTestCase.steps) {
                                                            if (Array.isArray(selectedTestCase.steps)) {
                                                                stepsArray = selectedTestCase.steps;
                                                            }
                                                            else if (typeof selectedTestCase.steps === 'string') {
                                                                try {
                                                                    stepsArray = JSON.parse(selectedTestCase.steps);
                                                                }
                                                                catch (e) {
                                                                    stepsArray = [selectedTestCase.steps];
                                                                }
                                                            }
                                                        }
                                                        return stepsArray.join('\n');
                                                    })() })] })), selectedTestCase.expectedResult && ((0, jsx_runtime_1.jsxs)(DetailSection, { children: [(0, jsx_runtime_1.jsx)(DetailTitle, { children: "Expected Result" }), (0, jsx_runtime_1.jsx)(DetailText, { children: selectedTestCase.expectedResult })] })), (0, jsx_runtime_1.jsxs)(DetailSection, { children: [(0, jsx_runtime_1.jsx)(DetailTitle, { children: "Run Test" }), (0, jsx_runtime_1.jsxs)(StatusChangeForm, { children: [(0, jsx_runtime_1.jsx)(StatusRadioGroup, { children: ['Pass', 'Fail', 'Blocked', 'Skip'].map((status) => ((0, jsx_runtime_1.jsxs)(StatusRadio, { children: [(0, jsx_runtime_1.jsx)("input", { type: "radio", name: "status", value: status, checked: selectedTestCase.status === status, onChange: (e) => {
                                                                            console.log('라디오 버튼 클릭:', status);
                                                                            if (e.target.checked) {
                                                                                handleStatusChange(selectedTestCase.id, status);
                                                                            }
                                                                        } }), (0, jsx_runtime_1.jsx)(StatusBadge, { status: status, children: status })] }, status))) }), (0, jsx_runtime_1.jsx)(FilterLabel, { children: "Comment (Optional)" }), (0, jsx_runtime_1.jsx)(CommentTextarea, { placeholder: "Add a comment about this test execution...", value: currentComment, onChange: (e) => setCurrentComment(e.target.value) }), (0, jsx_runtime_1.jsx)(SaveButton, { onClick: () => {
                                                                if (currentComment.trim()) {
                                                                    // 댓글이 있으면 현재 상태로 다시 저장
                                                                    handleStatusChange(selectedTestCase.id, selectedTestCase.status || 'Inactive');
                                                                }
                                                                else {
                                                                    // 댓글이 없으면 그냥 패널 닫기
                                                                    setSelectedTestCase(null);
                                                                }
                                                            }, children: currentComment.trim() ? 'Save with Comment' : 'Close' })] })] }), (0, jsx_runtime_1.jsxs)(DetailSection, { children: [(0, jsx_runtime_1.jsx)(DetailTitle, { children: "History" }), (0, jsx_runtime_1.jsxs)(HistoryList, { children: [(0, jsx_runtime_1.jsxs)(HistoryItem, { children: [(0, jsx_runtime_1.jsxs)(HistoryMeta, { children: [(0, jsx_runtime_1.jsx)("span", { children: "John Doe" }), (0, jsx_runtime_1.jsx)("span", { children: "2024-01-15 14:30" })] }), (0, jsx_runtime_1.jsx)(HistoryChange, { children: "Status changed from Not Run to Pass" })] }), (0, jsx_runtime_1.jsxs)(HistoryItem, { children: [(0, jsx_runtime_1.jsxs)(HistoryMeta, { children: [(0, jsx_runtime_1.jsx)("span", { children: "Jane Smith" }), (0, jsx_runtime_1.jsx)("span", { children: "2024-01-14 16:45" })] }), (0, jsx_runtime_1.jsx)(HistoryChange, { children: "Status changed from Pass to Fail" })] })] })] })] })) })] })] }), showTestCaseModal && ((0, jsx_runtime_1.jsx)(ModalOverlay, { onClick: () => setShowTestCaseModal(false), children: (0, jsx_runtime_1.jsxs)(ModalContent, { onClick: (e) => e.stopPropagation(), children: [(0, jsx_runtime_1.jsxs)(ModalHeader, { children: [(0, jsx_runtime_1.jsx)(ModalTitle, { children: "\uD14C\uC2A4\uD2B8\uCF00\uC774\uC2A4 \uAC00\uC838\uC624\uAE30" }), (0, jsx_runtime_1.jsx)(CloseButton, { onClick: () => setShowTestCaseModal(false), children: "\u00D7" })] }), (0, jsx_runtime_1.jsx)(ModalBody, { children: (0, jsx_runtime_1.jsxs)("div", { style: { padding: '20px' }, children: [(0, jsx_runtime_1.jsx)("h3", { style: { marginBottom: '16px', textAlign: 'center' }, children: "\uD14C\uC2A4\uD2B8 \uAD00\uB9AC\uC5D0\uC11C \uD3F4\uB354 \uC120\uD0DD" }), (0, jsx_runtime_1.jsx)("p", { style: { marginBottom: '16px', color: '#6b7280', textAlign: 'center' }, children: "\uAC00\uC838\uC62C \uD3F4\uB354\uB97C \uC120\uD0DD\uD558\uC138\uC694. \uAC01 \uD3F4\uB354\uB97C \uAC1C\uBCC4\uC801\uC73C\uB85C \uC120\uD0DD\uD560 \uC218 \uC788\uC2B5\uB2C8\uB2E4." }), (0, jsx_runtime_1.jsx)(FolderList, { children: Array.isArray(folders) ? renderFolderTree(buildFolderTree(folders)) : ((0, jsx_runtime_1.jsx)("div", { style: { textAlign: 'center', padding: '20px', color: '#6b7280' }, children: isLoading ? '폴더 목록을 불러오는 중...' : '폴더 목록을 불러올 수 없습니다.' })) })] }) }), (0, jsx_runtime_1.jsxs)(ModalFooter, { children: [(0, jsx_runtime_1.jsx)(CancelButton, { onClick: () => setShowTestCaseModal(false), children: "\uCDE8\uC18C" }), (0, jsx_runtime_1.jsx)(AddButton, { onClick: handleAddSelectedFolders, disabled: selectedTestCasesToAdd.length === 0 || isLoadingTestCases, children: isLoadingTestCases ? '추가 중...' : `선택된 ${selectedTestCasesToAdd.length}개 폴더 추가` })] })] }) }))] }));
};
exports.default = ExecutionView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0RvY3VtZW50cy9xdWVzdC9EZXNrdG9wL3F1ZXN0L3NyYy9yZW5kZXJlci9mZWF0dXJlcy9SZWxlYXNlTWFuYWdlbWVudFYyL2NvbXBvbmVudHMvRXhlY3V0aW9uVmlldy50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsaUNBQXlFO0FBRXpFLDBFQUF1QztBQUN2QywrQ0FBbVM7QUFDblMsa0ZBQTBEO0FBa0QxRCxXQUFXO0FBQ1gsTUFBTSxrQkFBa0IsR0FBRywyQkFBTSxDQUFDLEdBQUcsQ0FBQTs7Ozs7O0NBTXBDLENBQUM7QUFFRix3QkFBd0I7QUFDeEIsTUFBTSxhQUFhLEdBQUcsMkJBQU0sQ0FBQyxHQUFHLENBQTBCOzs7YUFHN0MsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVc7Ozs7Ozs7Ozs7Ozs7Ozs7O2VBaUJwRCxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVzs7OztlQUl0RCxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVzs7OztlQUl0RCxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVzs7Q0FFcEUsQ0FBQztBQUVGLE1BQU0sV0FBVyxHQUFHLDJCQUFNLENBQUMsR0FBRyxDQUEwQjs7OzttQkFJckMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU07Q0FDM0QsQ0FBQztBQUVGLE1BQU0sV0FBVyxHQUFHLDJCQUFNLENBQUMsR0FBRyxDQUFBOzs7O0NBSTdCLENBQUM7QUFFRixNQUFNLFlBQVksR0FB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QkFBZ0IsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDckUsZ0NBQUssS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsWUFDbkUsU0FBUyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsb0JBQW9CLEdBQ2xELENBQ1AsR0FDVSxJQUNULEdBQ0ksRUFFWix3QkFBQyxXQUFXLGVBQ1YsdUJBQUMsWUFBWSxJQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsNkJBRXpDLEVBQ2YsdUJBQUMsU0FBUyxJQUNSLE9BQU8sRUFBRSx3QkFBd0IsRUFDakMsUUFBUSxFQUFFLHNCQUFzQixDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksa0JBQWtCLFlBRWxFLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sc0JBQXNCLENBQUMsTUFBTSxTQUFTLEdBQ3JFLElBQ0EsSUFDRCxHQUNGLENBQ2hCLElBR2tCLENBQ3RCLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixrQkFBZSxhQUFhLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0RvY3VtZW50cy9xdWVzdC9EZXNrdG9wL3F1ZXN0L3NyYy9yZW5kZXJlci9mZWF0dXJlcy9SZWxlYXNlTWFuYWdlbWVudFYyL2NvbXBvbmVudHMvRXhlY3V0aW9uVmlldy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZUNhbGxiYWNrLCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlUG9ydGFsIH0gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgdXNlR2V0UmVsZWFzZVRlc3RDYXNlc1F1ZXJ5LCB1c2VVcGRhdGVSZWxlYXNlRXhlY3V0aW9uU3RhdHNNdXRhdGlvbiwgdXNlR2V0UmVsZWFzZUV4ZWN1dGlvblN0YXRzUXVlcnksIHVzZVVwZGF0ZVRlc3RDYXNlU3RhdHVzTXV0YXRpb24sIHVzZUdldFRlc3RGb2xkZXJzUXVlcnksIHVzZUdldEltcG9ydGVkRm9sZGVyc1F1ZXJ5LCB1c2VBZGRJbXBvcnRlZEZvbGRlcnNNdXRhdGlvbiwgdXNlUmVtb3ZlSW1wb3J0ZWRGb2xkZXJNdXRhdGlvbiB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2VzL2FwaSc7XG5pbXBvcnQgU2ltcGxlU3RhdHVzRHJvcGRvd24gZnJvbSAnLi9TaW1wbGVTdGF0dXNEcm9wZG93bic7XG5cblxuLy8g7YOA7J6FIOygleydmFxuaW50ZXJmYWNlIFRlc3RDYXNlIHtcbiAgaWQ6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICB0aXRsZT86IHN0cmluZztcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgcHJpb3JpdHk6ICdQMCcgfCAnUDEnIHwgJ1AyJyB8ICdQMycgfCAnSGlnaCcgfCAnTWVkaXVtJyB8ICdMb3cnO1xuICBzdGF0dXM6ICdOb3QgUnVuJyB8ICdQYXNzJyB8ICdGYWlsJyB8ICdCbG9jaycgfCAnQmxvY2tlZCcgfCAnU2tpcCcgfCAnQWN0aXZlJyB8ICdJbmFjdGl2ZSc7XG4gIGFzc2lnbmVlPzogc3RyaW5nO1xuICBlc3RpbWF0ZWRUaW1lPzogbnVtYmVyO1xuICBhY3R1YWxUaW1lPzogbnVtYmVyO1xuICBsYXN0VXBkYXRlZDogc3RyaW5nO1xuICB0YWdzOiBzdHJpbmdbXTtcbiAgc3VpdGU/OiBzdHJpbmc7XG4gIG1vZHVsZT86IHN0cmluZztcbiAgc3RlcHM/OiBzdHJpbmdbXSB8IHN0cmluZztcbiAgZXhwZWN0ZWRSZXN1bHQ/OiBzdHJpbmc7XG4gIGV4cGVjdGVkPzogc3RyaW5nO1xuICBwcmVyZXE/OiBzdHJpbmc7XG4gIGF0dGFjaG1lbnRzPzogc3RyaW5nW107XG4gIGV4ZWN1dGlvblN0YXR1cz86IHN0cmluZztcbiAgZXhlY3V0ZWRBdD86IHN0cmluZztcbiAgZXhlY3V0ZWRCeT86IHN0cmluZztcbiAgY3JlYXRlZEJ5Pzogc3RyaW5nO1xuICBjcmVhdGVkQXQ/OiBzdHJpbmc7XG4gIHVwZGF0ZWRBdD86IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIFJlbGVhc2Uge1xuICBpZDogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIHZlcnNpb246IHN0cmluZztcbiAgc3ByaW50Pzogc3RyaW5nO1xuICBwZXJpb2Q/OiBzdHJpbmc7XG4gIG93bmVyOiBzdHJpbmc7XG4gIGNyZWF0ZWRBdDogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgRXhlY3V0aW9uVmlld1Byb3BzIHtcbiAgcmVsZWFzZTogUmVsZWFzZTtcbiAgdGVzdENhc2VzPzogVGVzdENhc2VbXTtcbiAgb25UZXN0Q2FzZVVwZGF0ZTogKHRlc3RDYXNlSWQ6IHN0cmluZywgdXBkYXRlczogUGFydGlhbDxUZXN0Q2FzZT4pID0+IHZvaWQ7XG4gIG9uQnVsa1VwZGF0ZTogKHRlc3RDYXNlSWRzOiBzdHJpbmdbXSwgdXBkYXRlczogUGFydGlhbDxUZXN0Q2FzZT4pID0+IHZvaWQ7XG4gIG9uQWRkVGVzdENhc2VzPzogKG5ld1Rlc3RDYXNlczogVGVzdENhc2VbXSkgPT4gdm9pZDtcbiAgb25UZXN0Q2FzZXNMb2FkPzogKHRlc3RDYXNlczogVGVzdENhc2VbXSkgPT4gdm9pZDtcbn1cblxuLy8g7Iqk7YOA7J28IOy7tO2PrOuEjO2KuFxuY29uc3QgRXhlY3V0aW9uQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgaGVpZ2h0OiAxMDAlO1xuICBiYWNrZ3JvdW5kOiAjZjhmYWZjO1xuICBtYXJnaW46IDA7IC8vIO2MqOuUqSDsg4Hsh4Qg7KCc6rGwXG5gO1xuXG4vLyDsg4Hri6gg7Luo7YWN7Iqk7Yq4IOuwlCAtIO2dsOyDiSDsu6jshYkg65SU7J6Q7J24XG5jb25zdCBUb3BDb250ZXh0QmFyID0gc3R5bGVkLmRpdjx7IGlzQ29sbGFwc2VkOiBib29sZWFuIH0+YFxuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTM1ZGVnLCAjZmZmZmZmIDAlLCAjZjhmYWZjIDEwMCUpO1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2UyZThmMDtcbiAgcGFkZGluZzogJHtwcm9wcyA9PiBwcm9wcy5pc0NvbGxhcHNlZCA/ICcxNnB4IDI0cHgnIDogJzI0cHggMjRweCd9O1xuICBib3gtc2hhZG93OiAwIDJweCAxMnB4IHJnYmEoMCwgMCwgMCwgMC4wOCk7XG4gIGNvbG9yOiAjMWUyOTNiO1xuICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgJjo6YmVmb3JlIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgcmlnaHQ6IDA7XG4gICAgaGVpZ2h0OiAxcHg7XG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDkwZGVnLCB0cmFuc3BhcmVudCAwJSwgI2NiZDVlMSA1MCUsIHRyYW5zcGFyZW50IDEwMCUpO1xuICB9XG4gIFxuICBAbWVkaWEgKG1heC13aWR0aDogMTQ0MHB4KSB7XG4gICAgcGFkZGluZzogJHtwcm9wcyA9PiBwcm9wcy5pc0NvbGxhcHNlZCA/ICcxNHB4IDIwcHgnIDogJzIwcHggMjBweCd9O1xuICB9XG4gIFxuICBAbWVkaWEgKG1heC13aWR0aDogMTI4MHB4KSB7XG4gICAgcGFkZGluZzogJHtwcm9wcyA9PiBwcm9wcy5pc0NvbGxhcHNlZCA/ICcxMnB4IDE2cHgnIDogJzE2cHggMTZweCd9O1xuICB9XG4gIFxuICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICBwYWRkaW5nOiAke3Byb3BzID0+IHByb3BzLmlzQ29sbGFwc2VkID8gJzEwcHggMTJweCcgOiAnMTJweCAxMnB4J307XG4gIH1cbmA7XG5cbmNvbnN0IFJlbGVhc2VNZXRhID0gc3R5bGVkLmRpdjx7IGlzQ29sbGFwc2VkOiBib29sZWFuIH0+YFxuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIG1hcmdpbi1ib3R0b206ICR7cHJvcHMgPT4gcHJvcHMuaXNDb2xsYXBzZWQgPyAnMCcgOiAnMTZweCd9O1xuYDtcblxuY29uc3QgUmVsZWFzZUxlZnQgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBnYXA6IDIwcHg7XG5gO1xuXG5jb25zdCBSZWxlYXNlUmlnaHQgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBnYXA6IDEycHg7XG5gO1xuXG5jb25zdCBSZWxlYXNlSW5mbyA9IHN0eWxlZC5kaXY8eyBpc0NvbGxhcHNlZDogYm9vbGVhbiB9PmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246ICR7cHJvcHMgPT4gcHJvcHMuaXNDb2xsYXBzZWQgPyAncm93JyA6ICdjb2x1bW4nfTtcbiAgYWxpZ24taXRlbXM6ICR7cHJvcHMgPT4gcHJvcHMuaXNDb2xsYXBzZWQgPyAnY2VudGVyJyA6ICdmbGV4LXN0YXJ0J307XG4gIGdhcDogJHtwcm9wcyA9PiBwcm9wcy5pc0NvbGxhcHNlZCA/ICcxNnB4JyA6ICc2cHgnfTtcbmA7XG5cbmNvbnN0IFJlbGVhc2VOYW1lQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZ2FwOiAxMnB4O1xuYDtcblxuY29uc3QgUmVsZWFzZU5hbWUgPSBzdHlsZWQuaDI8eyBpc0NvbGxhcHNlZDogYm9vbGVhbiB9PmBcbiAgbWFyZ2luOiAwO1xuICBmb250LXNpemU6ICR7cHJvcHMgPT4gcHJvcHMuaXNDb2xsYXBzZWQgPyAnMThweCcgOiAnMjRweCd9O1xuICBmb250LXdlaWdodDogNzAwO1xuICBjb2xvcjogIzFlMjkzYjtcbiAgdHJhbnNpdGlvbjogYWxsIDAuM3MgZWFzZTtcbmA7XG5cbmNvbnN0IFJlbGVhc2VEZXRhaWxzID0gc3R5bGVkLmRpdjx7IGlzQ29sbGFwc2VkOiBib29sZWFuIH0+YFxuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6ICR7cHJvcHMgPT4gcHJvcHMuaXNDb2xsYXBzZWQgPyAnMTJweCcgOiAnMjBweCd9O1xuICBmb250LXNpemU6ICR7cHJvcHMgPT4gcHJvcHMuaXNDb2xsYXBzZWQgPyAnMTJweCcgOiAnMTRweCd9O1xuICBjb2xvcjogIzY0NzQ4YjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgdHJhbnNpdGlvbjogYWxsIDAuM3MgZWFzZTtcbmA7XG5cbmNvbnN0IFJlbGVhc2VEZXRhaWxJdGVtID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZ2FwOiA4cHg7XG4gIHBhZGRpbmc6IDZweCAxMnB4O1xuICBiYWNrZ3JvdW5kOiAjZjFmNWY5O1xuICBib3JkZXItcmFkaXVzOiA2cHg7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGZvbnQtc2l6ZTogMTNweDtcbiAgYm9yZGVyOiAxcHggc29saWQgI2UyZThmMDtcbiAgY29sb3I6ICM0NzU1Njk7XG5cbiAgJjo6YmVmb3JlIHtcbiAgICBjb250ZW50OiAnJztcbiAgICB3aWR0aDogNHB4O1xuICAgIGhlaWdodDogNHB4O1xuICAgIGJhY2tncm91bmQ6ICM2NDc0OGI7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICB9XG5gO1xuXG5jb25zdCBQcm9ncmVzc1N1bW1hcnkgPSBzdHlsZWQuZGl2PHsgaXNDb2xsYXBzZWQ6IGJvb2xlYW4gfT5gXG4gIGRpc3BsYXk6ICR7cHJvcHMgPT4gcHJvcHMuaXNDb2xsYXBzZWQgPyAnbm9uZScgOiAnZmxleCd9O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBnYXA6IDIwcHg7XG4gIHBhZGRpbmc6IDE2cHggMjBweDtcbiAgYmFja2dyb3VuZDogI2Y4ZmFmYztcbiAgYm9yZGVyLXJhZGl1czogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbiAgYm9yZGVyOiAxcHggc29saWQgI2UyZThmMDtcbiAgdHJhbnNpdGlvbjogYWxsIDAuM3MgZWFzZTtcbmA7XG5cbmNvbnN0IEFjdGlvbkJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gIHBhZGRpbmc6IDEwcHggMjBweDtcbiAgYm9yZGVyOiAxcHggc29saWQgI2QxZDVkYjtcbiAgYm9yZGVyLXJhZGl1czogNnB4O1xuICBiYWNrZ3JvdW5kOiAjM2I4MmY2O1xuICBjb2xvcjogd2hpdGU7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICB0cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBnYXA6IDhweDtcbiAgXG4gICY6aG92ZXI6bm90KDpkaXNhYmxlZCkge1xuICAgIGJhY2tncm91bmQ6ICMyNTYzZWI7XG4gICAgYm9yZGVyLWNvbG9yOiAjMjU2M2ViO1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMXB4KTtcbiAgICBib3gtc2hhZG93OiAwIDRweCAxMnB4IHJnYmEoNTksIDEzMCwgMjQ2LCAwLjMpO1xuICB9XG4gIFxuICAmOmFjdGl2ZTpub3QoOmRpc2FibGVkKSB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApO1xuICB9XG4gIFxuICAmOmRpc2FibGVkIHtcbiAgICBiYWNrZ3JvdW5kOiAjZTVlN2ViO1xuICAgIGJvcmRlci1jb2xvcjogI2QxZDVkYjtcbiAgICBjb2xvcjogIzljYTNhZjtcbiAgICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xuICAgIG9wYWNpdHk6IDAuNjtcbiAgfVxuXG4gICY6OmJlZm9yZSB7XG4gICAgY29udGVudDogJyc7XG4gICAgd2lkdGg6IDE2cHg7XG4gICAgaGVpZ2h0OiAxNnB4O1xuICAgIGJhY2tncm91bmQ6IHVybCgnZGF0YTppbWFnZS9zdmcreG1sLDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIGZpbGw9XCJub25lXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiPjxwYXRoIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTEyIDR2MTZtOC04SDRcIi8+PC9zdmc+Jyk7XG4gICAgYmFja2dyb3VuZC1zaXplOiBjb250YWluO1xuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4gIH1cbmA7XG5cbmNvbnN0IENvbGxhcHNlQnV0dG9uID0gc3R5bGVkLmJ1dHRvbjx7IGlzQ29sbGFwc2VkOiBib29sZWFuIH0+YFxuICBwYWRkaW5nOiA4cHggMTZweDtcbiAgYm9yZGVyOiAxcHggc29saWQgI2QxZDVkYjtcbiAgYm9yZGVyLXJhZGl1czogNnB4O1xuICBiYWNrZ3JvdW5kOiAjZjhmYWZjO1xuICBjb2xvcjogIzY0NzQ4YjtcbiAgZm9udC1zaXplOiAxM3B4O1xuICBmb250LXdlaWdodDogNTAwO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIHRyYW5zaXRpb246IGFsbCAwLjJzIGVhc2U7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGdhcDogOHB4O1xuICBcbiAgJjpob3ZlciB7XG4gICAgYmFja2dyb3VuZDogI2YxZjVmOTtcbiAgICBib3JkZXItY29sb3I6ICM5NGEzYjg7XG4gICAgY29sb3I6ICM0NzU1Njk7XG4gIH1cblxuICAmOjpiZWZvcmUge1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIHdpZHRoOiAxNHB4O1xuICAgIGhlaWdodDogMTRweDtcbiAgICBiYWNrZ3JvdW5kOiB1cmwoJ2RhdGE6aW1hZ2Uvc3ZnK3htbCw8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIj48cGF0aCBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIiR7cHJvcHMgPT4gcHJvcHMuaXNDb2xsYXBzZWQgPyAnTTE5IDlsLTcgNy03LTcnIDogJ001IDE1bDctNyA3IDcnfVwiLz48L3N2Zz4nKTtcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvbnRhaW47XG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4ycyBlYXNlO1xuICB9XG5gO1xuXG4vLyDrqqjri6wg7Iqk7YOA7J28IOy7tO2PrOuEjO2KuOuTpFxuY29uc3QgTW9kYWxPdmVybGF5ID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IGZpeGVkO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIHJpZ2h0OiAwO1xuICBib3R0b206IDA7XG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC41KTtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIHotaW5kZXg6IDk5OTk7XG5gO1xuXG5jb25zdCBNb2RhbENvbnRlbnQgPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xuICBwYWRkaW5nOiAyNHB4O1xuICB3aWR0aDogODAlO1xuICBtYXgtd2lkdGg6IDgwMHB4O1xuICBtYXgtaGVpZ2h0OiA4MHZoO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuYDtcblxuY29uc3QgTW9kYWxIZWFkZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gIHBhZGRpbmctYm90dG9tOiAxNnB4O1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2U1ZTdlYjtcbmA7XG5cbmNvbnN0IE1vZGFsVGl0bGUgPSBzdHlsZWQuaDJgXG4gIG1hcmdpbjogMDtcbiAgZm9udC1zaXplOiAxOHB4O1xuICBmb250LXdlaWdodDogNjAwO1xuICBjb2xvcjogIzFmMjkzNztcbmA7XG5cblxuXG5jb25zdCBNb2RhbEJvZHkgPSBzdHlsZWQuZGl2YFxuICBmbGV4OiAxO1xuICBvdmVyZmxvdy15OiBhdXRvO1xuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuYDtcblxuY29uc3QgRm9sZGVyTGlzdCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGdhcDogNHB4O1xuYDtcblxuLy8g7YWM7Iqk7Yq4IOq0gOumrCDsmIHsl63qs7wg64+Z7J287ZWcIO2PtOuNlCDtirjrpqwg7Iqk7YOA7J2865OcIOy7tO2PrOuEjO2KuOuTpFxuY29uc3QgSW1wb3J0Rm9sZGVySXRlbSA9IHN0eWxlZC5kaXY8eyBsZXZlbDogbnVtYmVyOyAkaXNTZWxlY3RlZDogYm9vbGVhbiB9PmBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgaGVpZ2h0OiAyOHB4O1xuICBwYWRkaW5nLWxlZnQ6ICR7cHJvcHMgPT4gcHJvcHMubGV2ZWwgKiAxNiArIDEyfXB4O1xuICBwYWRkaW5nLXJpZ2h0OiAxMnB4O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgYmFja2dyb3VuZDogJHtwcm9wcyA9PiBwcm9wcy4kaXNTZWxlY3RlZCA/ICcjZGJlYWZlJyA6ICd0cmFuc3BhcmVudCd9O1xuICBib3JkZXItbGVmdDogJHtwcm9wcyA9PiBwcm9wcy4kaXNTZWxlY3RlZCA/ICczcHggc29saWQgIzNiODJmNicgOiAnbm9uZSd9O1xuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDAuMnMgZWFzZTtcbiAgZm9udC13ZWlnaHQ6ICR7cHJvcHMgPT4gcHJvcHMuJGlzU2VsZWN0ZWQgPyAnNjAwJyA6ICc0MDAnfTtcblxuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kOiAke3Byb3BzID0+IHByb3BzLiRpc1NlbGVjdGVkID8gJyNkYmVhZmUnIDogJyNmOWZhZmInfTtcbiAgfVxuYDtcblxuY29uc3QgSW1wb3J0Rm9sZGVyQ2hlY2tib3ggPSBzdHlsZWQuaW5wdXRgXG4gIG1hcmdpbi1yaWdodDogOHB4O1xuICB3aWR0aDogMTRweDtcbiAgaGVpZ2h0OiAxNHB4O1xuICBhY2NlbnQtY29sb3I6ICMzYjgyZjY7XG5gO1xuXG5jb25zdCBJbXBvcnRGb2xkZXJJY29uID0gc3R5bGVkLmRpdmBcbiAgd2lkdGg6IDE2cHg7XG4gIGhlaWdodDogMTZweDtcbiAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgY29sb3I6ICM2YjcyODA7XG5cbiAgJjo6YmVmb3JlIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIGJvcmRlcjogMnB4IHNvbGlkIGN1cnJlbnRDb2xvcjtcbiAgICBib3JkZXItcmFkaXVzOiAycHg7XG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gIH1cblxuICAmOjphZnRlciB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBsZWZ0OiAycHg7XG4gICAgcmlnaHQ6IDJweDtcbiAgICBoZWlnaHQ6IDNweDtcbiAgICBiYWNrZ3JvdW5kOiBjdXJyZW50Q29sb3I7XG4gICAgYm9yZGVyLXJhZGl1czogMXB4IDFweCAwIDA7XG4gIH1cbmA7XG5cbmNvbnN0IEltcG9ydFRleHRDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBmbGV4OiAxO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBtaW4td2lkdGg6IDA7XG4gIG92ZXJmbG93OiBoaWRkZW47XG5gO1xuXG5jb25zdCBJbXBvcnRGb2xkZXJOYW1lID0gc3R5bGVkLnNwYW5gXG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgY29sb3I6ICMxMTE4Mjc7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICBtYXgtd2lkdGg6IDEwMCU7XG4gIGRpc3BsYXk6IGJsb2NrO1xuYDtcblxuY29uc3QgSW1wb3J0VGVzdENhc2VDb3VudCA9IHN0eWxlZC5zcGFuYFxuICBmb250LXNpemU6IDEycHg7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGNvbG9yOiAjNmI3MjgwO1xuICBtYXJnaW4tbGVmdDogNHB4O1xuYDtcblxuY29uc3QgSW1wb3J0Rm9sZGVyQ2hpbGRyZW4gPSBzdHlsZWQuZGl2YFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG5gO1xuXG5jb25zdCBJbXBvcnRSZW1vdmVCdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxuICB3aWR0aDogMjBweDtcbiAgaGVpZ2h0OiAyMHB4O1xuICBiYWNrZ3JvdW5kOiAjZWY0NDQ0O1xuICBjb2xvcjogd2hpdGU7XG4gIGJvcmRlcjogbm9uZTtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIG9wYWNpdHk6IDA7XG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMC4ycztcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGZvbnQtc2l6ZTogMTJweDtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIG1hcmdpbi1sZWZ0OiA4cHg7XG5cbiAgJjpob3ZlciB7XG4gICAgYmFja2dyb3VuZDogI2RjMjYyNjtcbiAgfVxuXG4gICR7SW1wb3J0Rm9sZGVySXRlbX06aG92ZXIgJiB7XG4gICAgb3BhY2l0eTogMTtcbiAgfVxuYDtcblxuY29uc3QgRm9sZGVySXRlbSA9IHN0eWxlZC5kaXY8eyBsZXZlbDogbnVtYmVyIH0+YFxuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwYWRkaW5nOiA4cHggMTJweDtcbiAgYm9yZGVyOiAxcHggc29saWQgI2U1ZTdlYjtcbiAgYm9yZGVyLXJhZGl1czogNnB4O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIHRyYW5zaXRpb246IGFsbCAwLjJzO1xuICBtYXJnaW4tbGVmdDogJHtwcm9wcyA9PiBwcm9wcy5sZXZlbCAqIDIwfXB4O1xuICBcbiAgJjpob3ZlciB7XG4gICAgYmFja2dyb3VuZDogI2Y5ZmFmYjtcbiAgICBib3JkZXItY29sb3I6ICNkMWQ1ZGI7XG4gIH1cbiAgXG4gICYuc2VsZWN0ZWQge1xuICAgIGJhY2tncm91bmQ6ICNlZmY2ZmY7XG4gICAgYm9yZGVyLWNvbG9yOiAjM2I4MmY2O1xuICB9XG5gO1xuXG5jb25zdCBGb2xkZXJDaGVja2JveCA9IHN0eWxlZC5pbnB1dGBcbiAgbWFyZ2luLXJpZ2h0OiAxMnB4O1xuYDtcblxuY29uc3QgRm9sZGVySW5mbyA9IHN0eWxlZC5kaXZgXG4gIGZsZXg6IDE7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGdhcDogOHB4O1xuYDtcblxuY29uc3QgRm9sZGVySWNvbiA9IHN0eWxlZC5zcGFuYFxuICBjb2xvcjogIzZiNzI4MDtcbiAgZm9udC1zaXplOiAxNnB4O1xuYDtcblxuY29uc3QgRm9sZGVyTmFtZSA9IHN0eWxlZC5kaXZgXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGNvbG9yOiAjMWYyOTM3O1xuYDtcblxuY29uc3QgRm9sZGVyQ291bnQgPSBzdHlsZWQuZGl2YFxuICBmb250LXNpemU6IDEycHg7XG4gIGNvbG9yOiAjNmI3MjgwO1xuICBiYWNrZ3JvdW5kOiAjZjNmNGY2O1xuICBwYWRkaW5nOiAycHggNnB4O1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xuYDtcblxuY29uc3QgTW9kYWxGb290ZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICBnYXA6IDEycHg7XG4gIHBhZGRpbmctdG9wOiAxNnB4O1xuICBib3JkZXItdG9wOiAxcHggc29saWQgI2U1ZTdlYjtcbmA7XG5cbmNvbnN0IENhbmNlbEJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gIHBhZGRpbmc6IDhweCAxNnB4O1xuICBib3JkZXI6IDFweCBzb2xpZCAjZDFkNWRiO1xuICBib3JkZXItcmFkaXVzOiA2cHg7XG4gIGJhY2tncm91bmQ6IHdoaXRlO1xuICBjb2xvcjogIzM3NDE1MTtcbiAgZm9udC1zaXplOiAxNHB4O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIFxuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kOiAjZjlmYWZiO1xuICB9XG5gO1xuXG5jb25zdCBBZGRCdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxuICBwYWRkaW5nOiA4cHggMTZweDtcbiAgYm9yZGVyOiAxcHggc29saWQgIzNiODJmNjtcbiAgYm9yZGVyLXJhZGl1czogNnB4O1xuICBiYWNrZ3JvdW5kOiAjM2I4MmY2O1xuICBjb2xvcjogd2hpdGU7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBcbiAgJjpob3ZlciB7XG4gICAgYmFja2dyb3VuZDogIzI1NjNlYjtcbiAgfVxuICBcbiAgJjpkaXNhYmxlZCB7XG4gICAgYmFja2dyb3VuZDogIzljYTNhZjtcbiAgICBib3JkZXItY29sb3I6ICM5Y2EzYWY7XG4gICAgY3Vyc29yOiBub3QtYWxsb3dlZDtcbiAgfVxuYDtcblxuY29uc3QgUHJvZ3Jlc3NJdGVtID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGdhcDogNnB4O1xuICBwYWRkaW5nOiAxMnB4IDE2cHg7XG4gIGJhY2tncm91bmQ6IHdoaXRlO1xuICBib3JkZXItcmFkaXVzOiA2cHg7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNlMmU4ZjA7XG4gIHRyYW5zaXRpb246IGFsbCAwLjJzIGVhc2U7XG4gIG1pbi13aWR0aDogODBweDtcbiAgbWluLWhlaWdodDogNjVweDtcbiAgZmxleDogMTtcblxuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kOiAjZmFmYWZhO1xuICAgIGJvcmRlci1jb2xvcjogI2NiZDVlMTtcbiAgICBib3gtc2hhZG93OiAwIDJweCA0cHggcmdiYSgwLCAwLCAwLCAwLjA1KTtcbiAgfVxuYDtcblxuY29uc3QgUHJvZ3Jlc3NOdW1iZXIgPSBzdHlsZWQuc3Bhbjx7IGNvbG9yOiBzdHJpbmcgfT5gXG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMuY29sb3J9O1xuICBsaW5lLWhlaWdodDogMTtcbmA7XG5cbmNvbnN0IFByb2dyZXNzTGFiZWwgPSBzdHlsZWQuc3Bhbjx7IGNvbG9yOiBzdHJpbmcgfT5gXG4gIGZvbnQtc2l6ZTogMTFweDtcbiAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMuY29sb3J9O1xuICBmb250LXdlaWdodDogNjAwO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBsZXR0ZXItc3BhY2luZzogMC41cHg7XG5gO1xuXG5jb25zdCBQcm9ncmVzc0JhciA9IHN0eWxlZC5kaXZgXG4gIGZsZXg6IDE7XG4gIGhlaWdodDogOHB4O1xuICBiYWNrZ3JvdW5kOiAjZjFmNWY5O1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIG1hcmdpbjogMCAyNHB4O1xuICBib3JkZXI6IDFweCBzb2xpZCAjZTJlOGYwO1xuYDtcblxuY29uc3QgUHJvZ3Jlc3NGaWxsID0gc3R5bGVkLmRpdjx7IHBlcmNlbnRhZ2U6IG51bWJlciB9PmBcbiAgaGVpZ2h0OiAxMDAlO1xuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoOTBkZWcsICMzYjgyZjYsICMxMGI5ODEpO1xuICB3aWR0aDogJHtwcm9wcyA9PiBwcm9wcy5wZXJjZW50YWdlfSU7XG4gIHRyYW5zaXRpb246IHdpZHRoIDAuM3MgZWFzZTtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xuYDtcblxuY29uc3QgRmlsdGVyU3VtbWFyeSA9IHN0eWxlZC5kaXY8eyBpc0NvbGxhcHNlZDogYm9vbGVhbiB9PmBcbiAgZGlzcGxheTogJHtwcm9wcyA9PiBwcm9wcy5pc0NvbGxhcHNlZCA/ICdub25lJyA6ICdmbGV4J307XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGdhcDogOHB4O1xuICBmbGV4LXdyYXA6IHdyYXA7XG4gIG1hcmdpbi10b3A6IDEycHg7XG5gO1xuXG5jb25zdCBGaWx0ZXJCYWRnZSA9IHN0eWxlZC5zcGFuYFxuICBiYWNrZ3JvdW5kOiAjZjFmNWY5O1xuICBjb2xvcjogIzQ3NTU2OTtcbiAgcGFkZGluZzogNnB4IDEycHg7XG4gIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgZm9udC1zaXplOiAxMnB4O1xuICBmb250LXdlaWdodDogNTAwO1xuICBib3JkZXI6IDFweCBzb2xpZCAjZTJlOGYwO1xuYDtcblxuY29uc3QgTGl2ZUluZGljYXRvciA9IHN0eWxlZC5kaXY8eyAkaXNMaXZlOiBib29sZWFuIH0+YFxuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBnYXA6IDZweDtcbiAgcGFkZGluZzogNHB4IDhweDtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xuICBmb250LXNpemU6IDExcHg7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGJhY2tncm91bmQ6ICR7cHJvcHMgPT4gcHJvcHMuJGlzTGl2ZSBcbiAgICA/ICcjZWNmZGY1JyBcbiAgICA6ICcjZmVmMmYyJ307XG4gIGNvbG9yOiAke3Byb3BzID0+IHByb3BzLiRpc0xpdmUgPyAnIzE2YTM0YScgOiAnI2RjMjYyNid9O1xuICBib3JkZXI6IDFweCBzb2xpZCAke3Byb3BzID0+IHByb3BzLiRpc0xpdmUgXG4gICAgPyAnI2JiZjdkMCcgXG4gICAgOiAnI2ZlY2FjYSd9O1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBsZXR0ZXItc3BhY2luZzogMC41cHg7XG5gO1xuXG5jb25zdCBMaXZlRG90ID0gc3R5bGVkLmRpdjx7ICRpc0xpdmU6IGJvb2xlYW4gfT5gXG4gIHdpZHRoOiA2cHg7XG4gIGhlaWdodDogNnB4O1xuICBib3JkZXItcmFkaXVzOiA1MCU7XG4gIGJhY2tncm91bmQ6ICR7cHJvcHMgPT4gcHJvcHMuJGlzTGl2ZSA/ICcjMTZhMzRhJyA6ICcjZGMyNjI2J307XG4gIGFuaW1hdGlvbjogJHtwcm9wcyA9PiBwcm9wcy4kaXNMaXZlID8gJ2xpdmVQdWxzZSAycyBpbmZpbml0ZScgOiAnbm9uZSd9O1xuICBcbiAgQGtleWZyYW1lcyBsaXZlUHVsc2Uge1xuICAgIDAlLCAxMDAlIHsgXG4gICAgICBvcGFjaXR5OiAxOyBcbiAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XG4gICAgfVxuICAgIDUwJSB7IFxuICAgICAgb3BhY2l0eTogMC41OyBcbiAgICAgIHRyYW5zZm9ybTogc2NhbGUoMS4xKTtcbiAgICB9XG4gIH1cbmA7XG5cbi8vIOuplOyduCDsvZjthZDsuKAg7JiB7JetXG5jb25zdCBNYWluQ29udGVudCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXg6IDE7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIG1pbi1oZWlnaHQ6IDA7IC8vIGZsZXgg7JWE7J207YWc7J20IOy2leyGjOuQoCDsiJgg7J6I64+E66GdIO2VqFxuICBcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgfVxuYDtcblxuLy8g7KKM7LihIO2VhO2EsCDtjKjrhJBcbmNvbnN0IEZpbHRlclBhbmVsID0gc3R5bGVkLmRpdjx7IHdpZHRoOiBudW1iZXIgfT5gXG4gIHdpZHRoOiAke3Byb3BzID0+IHByb3BzLndpZHRofXB4O1xuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2UyZThmMDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgb3ZlcmZsb3cteTogYXV0bztcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBoZWlnaHQ6IDEwMCU7IC8vIOyghOyytCDrhpLsnbQg7IKs7JqpXG4gIG1pbi1oZWlnaHQ6IDA7IC8vIGZsZXgg7LaV7IaMIO2XiOyaqVxuICBcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDE0NDBweCkge1xuICAgIHdpZHRoOiAke3Byb3BzID0+IE1hdGgubWF4KHByb3BzLndpZHRoICogMC45LCAyMDApfXB4O1xuICB9XG4gIFxuICBAbWVkaWEgKG1heC13aWR0aDogMTI4MHB4KSB7XG4gICAgd2lkdGg6ICR7cHJvcHMgPT4gTWF0aC5tYXgocHJvcHMud2lkdGggKiAwLjcsIDE4MCl9cHg7XG4gIH1cbiAgXG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpIHtcbiAgICB3aWR0aDogJHtwcm9wcyA9PiBNYXRoLm1heChwcm9wcy53aWR0aCAqIDAuNiwgMTYwKX1weDtcbiAgfVxuICBcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiBhdXRvO1xuICAgIGJvcmRlci1yaWdodDogbm9uZTtcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2UyZThmMDtcbiAgfVxuYDtcblxuLy8g7KKM7LihIO2MqOuEkCDtgazquLAg7KGw7KCIIO2VuOuTpFxuY29uc3QgTGVmdFBhbmVsUmVzaXplSGFuZGxlID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIHJpZ2h0OiAtNHB4O1xuICB3aWR0aDogOHB4O1xuICBoZWlnaHQ6IDEwMCU7XG4gIGN1cnNvcjogY29sLXJlc2l6ZTtcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gIHotaW5kZXg6IDEwO1xuXG4gICY6aG92ZXIge1xuICAgIGJhY2tncm91bmQ6IHJnYmEoNTksIDEzMCwgMjQ2LCAwLjEpO1xuICB9XG5cbiAgJjo6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDUwJTtcbiAgICBsZWZ0OiA1MCU7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG4gICAgd2lkdGg6IDJweDtcbiAgICBoZWlnaHQ6IDIwcHg7XG4gICAgYmFja2dyb3VuZDogI2QxZDVkYjtcbiAgICBib3JkZXItcmFkaXVzOiAxcHg7XG4gIH1cbmA7XG5cbmNvbnN0IEZpbHRlclNlY3Rpb24gPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAxNnB4O1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2YxZjVmOTtcbmA7XG5cbmNvbnN0IEZpbHRlclRpdGxlID0gc3R5bGVkLmgzYFxuICBtYXJnaW46IDAgMCAxMnB4IDA7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgY29sb3I6ICMxZTI5M2I7XG5gO1xuXG5jb25zdCBGaWx0ZXJHcm91cCA9IHN0eWxlZC5kaXZgXG4gIG1hcmdpbi1ib3R0b206IDE2cHg7XG5gO1xuXG5jb25zdCBGaWx0ZXJMYWJlbCA9IHN0eWxlZC5sYWJlbGBcbiAgZGlzcGxheTogYmxvY2s7XG4gIGZvbnQtc2l6ZTogMTJweDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgY29sb3I6ICM2NDc0OGI7XG4gIG1hcmdpbi1ib3R0b206IDZweDtcbmA7XG5cbmNvbnN0IEZpbHRlclNlbGVjdCA9IHN0eWxlZC5zZWxlY3RgXG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiA4cHggMTJweDtcbiAgYm9yZGVyOiAxcHggc29saWQgI2QxZDVkYjtcbiAgYm9yZGVyLXJhZGl1czogNnB4O1xuICBmb250LXNpemU6IDE0cHg7XG4gIGJhY2tncm91bmQ6IHdoaXRlO1xuICBcbiAgJjpmb2N1cyB7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgICBib3JkZXItY29sb3I6ICMzYjgyZjY7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgM3B4IHJnYmEoNTksIDEzMCwgMjQ2LCAwLjEpO1xuICB9XG5gO1xuXG5jb25zdCBGaWx0ZXJJbnB1dCA9IHN0eWxlZC5pbnB1dGBcbiAgd2lkdGg6IDEwMCU7XG4gIHBhZGRpbmc6IDhweCAxMnB4O1xuICBib3JkZXI6IDFweCBzb2xpZCAjZDFkNWRiO1xuICBib3JkZXItcmFkaXVzOiA2cHg7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgXG4gICY6Zm9jdXMge1xuICAgIG91dGxpbmU6IG5vbmU7XG4gICAgYm9yZGVyLWNvbG9yOiAjM2I4MmY2O1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDNweCByZ2JhKDU5LCAxMzAsIDI0NiwgMC4xKTtcbiAgfVxuYDtcblxuY29uc3QgU2F2ZWRGaWx0ZXJzID0gc3R5bGVkLmRpdmBcbiAgcGFkZGluZzogMTZweDtcbmA7XG5cbmNvbnN0IFNhdmVkRmlsdGVySXRlbSA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgcGFkZGluZzogOHB4IDEycHg7XG4gIG1hcmdpbi1ib3R0b206IDhweDtcbiAgYmFja2dyb3VuZDogI2Y4ZmFmYztcbiAgYm9yZGVyLXJhZGl1czogNnB4O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQgMC4ycztcbiAgXG4gICY6aG92ZXIge1xuICAgIGJhY2tncm91bmQ6ICNmMWY1Zjk7XG4gIH1cbmA7XG5cbmNvbnN0IEJ1bGtBY3Rpb25QYW5lbCA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDE2cHg7XG4gIGJhY2tncm91bmQ6ICNmZWYzYzc7XG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZmRlNjhhO1xuYDtcblxuY29uc3QgQnVsa0FjdGlvbkJ1dHRvbiA9IHN0eWxlZC5idXR0b248eyB2YXJpYW50OiAncGFzcycgfCAnZmFpbCcgfCAnYmxvY2snIHwgJ3NraXAnIH0+YFxuICB3aWR0aDogMTAwJTtcbiAgcGFkZGluZzogOHB4IDEycHg7XG4gIG1hcmdpbi1ib3R0b206IDhweDtcbiAgYm9yZGVyOiBub25lO1xuICBib3JkZXItcmFkaXVzOiA2cHg7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICB0cmFuc2l0aW9uOiBhbGwgMC4ycztcbiAgXG4gIGJhY2tncm91bmQ6ICR7cHJvcHMgPT4ge1xuICAgIHN3aXRjaCAocHJvcHMudmFyaWFudCkge1xuICAgICAgY2FzZSAncGFzcyc6IHJldHVybiAnIzEwYjk4MSc7XG4gICAgICBjYXNlICdmYWlsJzogcmV0dXJuICcjZWY0NDQ0JztcbiAgICAgIGNhc2UgJ2Jsb2NrJzogcmV0dXJuICcjZjU5ZTBiJztcbiAgICAgIGNhc2UgJ3NraXAnOiByZXR1cm4gJyM4YjVjZjYnO1xuICAgICAgZGVmYXVsdDogcmV0dXJuICcjNmI3MjgwJztcbiAgICB9XG4gIH19O1xuICBjb2xvcjogd2hpdGU7XG4gIFxuICAmOmhvdmVyIHtcbiAgICBvcGFjaXR5OiAwLjk7XG4gIH1cbiAgXG4gICY6ZGlzYWJsZWQge1xuICAgIG9wYWNpdHk6IDAuNTtcbiAgICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xuICB9XG5gO1xuXG4vLyDspJHslZkg7YWM7Iqk7Yq4IOumrOyKpO2KuFxuY29uc3QgVGVzdExpc3RDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBmbGV4OiAxO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgbWluLXdpZHRoOiAwOyAvLyBmbGV4IOyVhOydtO2FnOydtCDstpXshozrkKAg7IiYIOyeiOuPhOuhnSDtlahcbiAgaGVpZ2h0OiAxMDAlOyAvLyDsoITssrQg64aS7J20IOyCrOyaqVxuICBtaW4taGVpZ2h0OiAwOyAvLyBmbGV4IOy2leyGjCDtl4jsmqlcbmA7XG5cbmNvbnN0IFRlc3RMaXN0SGVhZGVyID0gc3R5bGVkLmRpdmBcbiAgcGFkZGluZzogMTZweCAyNHB4O1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2UyZThmMDtcbiAgYmFja2dyb3VuZDogI2Y4ZmFmYztcbiAgXG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxNDQwcHgpIHtcbiAgICBwYWRkaW5nOiAxNHB4IDIwcHg7XG4gIH1cbiAgXG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMjgwcHgpIHtcbiAgICBwYWRkaW5nOiAxMnB4IDE2cHg7XG4gIH1cbiAgXG4gIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAgIHBhZGRpbmc6IDEwcHggMTJweDtcbiAgfVxuYDtcblxuY29uc3QgVGVzdExpc3RUaXRsZSA9IHN0eWxlZC5oM2BcbiAgbWFyZ2luOiAwO1xuICBmb250LXNpemU6IDE2cHg7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGNvbG9yOiAjMWUyOTNiO1xuYDtcblxuY29uc3QgVGVzdFRhYmxlID0gc3R5bGVkLmRpdmBcbiAgZmxleDogMTtcbiAgb3ZlcmZsb3cteTogYXV0bztcbiAgbWluLWhlaWdodDogMDsgLy8gZmxleCDslYTsnbTthZzsnbQg7LaV7IaM65CgIOyImCDsnojrj4TroZ0g7ZWoXG4gIGhlaWdodDogMTAwJTsgLy8g7KCE7LK0IOuGkuydtCDsgqzsmqlcbmA7XG5cbmNvbnN0IFRhYmxlSGVhZGVyID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiA0MHB4IDgwcHggODBweCAxZnIgMTIwcHggMTIwcHggMTAwcHggMTIwcHggMTIwcHg7XG4gIGdhcDogMTZweDtcbiAgcGFkZGluZzogMTJweCAyNHB4O1xuICBiYWNrZ3JvdW5kOiAjZjhmYWZjO1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2UyZThmMDtcbiAgZm9udC1zaXplOiAxMnB4O1xuICBmb250LXdlaWdodDogNjAwO1xuICBjb2xvcjogIzY0NzQ4YjtcbiAgcG9zaXRpb246IHN0aWNreTtcbiAgdG9wOiAwO1xuICB6LWluZGV4OiAxMDtcbiAgXG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxNDQwcHgpIHtcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDQwcHggNzBweCA3MHB4IDFmciAxMDBweCAxMDBweCA5MHB4IDEwMHB4IDkwcHg7XG4gICAgZ2FwOiAxMnB4O1xuICAgIHBhZGRpbmc6IDEwcHggMjBweDtcbiAgICBmb250LXNpemU6IDExcHg7XG4gIH1cbiAgXG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMjgwcHgpIHtcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDM1cHggNjBweCA2MHB4IDFmciA5MHB4IDkwcHggODBweCA5MHB4IDgwcHg7XG4gICAgZ2FwOiAxMHB4O1xuICAgIHBhZGRpbmc6IDhweCAxNnB4O1xuICAgIGZvbnQtc2l6ZTogMTFweDtcbiAgfVxuICBcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjRweCkge1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMzBweCA1MHB4IDUwcHggMWZyIDgwcHggODBweCA3MHB4O1xuICAgIGdhcDogOHB4O1xuICAgIHBhZGRpbmc6IDhweCAxMnB4O1xuICAgIGZvbnQtc2l6ZTogMTBweDtcbiAgfVxuICBcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7XG4gICAgZGlzcGxheTogbm9uZTsgLy8g66qo67CU7J287JeQ7ISc64qUIOy5tOuTnCDtmJXtg5zroZwg67OA6rK9XG4gIH1cbmA7XG5cbmNvbnN0IFRhYmxlUm93ID0gc3R5bGVkLmRpdjx7IGlzU2VsZWN0ZWQ/OiBib29sZWFuOyBzdGF0dXM/OiBzdHJpbmcgfT5gXG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogNDBweCA4MHB4IDgwcHggMWZyIDEyMHB4IDEyMHB4IDEwMHB4IDEyMHB4IDEyMHB4O1xuICBnYXA6IDE2cHg7XG4gIHBhZGRpbmc6IDEycHggMjRweDtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNmMWY1Zjk7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgdHJhbnNpdGlvbjogYWxsIDAuMnM7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgXG4gIC8qIOyLpO2WieuQmOyngCDslYrsnYAg7LyA7J207IqkIC0g7Z2Q66a/7ZWY6rKMIO2RnOyLnCAqL1xuICBvcGFjaXR5OiAke3Byb3BzID0+IHtcbiAgICBjb25zdCBpc0V4ZWN1dGVkID0gcHJvcHMuc3RhdHVzICYmIHByb3BzLnN0YXR1cyAhPT0gJ05vdCBSdW4nICYmIHByb3BzLnN0YXR1cyAhPT0gJ0luYWN0aXZlJztcbiAgICByZXR1cm4gaXNFeGVjdXRlZCA/IDEgOiAwLjY7XG4gIH19O1xuICBcbiAgLyog7Iuk7ZaJIOyDge2DnOyXkCDrlLDrpbgg67Cw6rK97IOJICovXG4gIGJhY2tncm91bmQ6ICR7cHJvcHMgPT4ge1xuICAgIGlmIChwcm9wcy5pc1NlbGVjdGVkKSByZXR1cm4gJyNlZmY2ZmYnO1xuICAgIGNvbnN0IGlzRXhlY3V0ZWQgPSBwcm9wcy5zdGF0dXMgJiYgcHJvcHMuc3RhdHVzICE9PSAnTm90IFJ1bicgJiYgcHJvcHMuc3RhdHVzICE9PSAnSW5hY3RpdmUnO1xuICAgIGlmICghaXNFeGVjdXRlZCkgcmV0dXJuICcjZmFmYWZhJzsgLy8g7Iuk7ZaJ65CY7KeAIOyViuydgCDsvIDsnbTsiqTripQg7ZqM7IOJIOuwsOqyvVxuICAgIFxuICAgIHN3aXRjaCAocHJvcHMuc3RhdHVzKSB7XG4gICAgICBjYXNlICdQYXNzJzogcmV0dXJuICcjZjBmZGY0JztcbiAgICAgIGNhc2UgJ0ZhaWwnOiByZXR1cm4gJyNmZWYyZjInO1xuICAgICAgY2FzZSAnQmxvY2snOiByZXR1cm4gJyNmZmZiZWInO1xuICAgICAgY2FzZSAnU2tpcCc6IHJldHVybiAnI2ZhZjVmZic7XG4gICAgICBkZWZhdWx0OiByZXR1cm4gJyNmZmZmZmYnO1xuICAgIH1cbiAgfX07XG4gIFxuICAvKiDsi6TtlonrkJwg7LyA7J207Iqk64qUIOyijOy4oeyXkCDsg4Htg5wg7ZGc7IucIOuwlCAqL1xuICAmOjpiZWZvcmUge1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBsZWZ0OiAwO1xuICAgIHRvcDogMDtcbiAgICBib3R0b206IDA7XG4gICAgd2lkdGg6IDRweDtcbiAgICBiYWNrZ3JvdW5kOiAke3Byb3BzID0+IHtcbiAgICAgIGlmIChwcm9wcy5pc1NlbGVjdGVkKSByZXR1cm4gJyMzYjgyZjYnO1xuICAgICAgY29uc3QgaXNFeGVjdXRlZCA9IHByb3BzLnN0YXR1cyAmJiBwcm9wcy5zdGF0dXMgIT09ICdOb3QgUnVuJyAmJiBwcm9wcy5zdGF0dXMgIT09ICdJbmFjdGl2ZSc7XG4gICAgICBpZiAoIWlzRXhlY3V0ZWQpIHJldHVybiAndHJhbnNwYXJlbnQnO1xuICAgICAgXG4gICAgICBzd2l0Y2ggKHByb3BzLnN0YXR1cykge1xuICAgICAgICBjYXNlICdQYXNzJzogcmV0dXJuICcjMTBiOTgxJztcbiAgICAgICAgY2FzZSAnRmFpbCc6IHJldHVybiAnI2VmNDQ0NCc7XG4gICAgICAgIGNhc2UgJ0Jsb2NrJzogcmV0dXJuICcjZjU5ZTBiJztcbiAgICAgICAgY2FzZSAnU2tpcCc6IHJldHVybiAnIzhiNWNmNic7XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiAndHJhbnNwYXJlbnQnO1xuICAgICAgfVxuICAgIH19O1xuICB9XG4gIFxuICAvKiDsi6TtlonrkJjsp4Ag7JWK7J2AIOy8gOydtOyKpOyXkCDsoJDshKAg7YWM65GQ66asICovXG4gIGJvcmRlcjogJHtwcm9wcyA9PiB7XG4gICAgY29uc3QgaXNFeGVjdXRlZCA9IHByb3BzLnN0YXR1cyAmJiBwcm9wcy5zdGF0dXMgIT09ICdOb3QgUnVuJyAmJiBwcm9wcy5zdGF0dXMgIT09ICdJbmFjdGl2ZSc7XG4gICAgcmV0dXJuIGlzRXhlY3V0ZWQgPyAnbm9uZScgOiAnMXB4IGRhc2hlZCAjZDFkNWRiJztcbiAgfX07XG4gIFxuICAmOmhvdmVyIHtcbiAgICBvcGFjaXR5OiAxO1xuICAgIGJhY2tncm91bmQ6ICR7cHJvcHMgPT4ge1xuICAgICAgaWYgKHByb3BzLmlzU2VsZWN0ZWQpIHJldHVybiAnI2RiZWFmZSc7XG4gICAgICBjb25zdCBpc0V4ZWN1dGVkID0gcHJvcHMuc3RhdHVzICYmIHByb3BzLnN0YXR1cyAhPT0gJ05vdCBSdW4nICYmIHByb3BzLnN0YXR1cyAhPT0gJ0luYWN0aXZlJztcbiAgICAgIGlmICghaXNFeGVjdXRlZCkgcmV0dXJuICcjZjNmNGY2JztcbiAgICAgIFxuICAgICAgc3dpdGNoIChwcm9wcy5zdGF0dXMpIHtcbiAgICAgICAgY2FzZSAnUGFzcyc6IHJldHVybiAnI2VjZmRmNSc7XG4gICAgICAgIGNhc2UgJ0ZhaWwnOiByZXR1cm4gJyNmZWYyZjInO1xuICAgICAgICBjYXNlICdCbG9jayc6IHJldHVybiAnI2ZlZmNlOCc7XG4gICAgICAgIGNhc2UgJ1NraXAnOiByZXR1cm4gJyNmNWYzZmYnO1xuICAgICAgICBkZWZhdWx0OiByZXR1cm4gJyNmOGZhZmMnO1xuICAgICAgfVxuICAgIH19O1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMXB4KTtcbiAgICBib3gtc2hhZG93OiAwIDRweCA4cHggcmdiYSgwLCAwLCAwLCAwLjEpO1xuICB9XG4gIFxuICBAbWVkaWEgKG1heC13aWR0aDogMTQ0MHB4KSB7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiA0MHB4IDcwcHggNzBweCAxZnIgMTAwcHggMTAwcHggOTBweCAxMDBweCA5MHB4O1xuICAgIGdhcDogMTJweDtcbiAgICBwYWRkaW5nOiAxMHB4IDIwcHg7XG4gIH1cbiAgXG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMjgwcHgpIHtcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDM1cHggNjBweCA2MHB4IDFmciA5MHB4IDkwcHggODBweCA5MHB4IDgwcHg7XG4gICAgZ2FwOiAxMHB4O1xuICAgIHBhZGRpbmc6IDhweCAxNnB4O1xuICB9XG4gIFxuICBAbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KSB7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAzMHB4IDUwcHggNTBweCAxZnIgODBweCA4MHB4IDcwcHg7XG4gICAgZ2FwOiA4cHg7XG4gICAgcGFkZGluZzogOHB4IDEycHg7XG4gIH1cbiAgXG4gIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAgIGRpc3BsYXk6IGJsb2NrOyAvLyDsubTrk5wg7ZiV7YOc66GcIOuzgOqyvVxuICAgIHBhZGRpbmc6IDE2cHg7XG4gICAgbWFyZ2luLWJvdHRvbTogOHB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZTJlOGYwO1xuICAgIGJveC1zaGFkb3c6IDAgMXB4IDNweCByZ2JhKDAsIDAsIDAsIDAuMSk7XG4gIH1cbmA7XG5cbmNvbnN0IFRhYmxlQ2VsbCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgY29sb3I6ICMxZTI5M2I7XG5gO1xuXG5jb25zdCBTdGF0dXNCYWRnZSA9IHN0eWxlZC5zcGFuPHsgc3RhdHVzOiBzdHJpbmcgfT5gXG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBnYXA6IDZweDtcbiAgcGFkZGluZzogNnB4IDEycHg7XG4gIGJvcmRlci1yYWRpdXM6IDE2cHg7XG4gIGZvbnQtc2l6ZTogMTJweDtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgbGV0dGVyLXNwYWNpbmc6IDAuNXB4O1xuICBib3JkZXI6IDJweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgbWluLXdpZHRoOiA4MHB4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgXG4gIGJhY2tncm91bmQ6ICR7cHJvcHMgPT4ge1xuICAgIHN3aXRjaCAocHJvcHMuc3RhdHVzKSB7XG4gICAgICBjYXNlICdOb3QgUnVuJzogcmV0dXJuICcjZjhmYWZjJztcbiAgICAgIGNhc2UgJ1Bhc3MnOiByZXR1cm4gJyNkY2ZjZTcnO1xuICAgICAgY2FzZSAnRmFpbCc6IHJldHVybiAnI2ZlZTJlMic7XG4gICAgICBjYXNlICdCbG9jayc6IHJldHVybiAnI2ZlZjNjNyc7XG4gICAgICBjYXNlICdTa2lwJzogcmV0dXJuICcjZjNlOGZmJztcbiAgICAgIGRlZmF1bHQ6IHJldHVybiAnI2Y4ZmFmYyc7XG4gICAgfVxuICB9fTtcbiAgXG4gIGJvcmRlci1jb2xvcjogJHtwcm9wcyA9PiB7XG4gICAgc3dpdGNoIChwcm9wcy5zdGF0dXMpIHtcbiAgICAgIGNhc2UgJ05vdCBSdW4nOiByZXR1cm4gJyNlMmU4ZjAnO1xuICAgICAgY2FzZSAnUGFzcyc6IHJldHVybiAnIzEwYjk4MSc7XG4gICAgICBjYXNlICdGYWlsJzogcmV0dXJuICcjZWY0NDQ0JztcbiAgICAgIGNhc2UgJ0Jsb2NrJzogcmV0dXJuICcjZjU5ZTBiJztcbiAgICAgIGNhc2UgJ1NraXAnOiByZXR1cm4gJyM4YjVjZjYnO1xuICAgICAgZGVmYXVsdDogcmV0dXJuICcjZTJlOGYwJztcbiAgICB9XG4gIH19O1xuICBcbiAgY29sb3I6ICR7cHJvcHMgPT4ge1xuICAgIHN3aXRjaCAocHJvcHMuc3RhdHVzKSB7XG4gICAgICBjYXNlICdOb3QgUnVuJzogcmV0dXJuICcjNjQ3NDhiJztcbiAgICAgIGNhc2UgJ1Bhc3MnOiByZXR1cm4gJyMwNjVmNDYnO1xuICAgICAgY2FzZSAnRmFpbCc6IHJldHVybiAnI2RjMjYyNic7XG4gICAgICBjYXNlICdCbG9jayc6IHJldHVybiAnIzkyNDAwZSc7XG4gICAgICBjYXNlICdTa2lwJzogcmV0dXJuICcjNmIyMWE4JztcbiAgICAgIGRlZmF1bHQ6IHJldHVybiAnIzY0NzQ4Yic7XG4gICAgfVxuICB9fTtcbiAgXG4gICY6OmJlZm9yZSB7XG4gICAgY29udGVudDogJyc7XG4gICAgd2lkdGg6IDhweDtcbiAgICBoZWlnaHQ6IDhweDtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgYmFja2dyb3VuZDogJHtwcm9wcyA9PiB7XG4gICAgICBzd2l0Y2ggKHByb3BzLnN0YXR1cykge1xuICAgICAgICBjYXNlICdOb3QgUnVuJzogcmV0dXJuICcjOTRhM2I4JztcbiAgICAgICAgY2FzZSAnUGFzcyc6IHJldHVybiAnIzEwYjk4MSc7XG4gICAgICAgIGNhc2UgJ0ZhaWwnOiByZXR1cm4gJyNlZjQ0NDQnO1xuICAgICAgICBjYXNlICdCbG9jayc6IHJldHVybiAnI2Y1OWUwYic7XG4gICAgICAgIGNhc2UgJ1NraXAnOiByZXR1cm4gJyM4YjVjZjYnO1xuICAgICAgICBkZWZhdWx0OiByZXR1cm4gJyM5NGEzYjgnO1xuICAgICAgfVxuICAgIH19O1xuICB9XG5gO1xuXG5jb25zdCBQcmlvcml0eUJhZGdlID0gc3R5bGVkLnNwYW48eyBwcmlvcml0eTogc3RyaW5nIH0+YFxuICBwYWRkaW5nOiA0cHggOHB4O1xuICBib3JkZXItcmFkaXVzOiAxMnB4O1xuICBmb250LXNpemU6IDEycHg7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIFxuICBiYWNrZ3JvdW5kOiAke3Byb3BzID0+IHtcbiAgICBzd2l0Y2ggKHByb3BzLnByaW9yaXR5KSB7XG4gICAgICBjYXNlICdQMCc6IHJldHVybiAnI2ZlZTJlMic7XG4gICAgICBjYXNlICdQMSc6IHJldHVybiAnI2ZlZjNjNyc7XG4gICAgICBjYXNlICdQMic6IHJldHVybiAnI2RiZWFmZSc7XG4gICAgICBjYXNlICdQMyc6IHJldHVybiAnI2YzZjRmNic7XG4gICAgICBkZWZhdWx0OiByZXR1cm4gJyNmM2Y0ZjYnO1xuICAgIH1cbiAgfX07XG4gIFxuICBjb2xvcjogJHtwcm9wcyA9PiB7XG4gICAgc3dpdGNoIChwcm9wcy5wcmlvcml0eSkge1xuICAgICAgY2FzZSAnUDAnOiByZXR1cm4gJyNkYzI2MjYnO1xuICAgICAgY2FzZSAnUDEnOiByZXR1cm4gJyNkOTc3MDYnO1xuICAgICAgY2FzZSAnUDInOiByZXR1cm4gJyMyNTYzZWInO1xuICAgICAgY2FzZSAnUDMnOiByZXR1cm4gJyM2YjcyODAnO1xuICAgICAgZGVmYXVsdDogcmV0dXJuICcjNmI3MjgwJztcbiAgICB9XG4gIH19O1xuYDtcblxuLy8g65Oc66Gt64uk7Jq0IOy7qO2FjOydtOuEiFxuY29uc3QgU3RhdHVzRHJvcGRvd25Db250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgei1pbmRleDogOTk5OTk5OyAvKiDstZzsg4Hri6ggei1pbmRleCAqL1xuYDtcblxuLy8g65Oc66Gt64uk7Jq0IOuyhO2KvFxuY29uc3QgU3RhdHVzRHJvcGRvd25CdXR0b24gPSBzdHlsZWQuYnV0dG9uPHsgaXNPcGVuOiBib29sZWFuOyBzdGF0dXM/OiBzdHJpbmcgfT5gXG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBnYXA6IDhweDtcbiAgcGFkZGluZzogOHB4IDEycHg7XG4gIGJvcmRlcjogMXB4IHNvbGlkO1xuICBib3JkZXItcmFkaXVzOiA2cHg7XG4gIGZvbnQtc2l6ZTogMTNweDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICB0cmFuc2l0aW9uOiBhbGwgMC4ycztcbiAgbWluLXdpZHRoOiAxMTBweDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBcbiAgLyog7IOB7YOc67OEIOyKpO2DgOydvCAqL1xuICBiYWNrZ3JvdW5kOiAke3Byb3BzID0+IHtcbiAgICBzd2l0Y2ggKHByb3BzLnN0YXR1cykge1xuICAgICAgY2FzZSAnUGFzcyc6IHJldHVybiAnI2YwZmRmNCc7XG4gICAgICBjYXNlICdGYWlsJzogcmV0dXJuICcjZmVmMmYyJztcbiAgICAgIGNhc2UgJ0Jsb2NrJzogcmV0dXJuICcjZmZmYmViJztcbiAgICAgIGNhc2UgJ1NraXAnOiByZXR1cm4gJyNmYWY1ZmYnO1xuICAgICAgY2FzZSAnTm90IFJ1bic6XG4gICAgICBjYXNlICdJbmFjdGl2ZSc6XG4gICAgICBkZWZhdWx0OiByZXR1cm4gJ3doaXRlJztcbiAgICB9XG4gIH19O1xuICBcbiAgYm9yZGVyLWNvbG9yOiAke3Byb3BzID0+IHtcbiAgICBpZiAocHJvcHMuaXNPcGVuKSByZXR1cm4gJyMzYjgyZjYnO1xuICAgIHN3aXRjaCAocHJvcHMuc3RhdHVzKSB7XG4gICAgICBjYXNlICdQYXNzJzogcmV0dXJuICcjMTBiOTgxJztcbiAgICAgIGNhc2UgJ0ZhaWwnOiByZXR1cm4gJyNlZjQ0NDQnO1xuICAgICAgY2FzZSAnQmxvY2snOiByZXR1cm4gJyNmNTllMGInO1xuICAgICAgY2FzZSAnU2tpcCc6IHJldHVybiAnIzhiNWNmNic7XG4gICAgICBjYXNlICdOb3QgUnVuJzpcbiAgICAgIGNhc2UgJ0luYWN0aXZlJzpcbiAgICAgIGRlZmF1bHQ6IHJldHVybiAnI2QxZDVkYic7XG4gICAgfVxuICB9fTtcbiAgXG4gIGNvbG9yOiAke3Byb3BzID0+IHtcbiAgICBzd2l0Y2ggKHByb3BzLnN0YXR1cykge1xuICAgICAgY2FzZSAnUGFzcyc6IHJldHVybiAnIzA2NWY0Nic7XG4gICAgICBjYXNlICdGYWlsJzogcmV0dXJuICcjZGMyNjI2JztcbiAgICAgIGNhc2UgJ0Jsb2NrJzogcmV0dXJuICcjOTI0MDBlJztcbiAgICAgIGNhc2UgJ1NraXAnOiByZXR1cm4gJyM2YjIxYTgnO1xuICAgICAgY2FzZSAnTm90IFJ1bic6XG4gICAgICBjYXNlICdJbmFjdGl2ZSc6XG4gICAgICBkZWZhdWx0OiByZXR1cm4gJyMzNzQxNTEnO1xuICAgIH1cbiAgfX07XG4gIFxuICAmOmhvdmVyIHtcbiAgICBib3JkZXItY29sb3I6ICMzYjgyZjY7XG4gICAgYm94LXNoYWRvdzogMCAxcHggM3B4IHJnYmEoMCwgMCwgMCwgMC4xKTtcbiAgfVxuICBcbiAgJHtwcm9wcyA9PiBwcm9wcy5pc09wZW4gJiYgYFxuICAgIGJvcmRlci1jb2xvcjogIzNiODJmNiAhaW1wb3J0YW50O1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDNweCByZ2JhKDU5LCAxMzAsIDI0NiwgMC4xKTtcbiAgYH1cbmA7XG5cbi8vIOyDge2DnCDtkZzsi5wg7KCQXG5jb25zdCBTdGF0dXNEb3QgPSBzdHlsZWQuc3Bhbjx7IHN0YXR1cz86IHN0cmluZyB9PmBcbiAgd2lkdGg6IDhweDtcbiAgaGVpZ2h0OiA4cHg7XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgYmFja2dyb3VuZDogJHtwcm9wcyA9PiB7XG4gICAgc3dpdGNoIChwcm9wcy5zdGF0dXMpIHtcbiAgICAgIGNhc2UgJ1Bhc3MnOiByZXR1cm4gJyMxMGI5ODEnO1xuICAgICAgY2FzZSAnRmFpbCc6IHJldHVybiAnI2VmNDQ0NCc7XG4gICAgICBjYXNlICdCbG9jayc6IHJldHVybiAnI2Y1OWUwYic7XG4gICAgICBjYXNlICdTa2lwJzogcmV0dXJuICcjOGI1Y2Y2JztcbiAgICAgIGNhc2UgJ05vdCBSdW4nOlxuICAgICAgY2FzZSAnSW5hY3RpdmUnOlxuICAgICAgZGVmYXVsdDogcmV0dXJuICcjOTRhM2I4JztcbiAgICB9XG4gIH19O1xuYDtcblxuLy8g7IOB7YOcIO2FjeyKpO2KuFxuY29uc3QgU3RhdHVzVGV4dCA9IHN0eWxlZC5zcGFuYFxuICBmbGV4OiAxO1xuICB0ZXh0LWFsaWduOiBsZWZ0O1xuYDtcblxuLy8g65Oc66Gt64uk7Jq0IO2ZlOyCtO2RnFxuY29uc3QgRHJvcGRvd25BcnJvdyA9IHN0eWxlZC5zcGFuPHsgaXNPcGVuOiBib29sZWFuIH0+YFxuICBmb250LXNpemU6IDEycHg7XG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjJzO1xuICB0cmFuc2Zvcm06ICR7cHJvcHMgPT4gcHJvcHMuaXNPcGVuID8gJ3JvdGF0ZSgxODBkZWcpJyA6ICdyb3RhdGUoMGRlZyknfTtcbmA7XG5cbi8vIOyDge2DnCDtkZzsi5wg7KCV67O0IO2VqOyImFxuY29uc3QgZ2V0U3RhdHVzRGlzcGxheSA9IChzdGF0dXM/OiBzdHJpbmcpID0+IHtcbiAgc3dpdGNoIChzdGF0dXMpIHtcbiAgICBjYXNlICdQYXNzJzogcmV0dXJuIHsgdGV4dDogJ1Bhc3MnLCBjb2xvcjogJyMxMGI5ODEnIH07XG4gICAgY2FzZSAnRmFpbCc6IHJldHVybiB7IHRleHQ6ICdGYWlsJywgY29sb3I6ICcjZWY0NDQ0JyB9O1xuICAgIGNhc2UgJ0Jsb2NrJzogcmV0dXJuIHsgdGV4dDogJ0Jsb2NrJywgY29sb3I6ICcjZjU5ZTBiJyB9O1xuICAgIGNhc2UgJ1NraXAnOiByZXR1cm4geyB0ZXh0OiAnU2tpcCcsIGNvbG9yOiAnIzhiNWNmNicgfTtcbiAgICBjYXNlICdOb3QgUnVuJzogcmV0dXJuIHsgdGV4dDogJ05vdCBSdW4nLCBjb2xvcjogJyM5NGEzYjgnIH07XG4gICAgY2FzZSAnSW5hY3RpdmUnOiByZXR1cm4geyB0ZXh0OiAnSW5hY3RpdmUnLCBjb2xvcjogJyM2YjcyODAnIH07XG4gICAgY2FzZSAnVW50ZXN0ZWQnOiByZXR1cm4geyB0ZXh0OiAnVW50ZXN0ZWQnLCBjb2xvcjogJyM5Y2EzYWYnIH07XG4gICAgY2FzZSAnJzogXG4gICAgY2FzZSBudWxsOlxuICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgIGRlZmF1bHQ6IHJldHVybiB7IHRleHQ6ICdOb3QgUnVuJywgY29sb3I6ICcjOTRhM2I4JyB9O1xuICB9XG59O1xuXG4vLyBQb3J0YWzsmqkg65Oc66Gt64uk7Jq0IOuplOuJtCAtIOygiOuMgCDsnITsuZjroZwg66CM642U66eBXG5jb25zdCBQb3J0YWxEcm9wZG93bk1lbnUgPSBzdHlsZWQuZGl2PHsgcmVjdDogRE9NUmVjdDsgaXNPcGVuOiBib29sZWFuIH0+YFxuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHRvcDogJHtwcm9wcyA9PiBwcm9wcy5yZWN0LmJvdHRvbSArIDR9cHg7XG4gIGxlZnQ6ICR7cHJvcHMgPT4gcHJvcHMucmVjdC5sZWZ0fXB4O1xuICB3aWR0aDogJHtwcm9wcyA9PiBwcm9wcy5yZWN0LndpZHRofXB4O1xuICB6LWluZGV4OiA5OTk5OTk5OTsgLyog7LWc7IOB64uoIHotaW5kZXggKi9cbiAgbWluLXdpZHRoOiAxNDBweDtcbiAgYmFja2dyb3VuZDogd2hpdGU7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNkMWQ1ZGI7XG4gIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgYm94LXNoYWRvdzogXG4gICAgMCAyMHB4IDI1cHggLTVweCByZ2JhKDAsIDAsIDAsIDAuMSksIFxuICAgIDAgMTBweCAxMHB4IC01cHggcmdiYSgwLCAwLCAwLCAwLjA0KSxcbiAgICAwIDAgMCAxcHggcmdiYSgwLCAwLCAwLCAwLjA1KTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgXG4gIGRpc3BsYXk6ICR7cHJvcHMgPT4gcHJvcHMuaXNPcGVuID8gJ2Jsb2NrJyA6ICdub25lJ307XG4gIG9wYWNpdHk6ICR7cHJvcHMgPT4gcHJvcHMuaXNPcGVuID8gJzEnIDogJzAnfTtcbiAgdHJhbnNmb3JtOiAke3Byb3BzID0+IHByb3BzLmlzT3BlbiA/ICd0cmFuc2xhdGVZKDApIHNjYWxlKDEpJyA6ICd0cmFuc2xhdGVZKC0xMHB4KSBzY2FsZSgwLjk1KSd9O1xuICB0cmFuc2l0aW9uOiBhbGwgMC4xNXMgZWFzZS1vdXQ7XG4gIHRyYW5zZm9ybS1vcmlnaW46IHRvcCBjZW50ZXI7XG5gO1xuXG4vLyDquLDsobQg65Oc66Gt64uk7Jq0IOuplOuJtCAoUG9ydGFsIOyCrOyaqe2VmOyngCDslYrsnYQg65WMKVxuY29uc3QgU3RhdHVzRHJvcGRvd25NZW51ID0gc3R5bGVkLmRpdjx7IGlzT3BlbjogYm9vbGVhbjsgcG9zaXRpb246ICd0b3AnIHwgJ2JvdHRvbScgfT5gXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiBjYWxjKDEwMCUgKyA0cHgpO1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgei1pbmRleDogOTk5OTk5OTsgLyog7LWc7IOB64uoIHotaW5kZXggKi9cbiAgbWluLXdpZHRoOiAxNDBweDtcbiAgYmFja2dyb3VuZDogd2hpdGU7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNkMWQ1ZGI7XG4gIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgYm94LXNoYWRvdzogXG4gICAgMCAyMHB4IDI1cHggLTVweCByZ2JhKDAsIDAsIDAsIDAuMSksIFxuICAgIDAgMTBweCAxMHB4IC01cHggcmdiYSgwLCAwLCAwLCAwLjA0KSxcbiAgICAwIDAgMCAxcHggcmdiYSgwLCAwLCAwLCAwLjA1KTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgXG4gIGRpc3BsYXk6ICR7cHJvcHMgPT4gcHJvcHMuaXNPcGVuID8gJ2Jsb2NrJyA6ICdub25lJ307XG4gIG9wYWNpdHk6ICR7cHJvcHMgPT4gcHJvcHMuaXNPcGVuID8gJzEnIDogJzAnfTtcbiAgdHJhbnNmb3JtOiAke3Byb3BzID0+IHByb3BzLmlzT3BlbiA/ICd0cmFuc2xhdGVZKDApIHNjYWxlKDEpJyA6ICd0cmFuc2xhdGVZKC0xMHB4KSBzY2FsZSgwLjk1KSd9O1xuICB0cmFuc2l0aW9uOiBhbGwgMC4xNXMgZWFzZS1vdXQ7XG4gIHRyYW5zZm9ybS1vcmlnaW46IHRvcCBjZW50ZXI7XG5gO1xuXG4vLyDrk5zroa3ri6TsmrQg7JWE7J207YWcXG5jb25zdCBTdGF0dXNEcm9wZG93bkl0ZW0gPSBzdHlsZWQuYnV0dG9uPHsgc3RhdHVzOiBzdHJpbmc7IGlzU2VsZWN0ZWQ/OiBib29sZWFuIH0+YFxuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBnYXA6IDhweDtcbiAgd2lkdGg6IDEwMCU7XG4gIHBhZGRpbmc6IDEwcHggMTJweDtcbiAgYm9yZGVyOiBub25lO1xuICBiYWNrZ3JvdW5kOiAke3Byb3BzID0+IHByb3BzLmlzU2VsZWN0ZWQgPyBcbiAgICAoKCkgPT4ge1xuICAgICAgc3dpdGNoIChwcm9wcy5zdGF0dXMpIHtcbiAgICAgICAgY2FzZSAnUGFzcyc6IHJldHVybiAnI2YwZmRmNCc7XG4gICAgICAgIGNhc2UgJ0ZhaWwnOiByZXR1cm4gJyNmZWYyZjInO1xuICAgICAgICBjYXNlICdCbG9jayc6IHJldHVybiAnI2ZmZmJlYic7XG4gICAgICAgIGNhc2UgJ1NraXAnOiByZXR1cm4gJyNmYWY1ZmYnO1xuICAgICAgICBkZWZhdWx0OiByZXR1cm4gJyNmOGZhZmMnO1xuICAgICAgfVxuICAgIH0pKCkgOiAnd2hpdGUnXG4gIH07XG4gIGNvbG9yOiAjMzc0MTUxO1xuICBmb250LXNpemU6IDE0cHg7XG4gIGZvbnQtd2VpZ2h0OiAke3Byb3BzID0+IHByb3BzLmlzU2VsZWN0ZWQgPyAnNjAwJyA6ICc1MDAnfTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kIDAuMnM7XG4gIHRleHQtYWxpZ246IGxlZnQ7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgei1pbmRleDogOTk5OTk5OTsgLyog7LWc7IOB64uoIHotaW5kZXggKi9cbiAgXG4gIC8qIOyEoO2DneuQnCDtla3rqqkg7ZGc7IucICovXG4gICR7cHJvcHMgPT4gcHJvcHMuaXNTZWxlY3RlZCAmJiBgXG4gICAgJjo6YWZ0ZXIge1xuICAgICAgY29udGVudDogJ+Kckyc7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICByaWdodDogMTJweDtcbiAgICAgIGNvbG9yOiAkeygoKSA9PiB7XG4gICAgICAgIHN3aXRjaCAocHJvcHMuc3RhdHVzKSB7XG4gICAgICAgICAgY2FzZSAnUGFzcyc6IHJldHVybiAnIzEwYjk4MSc7XG4gICAgICAgICAgY2FzZSAnRmFpbCc6IHJldHVybiAnI2VmNDQ0NCc7XG4gICAgICAgICAgY2FzZSAnQmxvY2snOiByZXR1cm4gJyNmNTllMGInO1xuICAgICAgICAgIGNhc2UgJ1NraXAnOiByZXR1cm4gJyM4YjVjZjYnO1xuICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiAnIzk0YTNiOCc7XG4gICAgICAgIH1cbiAgICAgIH0pKCl9O1xuICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgfVxuICBgfVxuICBcbiAgJjpob3ZlciB7XG4gICAgYmFja2dyb3VuZDogJHtwcm9wcyA9PiB7XG4gICAgICBzd2l0Y2ggKHByb3BzLnN0YXR1cykge1xuICAgICAgICBjYXNlICdQYXNzJzogcmV0dXJuICcjZjBmZGY0JztcbiAgICAgICAgY2FzZSAnRmFpbCc6IHJldHVybiAnI2ZlZjJmMic7XG4gICAgICAgIGNhc2UgJ0Jsb2NrJzogcmV0dXJuICcjZmZmYmViJztcbiAgICAgICAgY2FzZSAnU2tpcCc6IHJldHVybiAnI2ZhZjVmZic7XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiAnI2Y4ZmFmYyc7XG4gICAgICB9XG4gICAgfX07XG4gIH1cbiAgXG4gICY6OmJlZm9yZSB7XG4gICAgY29udGVudDogJyc7XG4gICAgd2lkdGg6IDhweDtcbiAgICBoZWlnaHQ6IDhweDtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgYmFja2dyb3VuZDogJHtwcm9wcyA9PiB7XG4gICAgICBzd2l0Y2ggKHByb3BzLnN0YXR1cykge1xuICAgICAgICBjYXNlICdQYXNzJzogcmV0dXJuICcjMTBiOTgxJztcbiAgICAgICAgY2FzZSAnRmFpbCc6IHJldHVybiAnI2VmNDQ0NCc7XG4gICAgICAgIGNhc2UgJ0Jsb2NrJzogcmV0dXJuICcjZjU5ZTBiJztcbiAgICAgICAgY2FzZSAnU2tpcCc6IHJldHVybiAnIzhiNWNmNic7XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiAnIzk0YTNiOCc7XG4gICAgICB9XG4gICAgfX07XG4gIH1cbmA7XG5cbi8vIOyasOy4oSDsg4HshLgg7Yyo64SQXG5jb25zdCBEZXRhaWxQYW5lbCA9IHN0eWxlZC5kaXY8eyBpc09wZW46IGJvb2xlYW47IHdpZHRoOiBudW1iZXIgfT5gXG4gIHdpZHRoOiAke3Byb3BzID0+IHByb3BzLmlzT3BlbiA/IGAke3Byb3BzLndpZHRofXB4YCA6ICcwJ307XG4gIGJhY2tncm91bmQ6IHdoaXRlO1xuICBib3JkZXItbGVmdDogMXB4IHNvbGlkICNlMmU4ZjA7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHRyYW5zaXRpb246IHdpZHRoIDAuM3MgZWFzZTtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIFxuICBAbWVkaWEgKG1heC13aWR0aDogMTQ0MHB4KSB7XG4gICAgd2lkdGg6ICR7cHJvcHMgPT4gcHJvcHMuaXNPcGVuID8gYCR7TWF0aC5taW4ocHJvcHMud2lkdGgsIDMyMCl9cHhgIDogJzAnfTtcbiAgfVxuICBcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEyODBweCkge1xuICAgIHdpZHRoOiAke3Byb3BzID0+IHByb3BzLmlzT3BlbiA/IGAke01hdGgubWluKHByb3BzLndpZHRoLCAyODApfXB4YCA6ICcwJ307XG4gIH1cbiAgXG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpIHtcbiAgICB3aWR0aDogJHtwcm9wcyA9PiBwcm9wcy5pc09wZW4gPyBgJHtNYXRoLm1pbihwcm9wcy53aWR0aCwgMjUwKX1weGAgOiAnMCd9O1xuICB9XG4gIFxuICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICB3aWR0aDogJHtwcm9wcyA9PiBwcm9wcy5pc09wZW4gPyAnMTAwJScgOiAnMCd9O1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgcmlnaHQ6IDA7XG4gICAgei1pbmRleDogMTAwMDtcbiAgICBib3gtc2hhZG93OiAtNHB4IDAgMTJweCByZ2JhKDAsIDAsIDAsIDAuMSk7XG4gIH1cbmA7XG5cbmNvbnN0IFJlc2l6ZUhhbmRsZSA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgbGVmdDogMDtcbiAgdG9wOiAwO1xuICBib3R0b206IDA7XG4gIHdpZHRoOiA0cHg7XG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICBjdXJzb3I6IGNvbC1yZXNpemU7XG4gIHotaW5kZXg6IDEwO1xuICBcbiAgJjpob3ZlciB7XG4gICAgYmFja2dyb3VuZDogIzNiODJmNjtcbiAgfVxuICBcbiAgJjphY3RpdmUge1xuICAgIGJhY2tncm91bmQ6ICMyNTYzZWI7XG4gIH1cbmA7XG5cbmNvbnN0IERldGFpbEhlYWRlciA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDE2cHggMjBweDtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlNWU3ZWI7XG4gIGJhY2tncm91bmQ6ICNmOWZhZmI7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgaGVpZ2h0OiA1NnB4O1xuICBtaW4taGVpZ2h0OiA1NnB4O1xuICBmbGV4LXNocmluazogMDtcbmA7XG5cbmNvbnN0IERldGFpbEhlYWRlclRpdGxlID0gc3R5bGVkLmgzYFxuICBtYXJnaW46IDA7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgY29sb3I6ICMxMTE4Mjc7XG5gO1xuXG5jb25zdCBDbG9zZUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gIGJhY2tncm91bmQ6IG5vbmU7XG4gIGJvcmRlcjogbm9uZTtcbiAgZm9udC1zaXplOiAxOHB4O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGNvbG9yOiAjNmI3MjgwO1xuICBwYWRkaW5nOiA0cHg7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgXG4gICY6aG92ZXIge1xuICAgIGJhY2tncm91bmQ6ICNmM2Y0ZjY7XG4gICAgY29sb3I6ICMzNzQxNTE7XG4gIH1cbmA7XG5cbmNvbnN0IERldGFpbENvbnRlbnQgPSBzdHlsZWQuZGl2YFxuICBmbGV4OiAxO1xuICBwYWRkaW5nOiAyNHB4O1xuICBvdmVyZmxvdy15OiBhdXRvO1xuICBvdmVyZmxvdy14OiBoaWRkZW47XG4gIGhlaWdodDogMDtcbiAgbWluLWhlaWdodDogMDtcbmA7XG5cbi8vIOyLrO2UjO2VnCDsmKTrsoTrt7Ag7Iqk7YOA7J2865OcIOy7tO2PrOuEjO2KuOuTpFxuY29uc3QgU2ltcGxlSGVhZGVyID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgcGFkZGluZy1ib3R0b206IDEycHg7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZTVlN2ViO1xuYDtcblxuY29uc3QgU2ltcGxlVGl0bGUgPSBzdHlsZWQuaDJgXG4gIG1hcmdpbjogMDtcbiAgZm9udC1zaXplOiAxOHB4O1xuICBmb250LXdlaWdodDogNjAwO1xuICBjb2xvcjogIzFlMjkzYjtcbiAgbGluZS1oZWlnaHQ6IDEuNDtcbiAgZmxleDogMTtcbmA7XG5cbmNvbnN0IFNpbXBsZVN0YXR1cyA9IHN0eWxlZC5zcGFuPHsgc3RhdHVzOiBzdHJpbmcgfT5gXG4gIHBhZGRpbmc6IDRweCA4cHg7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgZm9udC1zaXplOiAxMnB4O1xuICBmb250LXdlaWdodDogNTAwO1xuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgXG4gIGJhY2tncm91bmQ6ICR7cHJvcHMgPT4ge1xuICAgIHN3aXRjaCAocHJvcHMuc3RhdHVzKSB7XG4gICAgICBjYXNlICdQYXNzJzogcmV0dXJuICcjZGNmY2U3JztcbiAgICAgIGNhc2UgJ0ZhaWwnOiByZXR1cm4gJyNmZWUyZTInO1xuICAgICAgY2FzZSAnQmxvY2snOiByZXR1cm4gJyNmZWYzYzcnO1xuICAgICAgY2FzZSAnU2tpcCc6IHJldHVybiAnI2YzZThmZic7XG4gICAgICBjYXNlICdBY3RpdmUnOiByZXR1cm4gJyNkYmVhZmUnO1xuICAgICAgY2FzZSAnSW5hY3RpdmUnOiByZXR1cm4gJyNmMWY1ZjknO1xuICAgICAgZGVmYXVsdDogcmV0dXJuICcjZjFmNWY5JztcbiAgICB9XG4gIH19O1xuICBcbiAgY29sb3I6ICR7cHJvcHMgPT4ge1xuICAgIHN3aXRjaCAocHJvcHMuc3RhdHVzKSB7XG4gICAgICBjYXNlICdQYXNzJzogcmV0dXJuICcjMTY2NTM0JztcbiAgICAgIGNhc2UgJ0ZhaWwnOiByZXR1cm4gJyNkYzI2MjYnO1xuICAgICAgY2FzZSAnQmxvY2snOiByZXR1cm4gJyNkOTc3MDYnO1xuICAgICAgY2FzZSAnU2tpcCc6IHJldHVybiAnIzdjM2FlZCc7XG4gICAgICBjYXNlICdBY3RpdmUnOiByZXR1cm4gJyMyNTYzZWInO1xuICAgICAgY2FzZSAnSW5hY3RpdmUnOiByZXR1cm4gJyM2NDc0OGInO1xuICAgICAgZGVmYXVsdDogcmV0dXJuICcjNjQ3NDhiJztcbiAgICB9XG4gIH19O1xuYDtcblxuY29uc3QgU2ltcGxlSW5mbyA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGdhcDogMjBweDtcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgcGFkZGluZzogMTJweDtcbiAgYmFja2dyb3VuZDogI2Y5ZmFmYjtcbiAgYm9yZGVyLXJhZGl1czogNnB4O1xuYDtcblxuY29uc3QgU2ltcGxlSW5mb0l0ZW0gPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBnYXA6IDRweDtcbmA7XG5cbmNvbnN0IFNpbXBsZUxhYmVsID0gc3R5bGVkLnNwYW5gXG4gIGZvbnQtc2l6ZTogMTNweDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgY29sb3I6ICM2NDc0OGI7XG5gO1xuXG5jb25zdCBTaW1wbGVWYWx1ZSA9IHN0eWxlZC5zcGFuPHsgcHJpb3JpdHk/OiBzdHJpbmcgfT5gXG4gIGZvbnQtc2l6ZTogMTNweDtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgY29sb3I6ICMxZTI5M2I7XG4gIFxuICAke3Byb3BzID0+IHByb3BzLnByaW9yaXR5ICYmIGBcbiAgICBjb2xvcjogJHtwcm9wcy5wcmlvcml0eSA9PT0gJ0hpZ2gnID8gJyNkYzI2MjYnIDogXG4gICAgICAgICAgICBwcm9wcy5wcmlvcml0eSA9PT0gJ01lZGl1bScgPyAnI2Q5NzcwNicgOiBcbiAgICAgICAgICAgIHByb3BzLnByaW9yaXR5ID09PSAnTG93JyA/ICcjMDU5NjY5JyA6ICcjMWUyOTNiJ307XG4gIGB9XG5gO1xuXG5jb25zdCBTaW1wbGVTZWN0aW9uID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbmA7XG5cbmNvbnN0IFNpbXBsZVRleHQgPSBzdHlsZWQuZGl2YFxuICBmb250LXNpemU6IDE0cHg7XG4gIGxpbmUtaGVpZ2h0OiAxLjU7XG4gIGNvbG9yOiAjNGI1NTYzO1xuICBtYXJnaW4tdG9wOiA0cHg7XG4gIHBhZGRpbmc6IDhweCAwO1xuYDtcblxuY29uc3QgU2ltcGxlU3RlcHMgPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tdG9wOiA0cHg7XG5gO1xuXG5jb25zdCBTaW1wbGVTdGVwID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZ2FwOiA4cHg7XG4gIG1hcmdpbi1ib3R0b206IDhweDtcbiAgcGFkZGluZzogNHB4IDA7XG5gO1xuXG5jb25zdCBTaW1wbGVTdGVwTnVtYmVyID0gc3R5bGVkLnNwYW5gXG4gIGZvbnQtc2l6ZTogMTNweDtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgY29sb3I6ICMzYjgyZjY7XG4gIG1pbi13aWR0aDogMjBweDtcbmA7XG5cbmNvbnN0IFNpbXBsZVN0ZXBUZXh0ID0gc3R5bGVkLnNwYW5gXG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgbGluZS1oZWlnaHQ6IDEuNDtcbiAgY29sb3I6ICM0YjU1NjM7XG5gO1xuXG5jb25zdCBEZXRhaWxTZWN0aW9uID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLWJvdHRvbTogMjRweDtcbmA7XG5cbmNvbnN0IERldGFpbFRpdGxlID0gc3R5bGVkLmg0YFxuICBtYXJnaW46IDAgMCAxMnB4IDA7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgY29sb3I6ICMxZTI5M2I7XG5gO1xuXG5jb25zdCBEZXRhaWxUZXh0ID0gc3R5bGVkLnBgXG4gIG1hcmdpbjogMCAwIDhweCAwO1xuICBmb250LXNpemU6IDE0cHg7XG4gIGNvbG9yOiAjMzc0MTUxO1xuICBsaW5lLWhlaWdodDogMS41O1xuYDtcblxuY29uc3QgU3RhdHVzQ2hhbmdlRm9ybSA9IHN0eWxlZC5kaXZgXG4gIG1hcmdpbi10b3A6IDE2cHg7XG5gO1xuXG5jb25zdCBTdGF0dXNSYWRpb0dyb3VwID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgZ2FwOiA4cHg7XG4gIG1hcmdpbi1ib3R0b206IDE2cHg7XG5gO1xuXG5jb25zdCBTdGF0dXNSYWRpbyA9IHN0eWxlZC5sYWJlbGBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZ2FwOiA4cHg7XG4gIHBhZGRpbmc6IDhweCAxMnB4O1xuICBib3JkZXI6IDFweCBzb2xpZCAjZDFkNWRiO1xuICBib3JkZXItcmFkaXVzOiA2cHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgdHJhbnNpdGlvbjogYWxsIDAuMnM7XG4gIFxuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kOiAjZjhmYWZjO1xuICB9XG4gIFxuICBpbnB1dFt0eXBlPVwicmFkaW9cIl06Y2hlY2tlZCArICYge1xuICAgIGJhY2tncm91bmQ6ICNlZmY2ZmY7XG4gICAgYm9yZGVyLWNvbG9yOiAjM2I4MmY2O1xuICB9XG5gO1xuXG5jb25zdCBDb21tZW50VGV4dGFyZWEgPSBzdHlsZWQudGV4dGFyZWFgXG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiAxMnB4O1xuICBib3JkZXI6IDFweCBzb2xpZCAjZDFkNWRiO1xuICBib3JkZXItcmFkaXVzOiA2cHg7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgcmVzaXplOiB2ZXJ0aWNhbDtcbiAgbWluLWhlaWdodDogODBweDtcbiAgXG4gICY6Zm9jdXMge1xuICAgIG91dGxpbmU6IG5vbmU7XG4gICAgYm9yZGVyLWNvbG9yOiAjM2I4MmY2O1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDNweCByZ2JhKDU5LCAxMzAsIDI0NiwgMC4xKTtcbiAgfVxuYDtcblxuY29uc3QgU2F2ZUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiAxMnB4O1xuICBiYWNrZ3JvdW5kOiAjM2I4MmY2O1xuICBjb2xvcjogd2hpdGU7XG4gIGJvcmRlcjogbm9uZTtcbiAgYm9yZGVyLXJhZGl1czogNnB4O1xuICBmb250LXNpemU6IDE0cHg7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgdHJhbnNpdGlvbjogYmFja2dyb3VuZCAwLjJzO1xuICBcbiAgJjpob3ZlciB7XG4gICAgYmFja2dyb3VuZDogIzI1NjNlYjtcbiAgfVxuYDtcblxuY29uc3QgSGlzdG9yeUxpc3QgPSBzdHlsZWQuZGl2YFxuICBtYXgtaGVpZ2h0OiAyMDBweDtcbiAgb3ZlcmZsb3cteTogYXV0bztcbmA7XG5cbmNvbnN0IEhpc3RvcnlJdGVtID0gc3R5bGVkLmRpdmBcbiAgcGFkZGluZzogOHB4IDA7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZjFmNWY5O1xuICBcbiAgJjpsYXN0LWNoaWxkIHtcbiAgICBib3JkZXItYm90dG9tOiBub25lO1xuICB9XG5gO1xuXG5jb25zdCBIaXN0b3J5TWV0YSA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgZm9udC1zaXplOiAxMnB4O1xuICBjb2xvcjogIzY0NzQ4YjtcbiAgbWFyZ2luLWJvdHRvbTogNHB4O1xuYDtcblxuY29uc3QgSGlzdG9yeUNoYW5nZSA9IHN0eWxlZC5kaXZgXG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgY29sb3I6ICMxZTI5M2I7XG5gO1xuXG5jb25zdCBFeGVjdXRpb25WaWV3OiBSZWFjdC5GQzxFeGVjdXRpb25WaWV3UHJvcHM+ID0gKHsgcmVsZWFzZSwgdGVzdENhc2VzID0gW10sIG9uVGVzdENhc2VVcGRhdGUsIG9uQnVsa1VwZGF0ZSwgb25BZGRUZXN0Q2FzZXMsIG9uVGVzdENhc2VzTG9hZCB9KSA9PiB7XG4gIGNvbnN0IFtzZWxlY3RlZFRlc3RDYXNlLCBzZXRTZWxlY3RlZFRlc3RDYXNlXSA9IHVzZVN0YXRlPFRlc3RDYXNlIHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IFtzZWxlY3RlZFRlc3RDYXNlcywgc2V0U2VsZWN0ZWRUZXN0Q2FzZXNdID0gdXNlU3RhdGU8c3RyaW5nW10+KFtdKTtcbiAgY29uc3QgW2ZpbHRlcnMsIHNldEZpbHRlcnNdID0gdXNlU3RhdGUoe1xuICAgIHN0YXR1czogJycsXG4gICAgcHJpb3JpdHk6ICcnLFxuICAgIHN1aXRlOiAnJyxcbiAgICBhc3NpZ25lZTogJycsXG4gICAgc2VhcmNoOiAnJ1xuICB9KTtcbiAgY29uc3QgW2lzTGl2ZSwgc2V0SXNMaXZlXSA9IHVzZVN0YXRlKHRydWUpO1xuICBjb25zdCBbb3BlbkRyb3Bkb3ducywgc2V0T3BlbkRyb3Bkb3duc10gPSB1c2VTdGF0ZTxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oe30pO1xuICBjb25zdCBbZHJvcGRvd25Qb3NpdGlvbnMsIHNldERyb3Bkb3duUG9zaXRpb25zXSA9IHVzZVN0YXRlPFJlY29yZDxzdHJpbmcsICd0b3AnIHwgJ2JvdHRvbSc+Pih7fSk7XG4gIGNvbnN0IFtkcm9wZG93blJlY3RzLCBzZXREcm9wZG93blJlY3RzXSA9IHVzZVN0YXRlPFJlY29yZDxzdHJpbmcsIERPTVJlY3Q+Pih7fSk7XG4gIGNvbnN0IFtjdXJyZW50Q29tbWVudCwgc2V0Q3VycmVudENvbW1lbnRdID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCBbbG9jYWxUZXN0Q2FzZXMsIHNldExvY2FsVGVzdENhc2VzXSA9IHVzZVN0YXRlPGFueVtdPihbXSk7XG4gIFxuICAvLyDtj7TrjZQg6rCA7KC47Jik6riwIOq0gOugqCDsg4Htg5xcbiAgY29uc3QgW3Nob3dUZXN0Q2FzZU1vZGFsLCBzZXRTaG93VGVzdENhc2VNb2RhbF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtzZWxlY3RlZFRlc3RDYXNlc1RvQWRkLCBzZXRTZWxlY3RlZFRlc3RDYXNlc1RvQWRkXSA9IHVzZVN0YXRlPHN0cmluZ1tdPihbXSk7XG4gIGNvbnN0IFtpc0xvYWRpbmdUZXN0Q2FzZXMsIHNldElzTG9hZGluZ1Rlc3RDYXNlc10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtpc0NvbGxhcHNlZCwgc2V0SXNDb2xsYXBzZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbc2VsZWN0ZWRJbXBvcnRlZEZvbGRlciwgc2V0U2VsZWN0ZWRJbXBvcnRlZEZvbGRlcl0gPSB1c2VTdGF0ZTxhbnk+KG51bGwpO1xuICBjb25zdCBbZm9sZGVyVGVzdENhc2VzLCBzZXRGb2xkZXJUZXN0Q2FzZXNdID0gdXNlU3RhdGU8YW55W10+KFtdKTtcbiAgY29uc3QgW2ltcG9ydGVkRm9sZGVycywgc2V0SW1wb3J0ZWRGb2xkZXJzXSA9IHVzZVN0YXRlPGFueVtdPihbXSk7XG4gIGNvbnN0IFtkZXRhaWxQYW5lbFdpZHRoLCBzZXREZXRhaWxQYW5lbFdpZHRoXSA9IHVzZVN0YXRlKDM1MCk7IC8vIDQwMCDihpIgMzUw7Jy866GcIOy2leyGjFxuICBjb25zdCBbaXNSZXNpemluZywgc2V0SXNSZXNpemluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtsZWZ0UGFuZWxXaWR0aCwgc2V0TGVmdFBhbmVsV2lkdGhdID0gdXNlU3RhdGUoMjQwKTsgLy8gMjgwIOKGkiAyNDDsnLzroZwg7LaV7IaMXG4gIGNvbnN0IFtpc0xlZnRQYW5lbFJlc2l6aW5nLCBzZXRJc0xlZnRQYW5lbFJlc2l6aW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICAvLyBBUEkg7Zi47LacIC0g7J6Q64+Z7Jy866GcIO2FjOyKpO2KuOy8gOydtOyKpCDsobDtmoxcbiAgY29uc3QgeyBkYXRhOiBhcGlUZXN0Q2FzZXNSZXNwb25zZSA9IFtdLCBpc0xvYWRpbmcsIGVycm9yLCByZWZldGNoIH0gPSB1c2VHZXRSZWxlYXNlVGVzdENhc2VzUXVlcnkocmVsZWFzZS5pZCBhcyBhbnksIHtcbiAgICBwb2xsaW5nSW50ZXJ2YWw6IDUwMDAsIC8vIDXstIjrp4jri6Qg7J6Q64+ZIOqwseyLoFxuICB9KTtcbiAgXG4gIC8vIEFQSSDsnZHri7Ug65SU67KE6rmFXG4gIGNvbnNvbGUubG9nKCc9PT0gQVBJIOydkeuLtSDrlJTrsoTquYUgPT09Jyk7XG4gIGNvbnNvbGUubG9nKCdSZWxlYXNlIElEOicsIHJlbGVhc2UuaWQpO1xuICBjb25zb2xlLmxvZygnQVBJIOuNsOydtO2EsDonLCBhcGlUZXN0Q2FzZXNSZXNwb25zZSk7XG4gIGNvbnNvbGUubG9nKCdBUEkg66Gc65SpIOyDge2DnDonLCBpc0xvYWRpbmcpO1xuICBjb25zb2xlLmxvZygnQVBJIOyXkOufrDonLCBlcnJvcik7XG4gIGNvbnNvbGUubG9nKCdBUEkg642w7J207YSwIO2DgOyehTonLCB0eXBlb2YgYXBpVGVzdENhc2VzUmVzcG9uc2UpO1xuICBjb25zb2xlLmxvZygnQVBJIOuNsOydtO2EsCDrsLDsl7Qg7Jes67aAOicsIEFycmF5LmlzQXJyYXkoYXBpVGVzdENhc2VzUmVzcG9uc2UpKTtcbiAgY29uc29sZS5sb2coJ0FQSSDrjbDsnbTthLAg67Cw7Je0IOyXrOu2gDonLCBBcnJheS5pc0FycmF5KGFwaVRlc3RDYXNlc1Jlc3BvbnNlKSk7XG4gIGlmIChBcnJheS5pc0FycmF5KGFwaVRlc3RDYXNlc1Jlc3BvbnNlKSkge1xuICAgIGNvbnNvbGUubG9nKCdBUEkg642w7J207YSwIOq4uOydtDonLCBhcGlUZXN0Q2FzZXNSZXNwb25zZS5sZW5ndGgpO1xuICAgIGNvbnNvbGUubG9nKCfssqsg67KI7Ke4IOyVhOydtO2FnDonLCBhcGlUZXN0Q2FzZXNSZXNwb25zZVswXSk7XG4gIH1cbiAgY29uc3QgW3VwZGF0ZUV4ZWN1dGlvblN0YXRzXSA9IHVzZVVwZGF0ZVJlbGVhc2VFeGVjdXRpb25TdGF0c011dGF0aW9uKCk7XG4gIFxuICAvLyDsi6Ttlokg7Ya16rOEIOuNsOydtO2EsCDqsIDsoLjsmKTquLAgLSDsi6Tsi5zqsIQg7JeF642w7J207Yq4XG4gIGNvbnN0IHsgZGF0YTogZXhlY3V0aW9uU3RhdHMsIGlzTG9hZGluZzogc3RhdHNMb2FkaW5nLCBlcnJvcjogc3RhdHNFcnJvciwgcmVmZXRjaDogcmVmZXRjaFN0YXRzIH0gPSB1c2VHZXRSZWxlYXNlRXhlY3V0aW9uU3RhdHNRdWVyeShcbiAgICByZWxlYXNlLmlkLFxuICAgIHtcbiAgICAgIHBvbGxpbmdJbnRlcnZhbDogNTAwMCwgLy8gNey0iOuniOuLpCDsnpDrj5kg6rCx7IugXG4gICAgfVxuICApO1xuICBcbiAgLy8g7Y+0642UIOuNsOydtO2EsCDqsIDsoLjsmKTquLBcbiAgY29uc3QgeyBkYXRhOiBmb2xkZXJzID0gW10gfSA9IHVzZUdldFRlc3RGb2xkZXJzUXVlcnkoKTtcbiAgXG4gIC8vIOqwgOyguOyYqCDtj7TrjZQg642w7J207YSwIOqwgOyguOyYpOq4sCAoRELsl5DshJwpXG4gIGNvbnN0IHsgZGF0YTogZGJJbXBvcnRlZEZvbGRlcnMgPSBbXSwgcmVmZXRjaDogcmVmZXRjaEltcG9ydGVkRm9sZGVycyB9ID0gdXNlR2V0SW1wb3J0ZWRGb2xkZXJzUXVlcnkocmVsZWFzZS5pZCk7XG4gIGNvbnN0IFthZGRJbXBvcnRlZEZvbGRlcnNdID0gdXNlQWRkSW1wb3J0ZWRGb2xkZXJzTXV0YXRpb24oKTtcbiAgY29uc3QgW3JlbW92ZUltcG9ydGVkRm9sZGVyXSA9IHVzZVJlbW92ZUltcG9ydGVkRm9sZGVyTXV0YXRpb24oKTtcbiAgXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGJJbXBvcnRlZEZvbGRlcnMpKSB7XG4gICAgICAgc2V0SW1wb3J0ZWRGb2xkZXJzKGRiSW1wb3J0ZWRGb2xkZXJzLm1hcChmb2xkZXIgPT4gKHtcbiAgICAgICAgIGlkOiBmb2xkZXIuZm9sZGVySWQsXG4gICAgICAgICBuYW1lOiBmb2xkZXIubmFtZSxcbiAgICAgICAgIHBhcmVudElkOiBmb2xkZXIucGFyZW50SWQsXG4gICAgICAgICB0ZXN0Q2FzZUNvdW50OiBmb2xkZXIudGVzdENhc2VDb3VudCxcbiAgICAgICAgIGNoaWxkcmVuOiBbXVxuICAgICAgIH0pKSk7XG4gICAgIH0gZWxzZSB7XG4gICAgICAgc2V0SW1wb3J0ZWRGb2xkZXJzKFtdKTtcbiAgICAgfVxuICB9LCBbZGJJbXBvcnRlZEZvbGRlcnNdKTtcbiAgXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgdG90YWxUZXN0Q2FzZXNGcm9tRm9sZGVycyA9IGltcG9ydGVkRm9sZGVycy5yZWR1Y2UoKHRvdGFsLCBmb2xkZXIpID0+IHtcbiAgICAgIHJldHVybiB0b3RhbCArIChmb2xkZXIudGVzdENhc2VDb3VudCB8fCAwKTtcbiAgICB9LCAwKTtcbiAgICBcbiAgICBjb25zdCBjdXJyZW50UGxhbm5lZENvdW50ID0gZXhlY3V0aW9uU3RhdHM/LmRhdGE/LnBsYW5uZWQgfHwgMDtcbiAgICBcbiAgICAvLyDqsIDsoLjsmKgg7Y+0642U6rCAIOyeiOuKlCDqsr3smrDsl5Drp4wg7JeF642w7J207Yq4XG4gICAgaWYgKHRvdGFsVGVzdENhc2VzRnJvbUZvbGRlcnMgIT09IGN1cnJlbnRQbGFubmVkQ291bnQpIHtcbiAgICAgIGNvbnNvbGUubG9nKGBwbGFubmVkQ291bnQg7JeF642w7J207Yq4OiAke2N1cnJlbnRQbGFubmVkQ291bnR9IC0+ICR7dG90YWxUZXN0Q2FzZXNGcm9tRm9sZGVyc31gKTtcbiAgICAgIHVwZGF0ZUV4ZWN1dGlvblN0YXRzKHtcbiAgICAgICAgcmVsZWFzZUlkOiByZWxlYXNlLmlkLFxuICAgICAgICBwbGFubmVkQ291bnQ6IHRvdGFsVGVzdENhc2VzRnJvbUZvbGRlcnNcbiAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygncGxhbm5lZENvdW50IOyXheuNsOydtO2KuCDsmYTro4wnKTtcbiAgICAgICAgcmVmZXRjaFN0YXRzKCk7XG4gICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ3BsYW5uZWRDb3VudCDsl4XrjbDsnbTtirgg7Iuk7YyoOicsIGVycm9yKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2ltcG9ydGVkRm9sZGVycywgZXhlY3V0aW9uU3RhdHMsIHJlbGVhc2UuaWQsIHVwZGF0ZUV4ZWN1dGlvblN0YXRzLCByZWZldGNoU3RhdHNdKTtcblxuICAvLyDsmrDsuKEg7Yyo64SQIO2BrOq4sCDsobDsoIgg7J2067Kk7Yq4IO2VuOuTpOufrFxuICBjb25zdCBoYW5kbGVEZXRhaWxQYW5lbFJlc2l6ZVN0YXJ0ID0gKGU6IFJlYWN0Lk1vdXNlRXZlbnQpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgc2V0SXNSZXNpemluZyh0cnVlKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVEZXRhaWxQYW5lbFJlc2l6ZU1vdmUgPSB1c2VDYWxsYmFjaygoZTogTW91c2VFdmVudCkgPT4ge1xuICAgIGlmICghaXNSZXNpemluZykgcmV0dXJuO1xuICAgIFxuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5leGVjdXRpb24tY29udGFpbmVyJyk7XG4gICAgaWYgKCFjb250YWluZXIpIHJldHVybjtcbiAgICBcbiAgICBjb25zdCBjb250YWluZXJSZWN0ID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IG5ld1dpZHRoID0gY29udGFpbmVyUmVjdC5yaWdodCAtIGUuY2xpZW50WDtcbiAgICBcbiAgICAvLyDstZzshowv7LWc64yAIOuEiOu5hCDsoJztlZxcbiAgICBpZiAobmV3V2lkdGggPj0gMzAwICYmIG5ld1dpZHRoIDw9IDgwMCkge1xuICAgICAgc2V0RGV0YWlsUGFuZWxXaWR0aChuZXdXaWR0aCk7XG4gICAgfVxuICB9LCBbaXNSZXNpemluZ10pO1xuXG4gIGNvbnN0IGhhbmRsZURldGFpbFBhbmVsUmVzaXplRW5kID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldElzUmVzaXppbmcoZmFsc2UpO1xuICB9LCBbXSk7XG5cbiAgLy8g7KKM7LihIO2MqOuEkCDtgazquLAg7KGw7KCIIOydtOuypO2KuCDtlbjrk6Trn6xcbiAgY29uc3QgaGFuZGxlTGVmdFBhbmVsUmVzaXplU3RhcnQgPSAoZTogUmVhY3QuTW91c2VFdmVudCkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBzZXRJc0xlZnRQYW5lbFJlc2l6aW5nKHRydWUpO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUxlZnRQYW5lbFJlc2l6ZU1vdmUgPSB1c2VDYWxsYmFjaygoZTogTW91c2VFdmVudCkgPT4ge1xuICAgIGlmICghaXNMZWZ0UGFuZWxSZXNpemluZykgcmV0dXJuO1xuICAgIFxuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5leGVjdXRpb24tY29udGFpbmVyJyk7XG4gICAgaWYgKCFjb250YWluZXIpIHJldHVybjtcbiAgICBcbiAgICBjb25zdCBjb250YWluZXJSZWN0ID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IG5ld1dpZHRoID0gZS5jbGllbnRYIC0gY29udGFpbmVyUmVjdC5sZWZ0O1xuICAgIFxuICAgIC8vIOy1nOyGjCAyMDBweCwg7LWc64yAIDUwMHB466GcIOygnO2VnFxuICAgIGNvbnN0IGNsYW1wZWRXaWR0aCA9IE1hdGgubWF4KDIwMCwgTWF0aC5taW4oNTAwLCBuZXdXaWR0aCkpO1xuICAgIHNldExlZnRQYW5lbFdpZHRoKGNsYW1wZWRXaWR0aCk7XG4gIH0sIFtpc0xlZnRQYW5lbFJlc2l6aW5nXSk7XG5cbiAgY29uc3QgaGFuZGxlTGVmdFBhbmVsUmVzaXplRW5kID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldElzTGVmdFBhbmVsUmVzaXppbmcoZmFsc2UpO1xuICB9LCBbXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoaXNSZXNpemluZykge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgaGFuZGxlRGV0YWlsUGFuZWxSZXNpemVNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBoYW5kbGVEZXRhaWxQYW5lbFJlc2l6ZUVuZCk7XG4gICAgICBcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGhhbmRsZURldGFpbFBhbmVsUmVzaXplTW92ZSk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBoYW5kbGVEZXRhaWxQYW5lbFJlc2l6ZUVuZCk7XG4gICAgICB9O1xuICAgIH1cbiAgfSwgW2lzUmVzaXppbmcsIGhhbmRsZURldGFpbFBhbmVsUmVzaXplTW92ZSwgaGFuZGxlRGV0YWlsUGFuZWxSZXNpemVFbmRdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChpc0xlZnRQYW5lbFJlc2l6aW5nKSB7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBoYW5kbGVMZWZ0UGFuZWxSZXNpemVNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBoYW5kbGVMZWZ0UGFuZWxSZXNpemVFbmQpO1xuICAgICAgXG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBoYW5kbGVMZWZ0UGFuZWxSZXNpemVNb3ZlKTtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGhhbmRsZUxlZnRQYW5lbFJlc2l6ZUVuZCk7XG4gICAgICB9O1xuICAgIH1cbiAgfSwgW2lzTGVmdFBhbmVsUmVzaXppbmcsIGhhbmRsZUxlZnRQYW5lbFJlc2l6ZU1vdmUsIGhhbmRsZUxlZnRQYW5lbFJlc2l6ZUVuZF0pO1xuXG4gIC8vIOynhO2WieuloCDqs4TsgrAgLSDsi6TsoJwgQVBJIOuNsOydtO2EsCDsgqzsmqlcbiAgY29uc3QgdG90YWxUZXN0Q2FzZXMgPSBleGVjdXRpb25TdGF0cz8uZGF0YT8ucGxhbm5lZCB8fCAwO1xuICBjb25zdCBleGVjdXRlZFRlc3RDYXNlcyA9IGV4ZWN1dGlvblN0YXRzPy5kYXRhPy5leGVjdXRlZCB8fCAwO1xuICBjb25zdCBwYXNzZWRUZXN0Q2FzZXMgPSBleGVjdXRpb25TdGF0cz8uZGF0YT8ucGFzc2VkIHx8IDA7XG4gIGNvbnN0IGZhaWxlZFRlc3RDYXNlcyA9IGV4ZWN1dGlvblN0YXRzPy5kYXRhPy5mYWlsZWQgfHwgMDtcbiAgY29uc3QgYmxvY2tlZFRlc3RDYXNlcyA9IGV4ZWN1dGlvblN0YXRzPy5kYXRhPy5ibG9ja2VkIHx8IDA7XG4gIGNvbnN0IHNraXBwZWRUZXN0Q2FzZXMgPSBleGVjdXRpb25TdGF0cz8uZGF0YT8uc2tpcHBlZCB8fCAwO1xuICBjb25zdCBub3RSdW5UZXN0Q2FzZXMgPSB0b3RhbFRlc3RDYXNlcyAtIGV4ZWN1dGVkVGVzdENhc2VzO1xuXG4gIGNvbnN0IHByb2dyZXNzUGVyY2VudGFnZSA9IGV4ZWN1dGlvblN0YXRzPy5kYXRhPy5wYXNzUmF0ZSB8fCAwO1xuXG4gIC8vIEFQSeyXkOyEnCDqsIDsoLjsmKgg7YWM7Iqk7Yq47LyA7J207IqkIOyCrOyaqSAtIEFQSSDsnZHri7Ug6rWs7KGw7JeQIOunnuqyjCDsspjrpqxcbiAgY29uc3QgYXBpVGVzdENhc2VzQXJyYXkgPSBBcnJheS5pc0FycmF5KGFwaVRlc3RDYXNlc1Jlc3BvbnNlKSA/IGFwaVRlc3RDYXNlc1Jlc3BvbnNlIDogW107XG4gIFxuICAvLyDroZzsu6wg7Iqk7Yag66as7KeAIO2CpFxuICBjb25zdCBMT0NBTF9TVE9SQUdFX0tFWSA9IGB0ZXN0Q2FzZXNfcmVsZWFzZV8ke3JlbGVhc2UuaWR9YDtcbiAgXG4gIC8vIOuhnOy7rCDsiqTthqDrpqzsp4Dsl5DshJwg7KCA7J6l65CcIO2FjOyKpO2KuOy8gOydtOyKpCDrtojrn6zsmKTquLBcbiAgY29uc3QgZ2V0U3RvcmVkVGVzdENhc2VzID0gKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBzdG9yZWQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShMT0NBTF9TVE9SQUdFX0tFWSk7XG4gICAgICByZXR1cm4gc3RvcmVkID8gSlNPTi5wYXJzZShzdG9yZWQpIDogbnVsbDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcign66Gc7LusIOyKpO2GoOumrOyngOyXkOyEnCDthYzsiqTtirjsvIDsnbTsiqQg67aI65+s7Jik6riwIOyLpO2MqDonLCBlcnJvcik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH07XG4gIFxuICAvLyDroZzsu6wg7Iqk7Yag66as7KeA7JeQIO2FjOyKpO2KuOy8gOydtOyKpCDsoIDsnqXtlZjquLBcbiAgY29uc3Qgc2F2ZVRlc3RDYXNlc1RvU3RvcmFnZSA9ICh0ZXN0Q2FzZXM6IGFueVtdKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKExPQ0FMX1NUT1JBR0VfS0VZLCBKU09OLnN0cmluZ2lmeSh0ZXN0Q2FzZXMpKTtcbiAgICAgIGNvbnNvbGUubG9nKCfthYzsiqTtirjsvIDsnbTsiqTrpbwg66Gc7LusIOyKpO2GoOumrOyngOyXkCDsoIDsnqXtlojsirXri4jri6Q6JywgdGVzdENhc2VzLmxlbmd0aCwgJ+qwnCcpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfroZzsu6wg7Iqk7Yag66as7KeA7JeQIO2FjOyKpO2KuOy8gOydtOyKpCDsoIDsnqUg7Iuk7YyoOicsIGVycm9yKTtcbiAgICB9XG4gIH07XG5cbiAgLy8g66Gc7LusIOyKpO2GoOumrOyngOyXkOyEnCDsoIDsnqXrkJwg7YWM7Iqk7Yq47LyA7J207Iqk66eMIOyCrOyaqSAo642U66+4IOuNsOydtO2EsCDsoJzqsbApXG4gIGNvbnN0IHN0b3JlZFRlc3RDYXNlcyA9IGdldFN0b3JlZFRlc3RDYXNlcygpO1xuICBcbiAgLy8g642U66+4IOuNsOydtO2EsOqwgCDsoIDsnqXrkJjslrQg7J6I7Jy866m0IOyCreygnCAo7ZWcIOuyiOunjCDsi6TtlokpXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHN0b3JlZFRlc3RDYXNlcyAmJiBzdG9yZWRUZXN0Q2FzZXMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgaXNEdW1teURhdGEgPSBzdG9yZWRUZXN0Q2FzZXMuc29tZSgodGVzdENhc2U6IGFueSkgPT4gXG4gICAgICAgIHRlc3RDYXNlLmlkID09PSAnODEnIHx8IHRlc3RDYXNlLmlkID09PSAnODInIHx8IFxuICAgICAgICB0ZXN0Q2FzZS5uYW1lID09PSAnVGVzdCBDYXNlIDEnIHx8IHRlc3RDYXNlLm5hbWUgPT09ICdUZXN0IENhc2UgMidcbiAgICAgICk7XG4gICAgICBpZiAoaXNEdW1teURhdGEpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ+uNlOuvuCDrjbDsnbTthLAg6rCQ7KeALCDroZzsu6wg7Iqk7Yag66as7KeAIOygleumrCDspJEuLi4nKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oTE9DQUxfU1RPUkFHRV9LRVkpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW0xPQ0FMX1NUT1JBR0VfS0VZLCBzdG9yZWRUZXN0Q2FzZXNdKTtcbiAgXG4gIC8vIOuNlOuvuCDrjbDsnbTthLAg7JmE7KCEIOygnOqxsCAtIEFQSSDrjbDsnbTthLAg65iQ64qUIOyggOyepeuQnCDrjbDsnbTthLDrp4wg7IKs7JqpXG4gIGNvbnN0IGR1bW15VGVzdENhc2VzID0gW107XG4gIFxuICAvLyDrjbDsnbTthLAg7Jqw7ISg7Iic7JyEOiAxKSDrtoDrqqggcHJvcHMsIDIpIOyggOyepeuQnCDrjbDsnbTthLAsIDMpIEFQSSDrjbDsnbTthLBcbiAgY29uc3QgYWxsVGVzdENhc2VzID0gdGVzdENhc2VzLmxlbmd0aCA+IDAgPyB0ZXN0Q2FzZXMgOiAoc3RvcmVkVGVzdENhc2VzICYmIHN0b3JlZFRlc3RDYXNlcy5sZW5ndGggPiAwID8gc3RvcmVkVGVzdENhc2VzIDogYXBpVGVzdENhc2VzQXJyYXkpO1xuICBcbiAgY29uc29sZS5sb2coJz09PSDrjbDsnbTthLAg7IaM7IqkIO2ZleyduCA9PT0nKTtcbiAgY29uc29sZS5sb2coJ1Byb3BzIHRlc3RDYXNlczonLCB0ZXN0Q2FzZXMubGVuZ3RoKTtcbiAgY29uc29sZS5sb2coJ1N0b3JlZCB0ZXN0Q2FzZXM6Jywgc3RvcmVkVGVzdENhc2VzID8gc3RvcmVkVGVzdENhc2VzLmxlbmd0aCA6IDApO1xuICBjb25zb2xlLmxvZygnQVBJIHRlc3RDYXNlczonLCBhcGlUZXN0Q2FzZXNBcnJheS5sZW5ndGgpO1xuICBjb25zb2xlLmxvZygnRmluYWwgYWxsVGVzdENhc2VzOicsIGFsbFRlc3RDYXNlcy5sZW5ndGgpO1xuICBcbiAgLy8gQVBJIOuNsOydtO2EsOqwgCDrs4Dqsr3rkKAg65WMIOuhnOy7rCDsg4Htg5wg7JeF642w7J207Yq4ICjrtoDrqqgg642w7J207YSw6rCAIOyXhuydhCDrlYzrp4wpXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHRlc3RDYXNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGlmIChzdG9yZWRUZXN0Q2FzZXMgJiYgc3RvcmVkVGVzdENhc2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc29sZS5sb2coJ+yggOyepeuQnCDrjbDsnbTthLAg7IKs7JqpLCDrtoDrqqjsl5Dqsowg7KCE64usOicsIHN0b3JlZFRlc3RDYXNlcy5sZW5ndGgsICfqsJwg7YWM7Iqk7Yq47LyA7J207IqkJyk7XG4gICAgICAgIHNldExvY2FsVGVzdENhc2VzKHN0b3JlZFRlc3RDYXNlcyk7XG4gICAgICAgIC8vIOu2gOuqqCDsu7Ttj6zrhIztirjsl5Ag7KCA7J6l65CcIOuNsOydtO2EsCDsoITri6xcbiAgICAgICAgaWYgKG9uVGVzdENhc2VzTG9hZCkge1xuICAgICAgICAgIG9uVGVzdENhc2VzTG9hZChzdG9yZWRUZXN0Q2FzZXMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFwaVRlc3RDYXNlc0FycmF5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0FQSSDrjbDsnbTthLAg7JeF642w7J207Yq4LCDrtoDrqqjsl5Dqsowg7KCE64usOicsIGFwaVRlc3RDYXNlc0FycmF5Lmxlbmd0aCwgJ+qwnCDthYzsiqTtirjsvIDsnbTsiqQnKTtcbiAgICAgICAgc2V0TG9jYWxUZXN0Q2FzZXMoYXBpVGVzdENhc2VzQXJyYXkpO1xuICAgICAgICAvLyDrtoDrqqgg7Lu07Y+s64SM7Yq47JeQIEFQSSDrjbDsnbTthLAg7KCE64usXG4gICAgICAgIGlmIChvblRlc3RDYXNlc0xvYWQpIHtcbiAgICAgICAgICBvblRlc3RDYXNlc0xvYWQoYXBpVGVzdENhc2VzQXJyYXkgYXMgYW55KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGVzdENhc2VzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnNvbGUubG9nKCfrtoDrqqggcHJvcHMg642w7J207YSwIOyCrOyaqTonLCB0ZXN0Q2FzZXMubGVuZ3RoLCAn6rCcIO2FjOyKpO2KuOy8gOydtOyKpCcpO1xuICAgICAgc2V0TG9jYWxUZXN0Q2FzZXModGVzdENhc2VzKTtcbiAgICB9XG4gIH0sIFt0ZXN0Q2FzZXMsIGFwaVRlc3RDYXNlc0FycmF5LCBzdG9yZWRUZXN0Q2FzZXMsIG9uVGVzdENhc2VzTG9hZF0pO1xuICBcbiAgLy8g7Iuk7KCcIOugjOuNlOungeyXkCDsgqzsmqntlaAg7YWM7Iqk7Yq4IOy8gOydtOyKpCAo67aA66qoIHByb3BzIOyasOyEoClcbiAgY29uc3QgZGlzcGxheVRlc3RDYXNlcyA9IHRlc3RDYXNlcy5sZW5ndGggPiAwID8gdGVzdENhc2VzIDogKGxvY2FsVGVzdENhc2VzLmxlbmd0aCA+IDAgPyBsb2NhbFRlc3RDYXNlcyA6IGFsbFRlc3RDYXNlcyk7XG4gIFxuICAvLyDrlJTrsoTquYU6IOugjOuNlOunge2VoCDthYzsiqTtirgg7LyA7J207IqkIOyDge2DnCDtmZXsnbhcbiAgY29uc29sZS5sb2coJ+ugjOuNlOungSDthYzsiqTtirjsvIDsnbTsiqQ6Jywge1xuICAgIHByb3BzVGVzdENhc2VzQ291bnQ6IHRlc3RDYXNlcy5sZW5ndGgsXG4gICAgbG9jYWxUZXN0Q2FzZXNDb3VudDogbG9jYWxUZXN0Q2FzZXMubGVuZ3RoLFxuICAgIGFwaVRlc3RDYXNlc0NvdW50OiBhcGlUZXN0Q2FzZXNBcnJheS5sZW5ndGgsXG4gICAgZGlzcGxheVRlc3RDYXNlc0NvdW50OiBkaXNwbGF5VGVzdENhc2VzLmxlbmd0aCxcbiAgICBmaXJzdFRlc3RDYXNlU3RhdHVzOiBkaXNwbGF5VGVzdENhc2VzWzBdPy5zdGF0dXNcbiAgfSk7XG4gIFxuICAvLyDtlYTthLDrp4HrkJwg7YWM7Iqk7Yq4IOy8gOydtOyKpCAtIOuhnOy7rCDsg4Htg5wg7Jqw7ISgIOyCrOyaqVxuICBjb25zdCBmaWx0ZXJlZFRlc3RDYXNlcyA9IGRpc3BsYXlUZXN0Q2FzZXMuZmlsdGVyKCh0ZXN0Q2FzZTogYW55KSA9PiB7XG4gICAgaWYgKGZpbHRlcnMuc3RhdHVzICYmIHRlc3RDYXNlLnN0YXR1cyAhPT0gZmlsdGVycy5zdGF0dXMpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZmlsdGVycy5wcmlvcml0eSAmJiB0ZXN0Q2FzZS5wcmlvcml0eSAhPT0gZmlsdGVycy5wcmlvcml0eSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChmaWx0ZXJzLnN1aXRlICYmIHRlc3RDYXNlLnN1aXRlICE9PSBmaWx0ZXJzLnN1aXRlKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGZpbHRlcnMuYXNzaWduZWUgJiYgdGVzdENhc2UuYXNzaWduZWUgIT09IGZpbHRlcnMuYXNzaWduZWUpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZmlsdGVycy5zZWFyY2ggJiYgISh0ZXN0Q2FzZS5uYW1lIHx8IHRlc3RDYXNlLnRpdGxlKT8udG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhmaWx0ZXJzLnNlYXJjaC50b0xvd2VyQ2FzZSgpKSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9KTtcblxuICAvLyDthYzsiqTtirgg7LyA7J207IqkIOyEoO2DnSDsspjrpqxcbiAgY29uc3QgaGFuZGxlVGVzdENhc2VTZWxlY3QgPSB1c2VDYWxsYmFjaygodGVzdENhc2VJZDogc3RyaW5nLCBpc1NlbGVjdGVkOiBib29sZWFuKSA9PiB7XG4gICAgaWYgKGlzU2VsZWN0ZWQpIHtcbiAgICAgIHNldFNlbGVjdGVkVGVzdENhc2VzKHByZXYgPT4gWy4uLnByZXYsIHRlc3RDYXNlSWRdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0U2VsZWN0ZWRUZXN0Q2FzZXMocHJldiA9PiBwcmV2LmZpbHRlcihpZCA9PiBpZCAhPT0gdGVzdENhc2VJZCkpO1xuICAgIH1cbiAgfSwgW10pO1xuXG4gIC8vIOyghOyytCDshKDtg50v7ZW07KCcXG4gIGNvbnN0IGhhbmRsZVNlbGVjdEFsbCA9IHVzZUNhbGxiYWNrKChpc1NlbGVjdGVkOiBib29sZWFuKSA9PiB7XG4gICAgaWYgKGlzU2VsZWN0ZWQpIHtcbiAgICAgIHNldFNlbGVjdGVkVGVzdENhc2VzKGZpbHRlcmVkVGVzdENhc2VzLm1hcCgodGM6IGFueSkgPT4gdGMuaWQpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0U2VsZWN0ZWRUZXN0Q2FzZXMoW10pO1xuICAgIH1cbiAgfSwgW2ZpbHRlcmVkVGVzdENhc2VzXSk7XG5cbiAgLy8gQVBJIO2bhSDstpTqsIBcbiAgY29uc3QgW3VwZGF0ZVRlc3RDYXNlU3RhdHVzXSA9IHVzZVVwZGF0ZVRlc3RDYXNlU3RhdHVzTXV0YXRpb24oKTtcblxuICAvLyDrk5zroa3ri6TsmrQg7JyE7LmYIOqzhOyCsCDtlajsiJggLSDsnoTsi5zroZwg7ZWt7IOBIOyVhOuemOyqveycvOuhnCDsl7Trpqzrj4TroZ0g7ISk7KCVXG4gIGNvbnN0IGNhbGN1bGF0ZURyb3Bkb3duUG9zaXRpb24gPSB1c2VDYWxsYmFjaygodGVzdENhc2VJZDogc3RyaW5nLCBidXR0b25FbGVtZW50OiBIVE1MRWxlbWVudCk6ICd0b3AnIHwgJ2JvdHRvbScgPT4ge1xuICAgIC8vIOyehOyLnOuhnCDtla3sg4Eg7JWE656Y7Kq97Jy866GcIOyXtOumrOuPhOuhnSDshKTsoJUgKO2BtOumrSDrrLjsoJwg7ZW06rKw7J2EIOychO2VtClcbiAgICBjb25zb2xlLmxvZygn65Oc66Gt64uk7Jq0IOychOy5mDog7ZWt7IOBIOyVhOuemOyqveycvOuhnCDsl7TrprwgKOyehOyLnCDshKTsoJUpJyk7XG4gICAgcmV0dXJuICdib3R0b20nO1xuICB9LCBbXSk7XG5cbiAgLy8g65Oc66Gt64uk7Jq0IO2GoOq4gCDsspjrpqxcbiAgY29uc3QgdG9nZ2xlRHJvcGRvd24gPSB1c2VDYWxsYmFjaygodGVzdENhc2VJZDogc3RyaW5nLCBidXR0b25FbGVtZW50PzogSFRNTEVsZW1lbnQpID0+IHtcbiAgICBjb25zdCBpc0N1cnJlbnRseU9wZW4gPSBvcGVuRHJvcGRvd25zW3Rlc3RDYXNlSWRdO1xuICAgIFxuICAgIGlmICghaXNDdXJyZW50bHlPcGVuICYmIGJ1dHRvbkVsZW1lbnQpIHtcbiAgICAgIC8vIOuTnOuhreuLpOyatOydhCDsl7Qg65WMIOychOy5mCDqs4TsgrAg67CPIOyggOyepVxuICAgICAgY29uc3QgcmVjdCA9IGJ1dHRvbkVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IGNhbGN1bGF0ZURyb3Bkb3duUG9zaXRpb24odGVzdENhc2VJZCwgYnV0dG9uRWxlbWVudCk7XG4gICAgICBcbiAgICAgIHNldERyb3Bkb3duUmVjdHMocHJldiA9PiAoe1xuICAgICAgICAuLi5wcmV2LFxuICAgICAgICBbdGVzdENhc2VJZF06IHJlY3RcbiAgICAgIH0pKTtcbiAgICAgIFxuICAgICAgc2V0RHJvcGRvd25Qb3NpdGlvbnMocHJldiA9PiAoe1xuICAgICAgICAuLi5wcmV2LFxuICAgICAgICBbdGVzdENhc2VJZF06IHBvc2l0aW9uXG4gICAgICB9KSk7XG4gICAgfVxuICAgIFxuICAgIHNldE9wZW5Ecm9wZG93bnMocHJldiA9PiAoe1xuICAgICAgLi4ucHJldixcbiAgICAgIFt0ZXN0Q2FzZUlkXTogIXByZXZbdGVzdENhc2VJZF1cbiAgICB9KSk7XG4gIH0sIFtvcGVuRHJvcGRvd25zLCBjYWxjdWxhdGVEcm9wZG93blBvc2l0aW9uXSk7XG5cbiAgLy8g65Oc66Gt64uk7Jq0IOuLq+q4sFxuICBjb25zdCBjbG9zZURyb3Bkb3duID0gdXNlQ2FsbGJhY2soKHRlc3RDYXNlSWQ6IHN0cmluZykgPT4ge1xuICAgIHNldE9wZW5Ecm9wZG93bnMocHJldiA9PiAoe1xuICAgICAgLi4ucHJldixcbiAgICAgIFt0ZXN0Q2FzZUlkXTogZmFsc2VcbiAgICB9KSk7XG4gIH0sIFtdKTtcblxuICAvLyDqsITri6jtlZwg7IOB7YOcIOuzgOqyvSDsspjrpqxcbiAgY29uc3QgaGFuZGxlU3RhdHVzQ2hhbmdlID0gdXNlQ2FsbGJhY2soYXN5bmMgKHRlc3RDYXNlSWQ6IHN0cmluZywgbmV3U3RhdHVzOiBzdHJpbmcpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc29sZS5sb2coJz09PSDqsITri6jtlZwg7IOB7YOcIOuzgOqyvSDsi5zsnpEgPT09Jyk7XG4gICAgICBjb25zb2xlLmxvZygn7YWM7Iqk7Yq47LyA7J207IqkIElEOicsIHRlc3RDYXNlSWQpO1xuICAgICAgY29uc29sZS5sb2coJ+yDiOuhnOyatCDsg4Htg5w6JywgbmV3U3RhdHVzKTtcbiAgICAgIGNvbnNvbGUubG9nKCftmITsnqwg7ISg7YOd65CcIO2PtOuNlDonLCBzZWxlY3RlZEltcG9ydGVkRm9sZGVyPy5uYW1lKTtcblxuICAgICAgLy8g7KaJ7IucIOu2gOuqqCDsu7Ttj6zrhIztirgg7IOB7YOcIOyXheuNsOydtO2KuFxuICAgICAgb25UZXN0Q2FzZVVwZGF0ZSh0ZXN0Q2FzZUlkLCB7XG4gICAgICAgIHN0YXR1czogbmV3U3RhdHVzIGFzIFRlc3RDYXNlWydzdGF0dXMnXSxcbiAgICAgICAgbGFzdFVwZGF0ZWQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfSk7XG5cbiAgICAgIC8vIOyEoO2DneuQnCDthYzsiqTtirjsvIDsnbTsiqTqsIAg67OA6rK965CcIOqyveyasCDsg4Htg5wg7JeF642w7J207Yq4XG4gICAgICBpZiAoc2VsZWN0ZWRUZXN0Q2FzZT8uaWQgPT09IHRlc3RDYXNlSWQpIHtcbiAgICAgICAgc2V0U2VsZWN0ZWRUZXN0Q2FzZSh7XG4gICAgICAgICAgLi4uc2VsZWN0ZWRUZXN0Q2FzZSxcbiAgICAgICAgICBzdGF0dXM6IG5ld1N0YXR1cyBhcyBUZXN0Q2FzZVsnc3RhdHVzJ10sXG4gICAgICAgICAgbGFzdFVwZGF0ZWQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8g7Y+0642UIOyEoO2DnSDsg4Htg5zsnbgg6rK97JqwIGZvbGRlclRlc3RDYXNlc+uPhCDsponsi5wg7JeF642w7J207Yq4XG4gICAgICBpZiAoc2VsZWN0ZWRJbXBvcnRlZEZvbGRlcikge1xuICAgICAgICBzZXRGb2xkZXJUZXN0Q2FzZXMocHJldiA9PiBcbiAgICAgICAgICBwcmV2Lm1hcCh0YyA9PiBcbiAgICAgICAgICAgIHRjLmlkID09PSB0ZXN0Q2FzZUlkIFxuICAgICAgICAgICAgICA/IHsgLi4udGMsIHN0YXR1czogbmV3U3RhdHVzIGFzIFRlc3RDYXNlWydzdGF0dXMnXSwgbGFzdFVwZGF0ZWQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSB9XG4gICAgICAgICAgICAgIDogdGNcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICAgIGNvbnNvbGUubG9nKCftj7TrjZQg7YWM7Iqk7Yq47LyA7J207IqkIOyDge2DnCDsponsi5wg7JeF642w7J207Yq4IOyZhOujjCcpO1xuICAgICAgfVxuXG4gICAgICAvLyBBUEkg7Zi47LacICjrsLHqt7jrnbzsmrTrk5wpXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1cGRhdGVUZXN0Q2FzZVN0YXR1cyh7XG4gICAgICAgICAgcmVsZWFzZUlkOiByZWxlYXNlLmlkLFxuICAgICAgICAgIHRlc3RDYXNlSWQsXG4gICAgICAgICAgc3RhdHVzOiBuZXdTdGF0dXMsXG4gICAgICAgICAgY29tbWVudDogY3VycmVudENvbW1lbnRcbiAgICAgICAgfSkudW53cmFwKCk7XG5cbiAgICAgICAgY29uc29sZS5sb2coJ0FQSSDtmLjstpwg7ISx6rO1OicsIHJlc3VsdCk7XG4gICAgICAgIFxuICAgICAgICAvLyDrjbDsnbTthLAg7IOI66Gc6rOg7LmoXG4gICAgICAgIGF3YWl0IHJlZmV0Y2goKTtcbiAgICAgICAgYXdhaXQgcmVmZXRjaFN0YXRzKCk7XG4gICAgICAgIFxuICAgICAgICAvLyDtj7TrjZQg7ISg7YOdIOyDge2DnOyduCDqsr3smrAg7Y+0642UIOuNsOydtO2EsOuPhCDsg4jroZzqs6DsuajtlZjrkJgsIOuhnOy7rCDsg4Htg5wg7JeF642w7J207Yq466W8IOycoOyngFxuICAgICAgICBpZiAoc2VsZWN0ZWRJbXBvcnRlZEZvbGRlcikge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGBodHRwOi8vbG9jYWxob3N0OjMwMDEvYXBpL3JlbGVhc2VzL2ZvbGRlcnMvJHtzZWxlY3RlZEltcG9ydGVkRm9sZGVyLmlkfS90ZXN0Y2FzZXNgKTtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgICBjb25zdCB1cGRhdGVkRm9sZGVyVGVzdENhc2VzID0gZGF0YS5kYXRhIHx8IFtdO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgLy8g7IOI66Gc6rOg7Lmo65CcIOuNsOydtO2EsOyXkCDroZzsu6wg7IOB7YOcIOyXheuNsOydtO2KuOulvCDrs5HtlalcbiAgICAgICAgICAgICAgY29uc3QgbWVyZ2VkVGVzdENhc2VzID0gdXBkYXRlZEZvbGRlclRlc3RDYXNlcy5tYXAoKHRjOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAvLyDtmITsnqwg66Gc7LusIOyDge2DnOyXkOyEnCDtlbTri7kg7YWM7Iqk7Yq47LyA7J207IqkIOywvuq4sFxuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVGVzdENhc2UgPSBmb2xkZXJUZXN0Q2FzZXMuZmluZCgobG9jYWxUYzogYW55KSA9PiBsb2NhbFRjLmlkID09PSB0Yy5pZCk7XG4gICAgICAgICAgICAgICAgLy8g66Gc7LusIOyDge2DnOqwgCDrjZQg7LWc7Iug7J2066m0IOuhnOy7rCDsg4Htg5wg7IKs7JqpLCDslYTri4jrqbQg7ISc67KEIOyDge2DnCDsgqzsmqlcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxUZXN0Q2FzZSAmJiBsb2NhbFRlc3RDYXNlLmxhc3RVcGRhdGVkID4gdGMubGFzdFVwZGF0ZWQgXG4gICAgICAgICAgICAgICAgICA/IGxvY2FsVGVzdENhc2UgXG4gICAgICAgICAgICAgICAgICA6IHRjO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIHNldEZvbGRlclRlc3RDYXNlcyhtZXJnZWRUZXN0Q2FzZXMpO1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygn7Y+0642UIO2FjOyKpO2KuOy8gOydtOyKpCDsg4jroZzqs6Dsuagg67CPIOuzke2VqSDsmYTro4w6JywgbWVyZ2VkVGVzdENhc2VzLmxlbmd0aCwgJ+qwnCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCftj7TrjZQg7YWM7Iqk7Yq47LyA7J207IqkIOyDiOuhnOqzoOy5qCDsi6TtjKg6JywgZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoYXBpRXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignQVBJIO2YuOy2nCDsi6TtjKg6JywgYXBpRXJyb3IpO1xuICAgICAgICBhbGVydChg7IOB7YOcIOuzgOqyveyXkCDsi6TtjKjtlojsirXri4jri6Q6ICR7YXBpRXJyb3J9YCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnNvbGUubG9nKCc9PT0g7IOB7YOcIOuzgOqyvSDsmYTro4wgPT09Jyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJz09PSDsg4Htg5wg67OA6rK9IOyLpO2MqCA9PT0nKTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGRldGFpbHM6JywgZXJyb3IpO1xuICAgICAgYWxlcnQoYOyDge2DnCDrs4Dqsr3sl5Ag7Iuk7Yyo7ZaI7Iq164uI64ukOiAke2Vycm9yfWApO1xuICAgIH1cbiAgfSwgW3VwZGF0ZVRlc3RDYXNlU3RhdHVzLCByZWxlYXNlLmlkLCBvblRlc3RDYXNlVXBkYXRlLCBzZWxlY3RlZFRlc3RDYXNlLCBjdXJyZW50Q29tbWVudCwgcmVmZXRjaCwgcmVmZXRjaFN0YXRzLCBzZWxlY3RlZEltcG9ydGVkRm9sZGVyLCBmb2xkZXJUZXN0Q2FzZXNdKTtcblxuXG5cbiAgLy8g7Jm467aAIO2BtOumrSDsi5wg65Oc66Gt64uk7Jq0IOuLq+q4sFxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGhhbmRsZUNsaWNrT3V0c2lkZSA9IChldmVudDogTW91c2VFdmVudCkgPT4ge1xuICAgICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0IGFzIEVsZW1lbnQ7XG4gICAgICBpZiAoIXRhcmdldC5jbG9zZXN0KCdbZGF0YS1kcm9wZG93bl0nKSkge1xuICAgICAgICBzZXRPcGVuRHJvcGRvd25zKHt9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgaGFuZGxlQ2xpY2tPdXRzaWRlKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgaGFuZGxlQ2xpY2tPdXRzaWRlKTtcbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgLy8g7J286rSEIOyDge2DnCDrs4Dqsr1cbiAgY29uc3QgaGFuZGxlQnVsa1N0YXR1c0NoYW5nZSA9IHVzZUNhbGxiYWNrKChzdGF0dXM6IFRlc3RDYXNlWydzdGF0dXMnXSkgPT4ge1xuICAgIGlmIChzZWxlY3RlZFRlc3RDYXNlcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBcbiAgICBvbkJ1bGtVcGRhdGUoc2VsZWN0ZWRUZXN0Q2FzZXMsIHsgXG4gICAgICBzdGF0dXMsXG4gICAgICBsYXN0VXBkYXRlZDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgfSk7XG4gICAgXG4gICAgc2V0U2VsZWN0ZWRUZXN0Q2FzZXMoW10pO1xuICB9LCBbc2VsZWN0ZWRUZXN0Q2FzZXMsIG9uQnVsa1VwZGF0ZV0pO1xuXG4gIC8vIO2FjOyKpO2KuCDsvIDsnbTsiqQg7YG066atIOyymOumrFxuICBjb25zdCBoYW5kbGVUZXN0Q2FzZUNsaWNrID0gdXNlQ2FsbGJhY2soKHRlc3RDYXNlOiBUZXN0Q2FzZSkgPT4ge1xuICAgIHNldFNlbGVjdGVkVGVzdENhc2UodGVzdENhc2UpO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgaGFuZGxlRmV0Y2hUZXN0Q2FzZXMgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0U2hvd1Rlc3RDYXNlTW9kYWwodHJ1ZSk7XG4gIH0sIFtdKTtcblxuICAvLyDshKDtg53rkJwg7Y+0642U65Ok7J2YIOuqqOuToCDthYzsiqTtirjsvIDsnbTsiqQg7LaU6rCAXG4gIGNvbnN0IGhhbmRsZUFkZFNlbGVjdGVkRm9sZGVycyA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBpZiAoc2VsZWN0ZWRUZXN0Q2FzZXNUb0FkZC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBcbiAgICBzZXRJc0xvYWRpbmdUZXN0Q2FzZXModHJ1ZSk7XG4gICAgdHJ5IHtcbiAgICAgIC8vIOyEoO2DneuQnCDtj7TrjZTrk6TsnYQg6rCA7KC47JioIO2PtOuNlCDrqqnroZ3sl5Ag7LaU6rCAICjtlZjsnIQg7Y+0642UIOygnOyZuClcbiAgICAgIGNvbnN0IHNlbGVjdGVkRm9sZGVyT2JqZWN0cyA9IEFycmF5LmlzQXJyYXkoZm9sZGVycykgPyBmb2xkZXJzLmZpbHRlcihmb2xkZXIgPT4gXG4gICAgICAgIHNlbGVjdGVkVGVzdENhc2VzVG9BZGQuaW5jbHVkZXMoZm9sZGVyLmlkLnRvU3RyaW5nKCkpXG4gICAgICApIDogW107XG4gICAgICBcbiAgICAgIC8vIOqwgSDtj7TrjZTsnZgg7Iuk7KCcIO2FjOyKpO2KuOy8gOydtOyKpCDqsJzsiJjrpbwg6rCA7KC47JmA7IScIOyXheuNsOydtO2KuFxuICAgICAgY29uc3QgZm9sZGVyc1dpdGhSZWFsQ291bnRzID0gYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgIHNlbGVjdGVkRm9sZGVyT2JqZWN0cy5tYXAoYXN5bmMgKGZvbGRlcikgPT4ge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyDsi6TsoJwgQVBJIO2YuOy2nOuhnCDthYzsiqTtirjsvIDsnbTsiqQg6rCc7IiYIOqwgOyguOyYpOq4sFxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgaHR0cDovL2xvY2FsaG9zdDozMDAxL2FwaS9yZWxlYXNlcy9mb2xkZXJzLyR7Zm9sZGVyLmlkfS90ZXN0Y2FzZXNgKTtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLmZvbGRlcixcbiAgICAgICAgICAgICAgICB0ZXN0Q2FzZUNvdW50OiBkYXRhLmRhdGE/Lmxlbmd0aCB8fCAwXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYO2PtOuNlCAke2ZvbGRlci5pZH0g7YWM7Iqk7Yq47LyA7J207IqkIOyhsO2ajCDsi6TtjKg6YCwgZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZm9sZGVyO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICAgIFxuICAgICAgLy8g7KSR67O1IOygnOqxsO2VmOyXrCDqsIDsoLjsmKgg7Y+0642UIOuqqeuhneyXkCDstpTqsIBcbiAgICAgIGNvbnN0IGV4aXN0aW5nSWRzID0gbmV3IFNldChpbXBvcnRlZEZvbGRlcnMubWFwKChmOiBhbnkpID0+IGYuaWQpKTtcbiAgICAgIGNvbnN0IG5ld0ZvbGRlcnMgPSBmb2xkZXJzV2l0aFJlYWxDb3VudHMuZmlsdGVyKChmOiBhbnkpID0+ICFleGlzdGluZ0lkcy5oYXMoZi5pZCkpO1xuICAgICAgXG4gICAgICAvLyBEQuyXkCDtj7TrjZQg7LaU6rCAXG4gICAgICBpZiAobmV3Rm9sZGVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IGZvbGRlcnNUb0FkZCA9IG5ld0ZvbGRlcnMubWFwKGZvbGRlciA9PiAoe1xuICAgICAgICAgIGZvbGRlcl9pZDogZm9sZGVyLmlkLFxuICAgICAgICAgIGZvbGRlcl9uYW1lOiBmb2xkZXIubmFtZSxcbiAgICAgICAgICBwYXJlbnRfaWQ6IGZvbGRlci5wYXJlbnRJZCB8fCBudWxsLFxuICAgICAgICAgIHRlc3RfY2FzZV9jb3VudDogZm9sZGVyLnRlc3RDYXNlQ291bnQgfHwgMFxuICAgICAgICB9KSk7XG4gICAgICAgIFxuICAgICAgICBhd2FpdCBhZGRJbXBvcnRlZEZvbGRlcnMoe1xuICAgICAgICAgIHJlbGVhc2VJZDogcmVsZWFzZS5pZCxcbiAgICAgICAgICBmb2xkZXJzOiBmb2xkZXJzVG9BZGRcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyDroZzsu6wg7IOB7YOcIOyXheuNsOydtO2KuFxuICAgICAgICBzZXRJbXBvcnRlZEZvbGRlcnMocHJldiA9PiBbLi4ucHJldiwgLi4ubmV3Rm9sZGVyc10pO1xuICAgICAgfVxuICAgICAgXG5cbiAgICAgIFxuICAgICAgLy8g7ISg7YOd65CcIOuqqOuToCDtj7TrjZTsnZgg7YWM7Iqk7Yq47LyA7J207Iqk66W8IOyLpOygnOuhnCDqsIDsoLjsmYDshJwg66a066as7KaI7JeQIOy2lOqwgFxuICAgICAgY29uc3QgYWxsVGVzdENhc2VJZHMgPSBbXTtcbiAgICAgIGZvciAoY29uc3QgZm9sZGVyIG9mIHNlbGVjdGVkRm9sZGVyT2JqZWN0cykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMS9hcGkvcmVsZWFzZXMvZm9sZGVycy8ke2ZvbGRlci5pZH0vdGVzdGNhc2VzYCk7XG4gICAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgaWYgKGRhdGEuZGF0YSAmJiBBcnJheS5pc0FycmF5KGRhdGEuZGF0YSkpIHtcbiAgICAgICAgICAgICAgLy8g7YWM7Iqk7Yq47LyA7J207IqkIElE65Ok7J2EIOyImOynkVxuICAgICAgICAgICAgICBjb25zdCB0ZXN0Q2FzZUlkcyA9IGRhdGEuZGF0YS5tYXAoKHRjOiBhbnkpID0+IHRjLmlkKTtcbiAgICAgICAgICAgICAgYWxsVGVzdENhc2VJZHMucHVzaCguLi50ZXN0Q2FzZUlkcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYO2PtOuNlCAke2ZvbGRlci5pZH0g7YWM7Iqk7Yq47LyA7J207IqkIOyhsO2ajCDsi6TtjKg6YCwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIOumtOumrOymiOyXkCDthYzsiqTtirjsvIDsnbTsiqQg7LaU6rCAXG4gICAgICBpZiAoYWxsVGVzdENhc2VJZHMubGVuZ3RoID4gMCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IGFkZFJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMS9hcGkvcmVsZWFzZXMvJHtyZWxlYXNlLmlkfS90ZXN0Y2FzZXNgLCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgIHRlc3RDYXNlSWRzOiBhbGxUZXN0Q2FzZUlkc1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmIChhZGRSZXNwb25zZS5vaykge1xuICAgICAgICAgICAgY29uc3QgYWRkUmVzdWx0ID0gYXdhaXQgYWRkUmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDshLHqs7Ug7ZuEIOuqqOuLrCDri6vquLAg67CPIOyEoO2DnSDstIjquLDtmZRcbiAgICAgICAgICAgIHNldFNob3dUZXN0Q2FzZU1vZGFsKGZhbHNlKTtcbiAgICAgICAgICAgIHNldFNlbGVjdGVkVGVzdENhc2VzVG9BZGQoW10pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDrjbDsnbTthLAg7IOI66Gc6rOg7LmoXG4gICAgICAgICAgICBhd2FpdCByZWZldGNoKCk7XG4gICAgICAgICAgICBhd2FpdCByZWZldGNoSW1wb3J0ZWRGb2xkZXJzKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ+2FjOyKpO2KuOy8gOydtOyKpCDrprTrpqzspogg7LaU6rCAIOyLpO2MqDonLCBhZGRSZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcign7YWM7Iqk7Yq47LyA7J207IqkIOumtOumrOymiCDstpTqsIAg7Iuk7YyoOicsIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfthYzsiqTtirjsvIDsnbTsiqQg7LaU6rCAIOyLpO2MqDonLCBlcnJvcik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHNldElzTG9hZGluZ1Rlc3RDYXNlcyhmYWxzZSk7XG4gICAgfVxuICB9LCBbc2VsZWN0ZWRUZXN0Q2FzZXNUb0FkZCwgZm9sZGVycywgcmVsZWFzZS5pZCwgcmVmZXRjaF0pO1xuXG4gIC8vIO2PtOuNlOydmCDrqqjrk6Ag7ZWY7JyEIO2PtOuNlCBJROulvCDsnqzqt4DsoIHsnLzroZwg6rCA7KC47Jik6riwXG4gIGNvbnN0IGdldEFsbFN1YkZvbGRlcklkcyA9IHVzZUNhbGxiYWNrKChmb2xkZXI6IGFueSk6IG51bWJlcltdID0+IHtcbiAgICBsZXQgaWRzID0gW2ZvbGRlci5pZF07XG4gICAgaWYgKGZvbGRlci5jaGlsZHJlbikge1xuICAgICAgZm9sZGVyLmNoaWxkcmVuLmZvckVhY2goKGNoaWxkOiBhbnkpID0+IHtcbiAgICAgICAgaWRzID0gWy4uLmlkcywgLi4uZ2V0QWxsU3ViRm9sZGVySWRzKGNoaWxkKV07XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGlkcztcbiAgfSwgW10pO1xuXG4gIC8vIO2PtOuNlCDshKDtg50gKO2VmOychCDtj7TrjZQg7J6Q64+ZIOyEoO2DnSDsl4bsnYwpXG4gIGNvbnN0IGhhbmRsZUZvbGRlclNlbGVjdGlvbiA9IHVzZUNhbGxiYWNrKChmb2xkZXI6IGFueSwgaXNTZWxlY3RlZDogYm9vbGVhbikgPT4ge1xuICAgIGlmIChpc1NlbGVjdGVkKSB7XG4gICAgICBzZXRTZWxlY3RlZFRlc3RDYXNlc1RvQWRkKHByZXYgPT4gWy4uLm5ldyBTZXQoWy4uLnByZXYsIGZvbGRlci5pZF0pXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFNlbGVjdGVkVGVzdENhc2VzVG9BZGQocHJldiA9PiBwcmV2LmZpbHRlcihpZCA9PiBpZCAhPT0gZm9sZGVyLmlkKSk7XG4gICAgfVxuICB9LCBbXSk7XG5cbiAgLy8g7KCR6riwL+2OvOy5mOq4sCDquLDriqVcbiAgY29uc3QgaGFuZGxlVG9nZ2xlQ29sbGFwc2UgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0SXNDb2xsYXBzZWQocHJldiA9PiAhcHJldik7XG4gIH0sIFtdKTtcblxuICAvLyDqsIDsoLjsmKgg7Y+0642UIOyCreygnFxuICBjb25zdCBoYW5kbGVSZW1vdmVJbXBvcnRlZEZvbGRlciA9IHVzZUNhbGxiYWNrKGFzeW5jIChmb2xkZXJJZDogbnVtYmVyKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIO2VtOuLuSDtj7TrjZTsnZgg7YWM7Iqk7Yq47LyA7J207Iqk65Ok7J2EIOumtOumrOymiOyXkOyEnCDsoJzqsbBcbiAgICAgIGNvbnN0IGZvbGRlciA9IGltcG9ydGVkRm9sZGVycy5maW5kKChmOiBhbnkpID0+IGYuaWQgPT09IGZvbGRlcklkKTtcbiAgICAgIGlmIChmb2xkZXIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyDtj7TrjZTsnZgg7YWM7Iqk7Yq47LyA7J207Iqk65Ok7J2EIOqwgOyguOyZgOyEnCDrprTrpqzspojsl5DshJwg7KCc6rGwXG4gICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgaHR0cDovL2xvY2FsaG9zdDozMDAxL2FwaS9yZWxlYXNlcy9mb2xkZXJzLyR7Zm9sZGVySWR9L3Rlc3RjYXNlc2ApO1xuICAgICAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICAgIGlmIChkYXRhLmRhdGEgJiYgQXJyYXkuaXNBcnJheShkYXRhLmRhdGEpKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHRlc3RDYXNlSWRzID0gZGF0YS5kYXRhLm1hcCgodGM6IGFueSkgPT4gdGMuaWQpO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgLy8g66a066as7KaI7JeQ7IScIO2FjOyKpO2KuOy8gOydtOyKpCDsoJzqsbBcbiAgICAgICAgICAgICAgaWYgKHRlc3RDYXNlSWRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBmZXRjaChgaHR0cDovL2xvY2FsaG9zdDozMDAxL2FwaS9yZWxlYXNlcy8ke3JlbGVhc2UuaWR9L3Rlc3RjYXNlc2AsIHtcbiAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgICAgICB0ZXN0Q2FzZUlkczogdGVzdENhc2VJZHNcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcign7Y+0642UIO2FjOyKpO2KuOy8gOydtOyKpCDsoJzqsbAg7Iuk7YyoOicsIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBEQuyXkOyEnCDtj7TrjZQg7KCc6rGwXG4gICAgICBhd2FpdCByZW1vdmVJbXBvcnRlZEZvbGRlcih7XG4gICAgICAgIHJlbGVhc2VJZDogcmVsZWFzZS5pZCxcbiAgICAgICAgZm9sZGVySWQ6IGZvbGRlcklkXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8g66Gc7LusIOyDge2DnCDsl4XrjbDsnbTtirhcbiAgICAgIHNldEltcG9ydGVkRm9sZGVycyhwcmV2ID0+IHtcbiAgICAgICAgY29uc3QgdXBkYXRlZEZvbGRlcnMgPSBwcmV2LmZpbHRlcigoZjogYW55KSA9PiBmLmlkICE9PSBmb2xkZXJJZCk7XG4gICAgICAgIFxuICAgICAgICAvLyBwbGFubmVkQ291bnQg7KaJ7IucIOyXheuNsOydtO2KuFxuICAgICAgICBjb25zdCB0b3RhbFRlc3RDYXNlc0Zyb21Gb2xkZXJzID0gdXBkYXRlZEZvbGRlcnMucmVkdWNlKCh0b3RhbCwgZm9sZGVyKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHRvdGFsICsgKGZvbGRlci50ZXN0Q2FzZUNvdW50IHx8IDApO1xuICAgICAgICB9LCAwKTtcbiAgICAgICAgXG4gICAgICAgIC8vIOyLpO2WiSDthrXqs4Qg7JeF642w7J207Yq4ICjruYTrj5nquLApXG4gICAgICAgIHVwZGF0ZUV4ZWN1dGlvblN0YXRzKHtcbiAgICAgICAgICByZWxlYXNlSWQ6IHJlbGVhc2UuaWQsXG4gICAgICAgICAgcGxhbm5lZENvdW50OiB0b3RhbFRlc3RDYXNlc0Zyb21Gb2xkZXJzXG4gICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIC8vIO2GteqzhCDsl4XrjbDsnbTtirgg7ZuEIOymieyLnCDsg4jroZzqs6DsuahcbiAgICAgICAgICByZWZldGNoU3RhdHMoKTtcbiAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ+yLpO2WiSDthrXqs4Qg7JeF642w7J207Yq4IOyLpO2MqDonLCBlcnJvcik7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHVwZGF0ZWRGb2xkZXJzO1xuICAgICAgfSk7XG4gICAgICBcbiAgICAgIC8vIOyCreygnOuQnCDtj7TrjZTqsIAg7ZiE7J6sIOyEoO2DneuQnCDtj7TrjZTsmIDri6TrqbQg7ISg7YOdIO2VtOygnFxuICAgICAgaWYgKHNlbGVjdGVkSW1wb3J0ZWRGb2xkZXI/LmlkID09PSBmb2xkZXJJZCkge1xuICAgICAgICBzZXRTZWxlY3RlZEltcG9ydGVkRm9sZGVyKG51bGwpO1xuICAgICAgICBzZXRGb2xkZXJUZXN0Q2FzZXMoW10pO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCftj7TrjZQg7KCc6rGwIOyLpO2MqDonLCBlcnJvcik7XG4gICAgfVxuICB9LCBbc2VsZWN0ZWRJbXBvcnRlZEZvbGRlciwgcmVtb3ZlSW1wb3J0ZWRGb2xkZXIsIHJlbGVhc2UuaWQsIGltcG9ydGVkRm9sZGVycywgdXBkYXRlRXhlY3V0aW9uU3RhdHMsIHJlZmV0Y2hTdGF0c10pO1xuXG4gIC8vIOqwgOyguOyYqCDtj7TrjZQg7YG066atIOyymOumrFxuICBjb25zdCBoYW5kbGVJbXBvcnRlZEZvbGRlckNsaWNrID0gdXNlQ2FsbGJhY2soYXN5bmMgKGZvbGRlcjogYW55KSA9PiB7XG4gICAgc2V0U2VsZWN0ZWRJbXBvcnRlZEZvbGRlcihmb2xkZXIpO1xuICAgIFxuICAgIHRyeSB7XG4gICAgICAvLyDtlbTri7kg7Y+0642U7J2YIO2FjOyKpO2KuCDsvIDsnbTsiqQg6rCA7KC47Jik6riwXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGBodHRwOi8vbG9jYWxob3N0OjMwMDEvYXBpL3JlbGVhc2VzL2ZvbGRlcnMvJHtmb2xkZXIuaWR9L3Rlc3RjYXNlc2ApO1xuICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIGNvbnN0IHRlc3RDYXNlcyA9IGRhdGEuZGF0YSB8fCBbXTtcbiAgICAgICAgc2V0Rm9sZGVyVGVzdENhc2VzKHRlc3RDYXNlcyk7XG4gICAgICAgIFxuICAgICAgICBzZXRJbXBvcnRlZEZvbGRlcnMocHJldiA9PiBwcmV2Lm1hcChmID0+IFxuICAgICAgICAgIGYuaWQgPT09IGZvbGRlci5pZCA/IHsgLi4uZiwgdGVzdENhc2VDb3VudDogdGVzdENhc2VzLmxlbmd0aCB9IDogZlxuICAgICAgICApKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ+2PtOuNlCDthYzsiqTtirgg7LyA7J207IqkIOyhsO2ajCDsi6TtjKg6JywgcmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG4gICAgICAgIHNldEZvbGRlclRlc3RDYXNlcyhbXSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+2PtOuNlCDthYzsiqTtirgg7LyA7J207IqkIOyhsO2ajCDsi6TtjKg6JywgZXJyb3IpO1xuICAgICAgc2V0Rm9sZGVyVGVzdENhc2VzKFtdKTtcbiAgICB9XG4gIH0sIFtdKTtcblxuICAvLyDtj7TrjZQg67Cw7Je07J2EIO2KuOumrCDqtazsobDroZwg67OA7ZmY7ZWY64qUIO2VqOyImFxuICBjb25zdCBidWlsZEZvbGRlclRyZWUgPSB1c2VDYWxsYmFjaygoZm9sZGVyczogYW55W10pOiBhbnlbXSA9PiB7XG4gICAgY29uc3QgZm9sZGVyTWFwID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IHJvb3RGb2xkZXJzOiBhbnlbXSA9IFtdO1xuXG4gICAgLy8g66qo65OgIO2PtOuNlOulvCBNYXDsl5Ag7KCA7J6lXG4gICAgZm9sZGVycy5mb3JFYWNoKGZvbGRlciA9PiB7XG4gICAgICBmb2xkZXJNYXAuc2V0KGZvbGRlci5pZCwgeyAuLi5mb2xkZXIsIGNoaWxkcmVuOiBbXSB9KTtcbiAgICB9KTtcblxuICAgIC8vIOu2gOuqqC3snpDsi50g6rSA6rOEIOyEpOyglVxuICAgIGZvbGRlcnMuZm9yRWFjaChmb2xkZXIgPT4ge1xuICAgICAgY29uc3QgZm9sZGVyTm9kZSA9IGZvbGRlck1hcC5nZXQoZm9sZGVyLmlkKTtcbiAgICAgIGlmIChmb2xkZXIucGFyZW50SWQgPT09IG51bGwpIHtcbiAgICAgICAgLy8g66Oo7Yq4IO2PtOuNlFxuICAgICAgICByb290Rm9sZGVycy5wdXNoKGZvbGRlck5vZGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8g7ZWY7JyEIO2PtOuNlFxuICAgICAgICBjb25zdCBwYXJlbnROb2RlID0gZm9sZGVyTWFwLmdldChmb2xkZXIucGFyZW50SWQpO1xuICAgICAgICBpZiAocGFyZW50Tm9kZSkge1xuICAgICAgICAgIHBhcmVudE5vZGUuY2hpbGRyZW4ucHVzaChmb2xkZXJOb2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJvb3RGb2xkZXJzO1xuICB9LCBbXSk7XG5cbiAgLy8g7Y+0642UIO2KuOumrCDroIzrjZTrp4Eg7Lu07Y+s64SM7Yq4ICjrqqjri6zsmqkpXG4gIGNvbnN0IHJlbmRlckZvbGRlclRyZWUgPSB1c2VDYWxsYmFjaygoZm9sZGVyczogYW55W10sIGxldmVsOiBudW1iZXIgPSAwKSA9PiB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGZvbGRlcnMpKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ2ZvbGRlcnMgaXMgbm90IGFuIGFycmF5OicsIGZvbGRlcnMpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBmb2xkZXJzLm1hcCgoZm9sZGVyKSA9PiAoXG4gICAgICA8ZGl2IGtleT17Zm9sZGVyLmlkfT5cbiAgICAgICAgPEltcG9ydEZvbGRlckl0ZW0gXG4gICAgICAgICAgbGV2ZWw9e2xldmVsfVxuICAgICAgICAgICRpc1NlbGVjdGVkPXtzZWxlY3RlZFRlc3RDYXNlc1RvQWRkLmluY2x1ZGVzKGZvbGRlci5pZCl9XG4gICAgICAgICAgb25DbGljaz17KCkgPT4gaGFuZGxlRm9sZGVyU2VsZWN0aW9uKGZvbGRlciwgIXNlbGVjdGVkVGVzdENhc2VzVG9BZGQuaW5jbHVkZXMoZm9sZGVyLmlkKSl9XG4gICAgICAgID5cbiAgICAgICAgICA8SW1wb3J0Rm9sZGVyQ2hlY2tib3hcbiAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgICBjaGVja2VkPXtzZWxlY3RlZFRlc3RDYXNlc1RvQWRkLmluY2x1ZGVzKGZvbGRlci5pZCl9XG4gICAgICAgICAgICBvbkNoYW5nZT17KGU6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiBoYW5kbGVGb2xkZXJTZWxlY3Rpb24oZm9sZGVyLCBlLnRhcmdldC5jaGVja2VkKX1cbiAgICAgICAgICAgIG9uQ2xpY2s9eyhlOiBSZWFjdC5Nb3VzZUV2ZW50KSA9PiBlLnN0b3BQcm9wYWdhdGlvbigpfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPEltcG9ydEZvbGRlckljb24gLz5cbiAgICAgICAgICA8SW1wb3J0VGV4dENvbnRhaW5lcj5cbiAgICAgICAgICAgIDxJbXBvcnRGb2xkZXJOYW1lPntmb2xkZXIubmFtZX08L0ltcG9ydEZvbGRlck5hbWU+XG4gICAgICAgICAgICA8SW1wb3J0VGVzdENhc2VDb3VudD4oe2ZvbGRlci50ZXN0Q2FzZUNvdW50feqwnCk8L0ltcG9ydFRlc3RDYXNlQ291bnQ+XG4gICAgICAgICAgPC9JbXBvcnRUZXh0Q29udGFpbmVyPlxuICAgICAgICA8L0ltcG9ydEZvbGRlckl0ZW0+XG4gICAgICAgIFxuICAgICAgICB7Zm9sZGVyLmNoaWxkcmVuICYmIGZvbGRlci5jaGlsZHJlbi5sZW5ndGggPiAwICYmIChcbiAgICAgICAgICA8SW1wb3J0Rm9sZGVyQ2hpbGRyZW4+XG4gICAgICAgICAgICB7cmVuZGVyRm9sZGVyVHJlZShmb2xkZXIuY2hpbGRyZW4sIGxldmVsICsgMSl9XG4gICAgICAgICAgPC9JbXBvcnRGb2xkZXJDaGlsZHJlbj5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgICkpO1xuICB9LCBbc2VsZWN0ZWRUZXN0Q2FzZXNUb0FkZCwgaGFuZGxlRm9sZGVyU2VsZWN0aW9uXSk7XG5cbiAgLy8g6rCA7KC47JioIO2PtOuNlCDtirjrpqwg66CM642U66eBIOy7tO2PrOuEjO2KuCAo7KKM7LihIO2MqOuEkOyaqSlcbiAgY29uc3QgcmVuZGVySW1wb3J0ZWRGb2xkZXJUcmVlID0gdXNlQ2FsbGJhY2soKGZvbGRlcnM6IGFueVtdLCBsZXZlbDogbnVtYmVyID0gMCkgPT4ge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShmb2xkZXJzKSkge1xuICAgICAgY29uc29sZS53YXJuKCdmb2xkZXJzIGlzIG5vdCBhbiBhcnJheTonLCBmb2xkZXJzKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZm9sZGVycy5tYXAoKGZvbGRlcikgPT4gKFxuICAgICAgPGRpdiBrZXk9e2ZvbGRlci5pZH0+XG4gICAgICAgIDxJbXBvcnRGb2xkZXJJdGVtIFxuICAgICAgICAgIGxldmVsPXtsZXZlbH1cbiAgICAgICAgICAkaXNTZWxlY3RlZD17c2VsZWN0ZWRJbXBvcnRlZEZvbGRlcj8uaWQgPT09IGZvbGRlci5pZH1cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBoYW5kbGVJbXBvcnRlZEZvbGRlckNsaWNrKGZvbGRlcil9XG4gICAgICAgID5cbiAgICAgICAgICA8SW1wb3J0Rm9sZGVySWNvbiAvPlxuICAgICAgICAgIDxJbXBvcnRUZXh0Q29udGFpbmVyPlxuICAgICAgICAgICAgPEltcG9ydEZvbGRlck5hbWU+e2ZvbGRlci5uYW1lfTwvSW1wb3J0Rm9sZGVyTmFtZT5cbiAgICAgICAgICAgIDxJbXBvcnRUZXN0Q2FzZUNvdW50Pih7Zm9sZGVyLnRlc3RDYXNlQ291bnR96rCcKTwvSW1wb3J0VGVzdENhc2VDb3VudD5cbiAgICAgICAgICA8L0ltcG9ydFRleHRDb250YWluZXI+XG4gICAgICAgICAgPEltcG9ydFJlbW92ZUJ1dHRvblxuICAgICAgICAgICAgb25DbGljaz17KGU6IFJlYWN0Lk1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgaGFuZGxlUmVtb3ZlSW1wb3J0ZWRGb2xkZXIoZm9sZGVyLmlkKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgw5dcbiAgICAgICAgICA8L0ltcG9ydFJlbW92ZUJ1dHRvbj5cbiAgICAgICAgPC9JbXBvcnRGb2xkZXJJdGVtPlxuICAgICAgICBcbiAgICAgICAge2ZvbGRlci5jaGlsZHJlbiAmJiBmb2xkZXIuY2hpbGRyZW4ubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgICAgPEltcG9ydEZvbGRlckNoaWxkcmVuPlxuICAgICAgICAgICAge3JlbmRlckltcG9ydGVkRm9sZGVyVHJlZShmb2xkZXIuY2hpbGRyZW4sIGxldmVsICsgMSl9XG4gICAgICAgICAgPC9JbXBvcnRGb2xkZXJDaGlsZHJlbj5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgICkpO1xuICB9LCBbaGFuZGxlUmVtb3ZlSW1wb3J0ZWRGb2xkZXIsIGhhbmRsZUltcG9ydGVkRm9sZGVyQ2xpY2ssIHNlbGVjdGVkSW1wb3J0ZWRGb2xkZXJdKTtcblxuICByZXR1cm4gKFxuICAgIDxFeGVjdXRpb25Db250YWluZXIgY2xhc3NOYW1lPVwiZXhlY3V0aW9uLWNvbnRhaW5lclwiPlxuICAgICAgey8qIOyDgeuLqCDsu6jthY3siqTtirgg67CUIC0g7IOI66Gc7Jq0IOuUlOyekOyduCAqL31cbiAgICAgIDxUb3BDb250ZXh0QmFyIGlzQ29sbGFwc2VkPXtpc0NvbGxhcHNlZH0+XG4gICAgICAgIDxSZWxlYXNlTWV0YSBpc0NvbGxhcHNlZD17aXNDb2xsYXBzZWR9PlxuICAgICAgICAgIDxSZWxlYXNlTGVmdD5cbiAgICAgICAgICAgIDxSZWxlYXNlSW5mbyBpc0NvbGxhcHNlZD17aXNDb2xsYXBzZWR9PlxuICAgICAgICAgICAgICA8UmVsZWFzZU5hbWVDb250YWluZXI+XG4gICAgICAgICAgICAgICAgPFJlbGVhc2VOYW1lIGlzQ29sbGFwc2VkPXtpc0NvbGxhcHNlZH0+e3JlbGVhc2UubmFtZX08L1JlbGVhc2VOYW1lPlxuICAgICAgICAgICAgICAgIDxMaXZlSW5kaWNhdG9yICRpc0xpdmU9e2lzTGl2ZX0+XG4gICAgICAgICAgICAgICAgICA8TGl2ZURvdCAkaXNMaXZlPXtpc0xpdmV9IC8+XG4gICAgICAgICAgICAgICAgICB7aXNMaXZlID8gJ0xJVkUnIDogJ09GRkxJTkUnfVxuICAgICAgICAgICAgICAgIDwvTGl2ZUluZGljYXRvcj5cbiAgICAgICAgICAgICAgPC9SZWxlYXNlTmFtZUNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgPFJlbGVhc2VEZXRhaWxzIGlzQ29sbGFwc2VkPXtpc0NvbGxhcHNlZH0+XG4gICAgICAgICAgICAgICAgPFJlbGVhc2VEZXRhaWxJdGVtPnZ7cmVsZWFzZS52ZXJzaW9ufTwvUmVsZWFzZURldGFpbEl0ZW0+XG4gICAgICAgICAgICAgICAge3JlbGVhc2Uuc3ByaW50ICYmIDxSZWxlYXNlRGV0YWlsSXRlbT5TcHJpbnQge3JlbGVhc2Uuc3ByaW50fTwvUmVsZWFzZURldGFpbEl0ZW0+fVxuICAgICAgICAgICAgICAgIHtyZWxlYXNlLnBlcmlvZCAmJiA8UmVsZWFzZURldGFpbEl0ZW0+e3JlbGVhc2UucGVyaW9kfTwvUmVsZWFzZURldGFpbEl0ZW0+fVxuICAgICAgICAgICAgICAgIDxSZWxlYXNlRGV0YWlsSXRlbT57cmVsZWFzZS5vd25lcn08L1JlbGVhc2VEZXRhaWxJdGVtPlxuICAgICAgICAgICAgICAgIDxSZWxlYXNlRGV0YWlsSXRlbT57bmV3IERhdGUocmVsZWFzZS5jcmVhdGVkQXQpLnRvTG9jYWxlRGF0ZVN0cmluZygna28tS1InKX08L1JlbGVhc2VEZXRhaWxJdGVtPlxuICAgICAgICAgICAgICA8L1JlbGVhc2VEZXRhaWxzPlxuICAgICAgICAgICAgPC9SZWxlYXNlSW5mbz5cbiAgICAgICAgICA8L1JlbGVhc2VMZWZ0PlxuICAgICAgICAgIFxuICAgICAgICAgIDxSZWxlYXNlUmlnaHQ+XG4gICAgICAgICAgICA8QWN0aW9uQnV0dG9uIFxuICAgICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVGZXRjaFRlc3RDYXNlc31cbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e2lzTG9hZGluZ1Rlc3RDYXNlc31cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge2lzTG9hZGluZ1Rlc3RDYXNlcyA/ICfqsIDsoLjsmKTripQg7KSRLi4uJyA6ICfthYzsiqTtirjsvIDsnbTsiqQg6rCA7KC47Jik6riwJ31cbiAgICAgICAgICAgIDwvQWN0aW9uQnV0dG9uPlxuICAgICAgICAgICAgPENvbGxhcHNlQnV0dG9uIGlzQ29sbGFwc2VkPXtpc0NvbGxhcHNlZH0gb25DbGljaz17aGFuZGxlVG9nZ2xlQ29sbGFwc2V9PlxuICAgICAgICAgICAgICB7aXNDb2xsYXBzZWQgPyAn7Y687LmY6riwJyA6ICfsoJHquLAnfVxuICAgICAgICAgICAgPC9Db2xsYXBzZUJ1dHRvbj5cbiAgICAgICAgICA8L1JlbGVhc2VSaWdodD5cbiAgICAgICAgPC9SZWxlYXNlTWV0YT5cblxuICAgICAgICA8UHJvZ3Jlc3NTdW1tYXJ5IGlzQ29sbGFwc2VkPXtpc0NvbGxhcHNlZH0+XG4gICAgICAgICAgPFByb2dyZXNzSXRlbT5cbiAgICAgICAgICAgIDxQcm9ncmVzc051bWJlciBjb2xvcj1cIiMzYjgyZjZcIj57dG90YWxUZXN0Q2FzZXN9PC9Qcm9ncmVzc051bWJlcj5cbiAgICAgICAgICAgIDxQcm9ncmVzc0xhYmVsIGNvbG9yPVwiIzNiODJmNlwiPlBMQU5ORUQ8L1Byb2dyZXNzTGFiZWw+XG4gICAgICAgICAgPC9Qcm9ncmVzc0l0ZW0+XG4gICAgICAgICAgPFByb2dyZXNzSXRlbT5cbiAgICAgICAgICAgIDxQcm9ncmVzc051bWJlciBjb2xvcj1cIiM4YjVjZjZcIj57ZXhlY3V0ZWRUZXN0Q2FzZXN9PC9Qcm9ncmVzc051bWJlcj5cbiAgICAgICAgICAgIDxQcm9ncmVzc0xhYmVsIGNvbG9yPVwiIzhiNWNmNlwiPkVYRUNVVEVEPC9Qcm9ncmVzc0xhYmVsPlxuICAgICAgICAgIDwvUHJvZ3Jlc3NJdGVtPlxuICAgICAgICAgIDxQcm9ncmVzc0l0ZW0+XG4gICAgICAgICAgICA8UHJvZ3Jlc3NOdW1iZXIgY29sb3I9XCIjMTBiOTgxXCI+e3Bhc3NlZFRlc3RDYXNlc308L1Byb2dyZXNzTnVtYmVyPlxuICAgICAgICAgICAgPFByb2dyZXNzTGFiZWwgY29sb3I9XCIjMTBiOTgxXCI+UEFTUzwvUHJvZ3Jlc3NMYWJlbD5cbiAgICAgICAgICA8L1Byb2dyZXNzSXRlbT5cbiAgICAgICAgICA8UHJvZ3Jlc3NJdGVtPlxuICAgICAgICAgICAgPFByb2dyZXNzTnVtYmVyIGNvbG9yPVwiI2VmNDQ0NFwiPntmYWlsZWRUZXN0Q2FzZXN9PC9Qcm9ncmVzc051bWJlcj5cbiAgICAgICAgICAgIDxQcm9ncmVzc0xhYmVsIGNvbG9yPVwiI2VmNDQ0NFwiPkZBSUw8L1Byb2dyZXNzTGFiZWw+XG4gICAgICAgICAgPC9Qcm9ncmVzc0l0ZW0+XG4gICAgICAgICAgPFByb2dyZXNzSXRlbT5cbiAgICAgICAgICAgIDxQcm9ncmVzc051bWJlciBjb2xvcj1cIiNmNTllMGJcIj57YmxvY2tlZFRlc3RDYXNlc308L1Byb2dyZXNzTnVtYmVyPlxuICAgICAgICAgICAgPFByb2dyZXNzTGFiZWwgY29sb3I9XCIjZjU5ZTBiXCI+QkxPQ0s8L1Byb2dyZXNzTGFiZWw+XG4gICAgICAgICAgPC9Qcm9ncmVzc0l0ZW0+XG4gICAgICAgICAgPFByb2dyZXNzSXRlbT5cbiAgICAgICAgICAgIDxQcm9ncmVzc051bWJlciBjb2xvcj1cIiM2YjcyODBcIj57c2tpcHBlZFRlc3RDYXNlc308L1Byb2dyZXNzTnVtYmVyPlxuICAgICAgICAgICAgPFByb2dyZXNzTGFiZWwgY29sb3I9XCIjNmI3MjgwXCI+U0tJUDwvUHJvZ3Jlc3NMYWJlbD5cbiAgICAgICAgICA8L1Byb2dyZXNzSXRlbT5cbiAgICAgICAgICBcbiAgICAgICAgICA8UHJvZ3Jlc3NCYXI+XG4gICAgICAgICAgICA8UHJvZ3Jlc3NGaWxsIHBlcmNlbnRhZ2U9e3Byb2dyZXNzUGVyY2VudGFnZX0gLz5cbiAgICAgICAgICA8L1Byb2dyZXNzQmFyPlxuICAgICAgICAgIFxuICAgICAgICAgIDxQcm9ncmVzc0l0ZW0+XG4gICAgICAgICAgICA8UHJvZ3Jlc3NOdW1iZXIgY29sb3I9XCIjMDU5NjY5XCI+e3Byb2dyZXNzUGVyY2VudGFnZS50b0ZpeGVkKDEpfSU8L1Byb2dyZXNzTnVtYmVyPlxuICAgICAgICAgICAgPFByb2dyZXNzTGFiZWwgY29sb3I9XCIjMDU5NjY5XCI+UFJPR1JFU1M8L1Byb2dyZXNzTGFiZWw+XG4gICAgICAgICAgPC9Qcm9ncmVzc0l0ZW0+XG4gICAgICAgIDwvUHJvZ3Jlc3NTdW1tYXJ5PlxuXG4gICAgICAgIDxGaWx0ZXJTdW1tYXJ5IGlzQ29sbGFwc2VkPXtpc0NvbGxhcHNlZH0+XG4gICAgICAgICAge2ZpbHRlcnMuc3RhdHVzICYmIDxGaWx0ZXJCYWRnZT5TdGF0dXM6IHtmaWx0ZXJzLnN0YXR1c308L0ZpbHRlckJhZGdlPn1cbiAgICAgICAgICB7ZmlsdGVycy5wcmlvcml0eSAmJiA8RmlsdGVyQmFkZ2U+UHJpb3JpdHk6IHtmaWx0ZXJzLnByaW9yaXR5fTwvRmlsdGVyQmFkZ2U+fVxuICAgICAgICAgIHtmaWx0ZXJzLnN1aXRlICYmIDxGaWx0ZXJCYWRnZT5TdWl0ZToge2ZpbHRlcnMuc3VpdGV9PC9GaWx0ZXJCYWRnZT59XG4gICAgICAgICAge2ZpbHRlcnMuYXNzaWduZWUgJiYgPEZpbHRlckJhZGdlPkFzc2lnbmVlOiB7ZmlsdGVycy5hc3NpZ25lZX08L0ZpbHRlckJhZGdlPn1cbiAgICAgICAgICB7ZmlsdGVycy5zZWFyY2ggJiYgPEZpbHRlckJhZGdlPlNlYXJjaDogXCJ7ZmlsdGVycy5zZWFyY2h9XCI8L0ZpbHRlckJhZGdlPn1cbiAgICAgICAgICB7c2VsZWN0ZWRUZXN0Q2FzZXMubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgICAgICA8RmlsdGVyQmFkZ2U+e3NlbGVjdGVkVGVzdENhc2VzLmxlbmd0aH0gc2VsZWN0ZWQ8L0ZpbHRlckJhZGdlPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvRmlsdGVyU3VtbWFyeT5cbiAgICAgIDwvVG9wQ29udGV4dEJhcj5cblxuICAgICAgey8qIOuplOyduCDsvZjthZDsuKAg7JiB7JetIC0g7ZWY64uoIO2MqOuEkOydgCDtla3sg4Eg7ZGc7IucICovfVxuICAgICAgPE1haW5Db250ZW50PlxuICAgICAgICB7Lyog7KKM7LihIO2FjOyKpO2KuOy8gOydtOyKpCDtj7TrjZQg7Yyo64SQICovfVxuICAgICAgICA8RmlsdGVyUGFuZWwgd2lkdGg9e2xlZnRQYW5lbFdpZHRofT5cbiAgICAgICAgICA8TGVmdFBhbmVsUmVzaXplSGFuZGxlIG9uTW91c2VEb3duPXtoYW5kbGVMZWZ0UGFuZWxSZXNpemVTdGFydH0gLz5cbiAgICAgICAgICA8RmlsdGVyU2VjdGlvbj5cbiAgICAgICAgICAgIDxGaWx0ZXJUaXRsZT7qsIDsoLjsmKgg7YWM7Iqk7Yq47LyA7J207IqkIO2PtOuNlDwvRmlsdGVyVGl0bGU+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHtpbXBvcnRlZEZvbGRlcnMubGVuZ3RoID4gMCA/IChcbiAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXt7IG1hcmdpbkJvdHRvbTogJzE2cHgnIH19PlxuICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0U2hvd1Rlc3RDYXNlTW9kYWwodHJ1ZSl9XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogJzhweCAxNnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAnIzNiODJmNicsXG4gICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICd3aGl0ZScsXG4gICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAnNnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnXG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICsg7Y+0642UIOy2lOqwgFxuICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPEZvbGRlckxpc3Q+XG4gICAgICAgICAgICAgICAgICB7cmVuZGVySW1wb3J0ZWRGb2xkZXJUcmVlKGJ1aWxkRm9sZGVyVHJlZShpbXBvcnRlZEZvbGRlcnMpKX1cbiAgICAgICAgICAgICAgICA8L0ZvbGRlckxpc3Q+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgPGRpdiBzdHlsZT17eyBcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAnMjBweCcsIFxuICAgICAgICAgICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsIFxuICAgICAgICAgICAgICAgIGNvbG9yOiAnIzZiNzI4MCcsXG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICBtaW5IZWlnaHQ6ICc0MDBweCcsXG4gICAgICAgICAgICAgICAgZmxleDogJzEnXG4gICAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgICAgIOqwgOyguOyYqCDthYzsiqTtirjsvIDsnbTsiqTqsIAg7JeG7Iq164uI64ukLlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxidXR0b24gXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRTaG93VGVzdENhc2VNb2RhbCh0cnVlKX1cbiAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpblRvcDogJzEwcHgnLFxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAnOHB4IDE2cHgnLFxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAnIzNiODJmNicsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgICAgICAgICAgICAgICAgICBib3JkZXI6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAnNnB4JyxcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiAncG9pbnRlcidcbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAg7YWM7Iqk7Yq47LyA7J207IqkIOqwgOyguOyYpOq4sFxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9GaWx0ZXJTZWN0aW9uPlxuXG4gICAgICAgICAgPFNhdmVkRmlsdGVycz5cbiAgICAgICAgICAgIDxGaWx0ZXJUaXRsZT5TYXZlZCBWaWV3czwvRmlsdGVyVGl0bGU+XG4gICAgICAgICAgICA8U2F2ZWRGaWx0ZXJJdGVtPlxuICAgICAgICAgICAgICA8c3Bhbj5NeSBEZWZhdWx0IFZpZXc8L3NwYW4+XG4gICAgICAgICAgICA8L1NhdmVkRmlsdGVySXRlbT5cbiAgICAgICAgICAgIDxTYXZlZEZpbHRlckl0ZW0+XG4gICAgICAgICAgICAgIDxzcGFuPkhpZ2ggUHJpb3JpdHkgVGVzdHM8L3NwYW4+XG4gICAgICAgICAgICA8L1NhdmVkRmlsdGVySXRlbT5cbiAgICAgICAgICAgIDxTYXZlZEZpbHRlckl0ZW0+XG4gICAgICAgICAgICAgIDxzcGFuPkZhaWxlZCBUZXN0czwvc3Bhbj5cbiAgICAgICAgICAgIDwvU2F2ZWRGaWx0ZXJJdGVtPlxuICAgICAgICAgIDwvU2F2ZWRGaWx0ZXJzPlxuXG4gICAgICAgICAge3NlbGVjdGVkVGVzdENhc2VzLmxlbmd0aCA+IDAgJiYgKFxuICAgICAgICAgICAgPEJ1bGtBY3Rpb25QYW5lbD5cbiAgICAgICAgICAgICAgPEZpbHRlclRpdGxlPkJ1bGsgQWN0aW9uczwvRmlsdGVyVGl0bGU+XG4gICAgICAgICAgICAgIDxCdWxrQWN0aW9uQnV0dG9uXG4gICAgICAgICAgICAgICAgdmFyaWFudD1cInBhc3NcIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZUJ1bGtTdGF0dXNDaGFuZ2UoJ1Bhc3MnKX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIE1hcmsgQWxsIGFzIFBhc3NcbiAgICAgICAgICAgICAgPC9CdWxrQWN0aW9uQnV0dG9uPlxuICAgICAgICAgICAgICA8QnVsa0FjdGlvbkJ1dHRvblxuICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJmYWlsXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBoYW5kbGVCdWxrU3RhdHVzQ2hhbmdlKCdGYWlsJyl9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBNYXJrIEFsbCBhcyBGYWlsXG4gICAgICAgICAgICAgIDwvQnVsa0FjdGlvbkJ1dHRvbj5cbiAgICAgICAgICAgICAgPEJ1bGtBY3Rpb25CdXR0b25cbiAgICAgICAgICAgICAgICB2YXJpYW50PVwiYmxvY2tcIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZUJ1bGtTdGF0dXNDaGFuZ2UoJ0Jsb2NrJyl9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBNYXJrIEFsbCBhcyBCbG9ja1xuICAgICAgICAgICAgICA8L0J1bGtBY3Rpb25CdXR0b24+XG4gICAgICAgICAgICAgIDxCdWxrQWN0aW9uQnV0dG9uXG4gICAgICAgICAgICAgICAgdmFyaWFudD1cInNraXBcIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZUJ1bGtTdGF0dXNDaGFuZ2UoJ1NraXAnKX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIE1hcmsgQWxsIGFzIFNraXBcbiAgICAgICAgICAgICAgPC9CdWxrQWN0aW9uQnV0dG9uPlxuICAgICAgICAgICAgPC9CdWxrQWN0aW9uUGFuZWw+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9GaWx0ZXJQYW5lbD5cblxuICAgICAgICB7Lyog7KSR7JWZIO2FjOyKpO2KuCDrpqzsiqTtirggKi99XG4gICAgICAgIDxUZXN0TGlzdENvbnRhaW5lcj5cbiAgICAgICAgICA8VGVzdExpc3RIZWFkZXI+XG4gICAgICAgICAgICA8VGVzdExpc3RUaXRsZT5cbiAgICAgICAgICAgICAge3NlbGVjdGVkSW1wb3J0ZWRGb2xkZXIgXG4gICAgICAgICAgICAgICAgPyBgJHtzZWxlY3RlZEltcG9ydGVkRm9sZGVyLm5hbWV9IO2PtOuNlOydmCDthYzsiqTtirgg7LyA7J207IqkICgke2ZvbGRlclRlc3RDYXNlcy5sZW5ndGh96rCcKWBcbiAgICAgICAgICAgICAgICA6IGBUZXN0IENhc2VzICgke2ZpbHRlcmVkVGVzdENhc2VzLmxlbmd0aH0gb2YgJHt0b3RhbFRlc3RDYXNlc30pYFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA8L1Rlc3RMaXN0VGl0bGU+XG4gICAgICAgICAgPC9UZXN0TGlzdEhlYWRlcj5cblxuICAgICAgICAgIDxUZXN0VGFibGU+XG4gICAgICAgICAgICA8VGFibGVIZWFkZXI+XG4gICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgICAgICAgY2hlY2tlZD17c2VsZWN0ZWRUZXN0Q2FzZXMubGVuZ3RoID09PSAoc2VsZWN0ZWRJbXBvcnRlZEZvbGRlciA/IGZvbGRlclRlc3RDYXNlcyA6IGZpbHRlcmVkVGVzdENhc2VzKS5sZW5ndGggJiYgKHNlbGVjdGVkSW1wb3J0ZWRGb2xkZXIgPyBmb2xkZXJUZXN0Q2FzZXMgOiBmaWx0ZXJlZFRlc3RDYXNlcykubGVuZ3RoID4gMH1cbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gaGFuZGxlU2VsZWN0QWxsKGUudGFyZ2V0LmNoZWNrZWQpfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2PlN0YXR1czwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2PlByaW9yaXR5PC9kaXY+XG4gICAgICAgICAgICAgIDxkaXY+VGVzdCBDYXNlPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXY+U3VpdGU8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdj5Nb2R1bGU8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdj5Bc3NpZ25lZTwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2Pkxhc3QgUmVzdWx0PC9kaXY+XG4gICAgICAgICAgICAgIDxkaXY+QWN0aW9uczwvZGl2PlxuICAgICAgICAgICAgPC9UYWJsZUhlYWRlcj5cblxuICAgICAgICAgICAgeyhzZWxlY3RlZEltcG9ydGVkRm9sZGVyID8gZm9sZGVyVGVzdENhc2VzIDogZmlsdGVyZWRUZXN0Q2FzZXMpLm1hcCgodGVzdENhc2U6IGFueSkgPT4gKFxuICAgICAgICAgICAgICA8VGFibGVSb3dcbiAgICAgICAgICAgICAgICBrZXk9e3Rlc3RDYXNlLmlkfVxuICAgICAgICAgICAgICAgIGlzU2VsZWN0ZWQ9e3NlbGVjdGVkVGVzdENhc2VzLmluY2x1ZGVzKHRlc3RDYXNlLmlkKX1cbiAgICAgICAgICAgICAgICBzdGF0dXM9e3Rlc3RDYXNlLnN0YXR1c31cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBoYW5kbGVUZXN0Q2FzZUNsaWNrKHRlc3RDYXNlKX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxUYWJsZUNlbGw+XG4gICAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17c2VsZWN0ZWRUZXN0Q2FzZXMuaW5jbHVkZXModGVzdENhc2UuaWQpfVxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IGhhbmRsZVRlc3RDYXNlU2VsZWN0KHRlc3RDYXNlLmlkLCBlLnRhcmdldC5jaGVja2VkKX1cbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KGUpID0+IGUuc3RvcFByb3BhZ2F0aW9uKCl9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvVGFibGVDZWxsPlxuICAgICAgICAgICAgICAgIDxUYWJsZUNlbGw+XG4gICAgICAgICAgICAgICAgICA8U3RhdHVzQmFkZ2Ugc3RhdHVzPXt0ZXN0Q2FzZS5zdGF0dXN9PlxuICAgICAgICAgICAgICAgICAgICB7dGVzdENhc2Uuc3RhdHVzfVxuICAgICAgICAgICAgICAgICAgPC9TdGF0dXNCYWRnZT5cbiAgICAgICAgICAgICAgICA8L1RhYmxlQ2VsbD5cbiAgICAgICAgICAgICAgICA8VGFibGVDZWxsPlxuICAgICAgICAgICAgICAgICAgPFByaW9yaXR5QmFkZ2UgcHJpb3JpdHk9e3Rlc3RDYXNlLnByaW9yaXR5fT5cbiAgICAgICAgICAgICAgICAgICAge3Rlc3RDYXNlLnByaW9yaXR5fVxuICAgICAgICAgICAgICAgICAgPC9Qcmlvcml0eUJhZGdlPlxuICAgICAgICAgICAgICAgIDwvVGFibGVDZWxsPlxuICAgICAgICAgICAgICAgIDxUYWJsZUNlbGw+XG4gICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXt7IGZvbnRXZWlnaHQ6IDUwMCB9fT57dGVzdENhc2UubmFtZSB8fCB0ZXN0Q2FzZS50aXRsZX08L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17eyBmb250U2l6ZTogMTIsIGNvbG9yOiAnIzY0NzQ4YicgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgeyh0ZXN0Q2FzZS5kZXNjcmlwdGlvbiB8fCAnJykuc3Vic3RyaW5nKDAsIDYwKX0uLi5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L1RhYmxlQ2VsbD5cbiAgICAgICAgICAgICAgICA8VGFibGVDZWxsPnt0ZXN0Q2FzZS5zdWl0ZSB8fCAnLSd9PC9UYWJsZUNlbGw+XG4gICAgICAgICAgICAgICAgPFRhYmxlQ2VsbD57dGVzdENhc2UubW9kdWxlIHx8ICctJ308L1RhYmxlQ2VsbD5cbiAgICAgICAgICAgICAgICA8VGFibGVDZWxsPnt0ZXN0Q2FzZS5hc3NpZ25lZSB8fCAnLSd9PC9UYWJsZUNlbGw+XG4gICAgICAgICAgICAgICAgPFRhYmxlQ2VsbD5cbiAgICAgICAgICAgICAgICAgIHt0ZXN0Q2FzZS5sYXN0VXBkYXRlZCA/IG5ldyBEYXRlKHRlc3RDYXNlLmxhc3RVcGRhdGVkKS50b0xvY2FsZURhdGVTdHJpbmcoKSA6ICctJ31cbiAgICAgICAgICAgICAgICA8L1RhYmxlQ2VsbD5cbiAgICAgICAgICAgICAgICA8VGFibGVDZWxsPlxuICAgICAgICAgICAgICAgICAgPFNpbXBsZVN0YXR1c0Ryb3Bkb3duXG4gICAgICAgICAgICAgICAgICAgIHRlc3RDYXNlSWQ9e3Rlc3RDYXNlLmlkfVxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3RhdHVzPXt0ZXN0Q2FzZS5zdGF0dXMgfHwgJ0luYWN0aXZlJ31cbiAgICAgICAgICAgICAgICAgICAgb25TdGF0dXNDaGFuZ2U9e2hhbmRsZVN0YXR1c0NoYW5nZX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9UYWJsZUNlbGw+XG4gICAgICAgICAgICAgIDwvVGFibGVSb3c+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgICA8L1Rlc3RUYWJsZT5cbiAgICAgICAgPC9UZXN0TGlzdENvbnRhaW5lcj5cblxuICAgICAgICB7Lyog7Jqw7LihIOyDgeyEuCDtjKjrhJAgKi99XG4gICAgICAgIDxEZXRhaWxQYW5lbCBpc09wZW49eyEhc2VsZWN0ZWRUZXN0Q2FzZX0gd2lkdGg9e2RldGFpbFBhbmVsV2lkdGh9IG9uTW91c2VEb3duPXtoYW5kbGVEZXRhaWxQYW5lbFJlc2l6ZVN0YXJ0fT5cbiAgICAgICAgICA8RGV0YWlsSGVhZGVyPlxuICAgICAgICAgICAgPERldGFpbEhlYWRlclRpdGxlPlRlc3QgQ2FzZSBEZXRhaWxzPC9EZXRhaWxIZWFkZXJUaXRsZT5cbiAgICAgICAgICAgIDxDbG9zZUJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBzZXRTZWxlY3RlZFRlc3RDYXNlKG51bGwpfT7DlzwvQ2xvc2VCdXR0b24+XG4gICAgICAgICAgPC9EZXRhaWxIZWFkZXI+XG4gICAgICAgICAgPFJlc2l6ZUhhbmRsZSBvbk1vdXNlRG93bj17aGFuZGxlRGV0YWlsUGFuZWxSZXNpemVTdGFydH0gLz5cbiAgICAgICAgICA8RGV0YWlsQ29udGVudCBvbk1vdXNlVXA9e2hhbmRsZURldGFpbFBhbmVsUmVzaXplRW5kfSBvbk1vdXNlTGVhdmU9e2hhbmRsZURldGFpbFBhbmVsUmVzaXplRW5kfT5cbiAgICAgICAgICAgIHtzZWxlY3RlZFRlc3RDYXNlICYmIChcbiAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICA8RGV0YWlsU2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgIDxEZXRhaWxUaXRsZT5PdmVydmlldzwvRGV0YWlsVGl0bGU+XG4gICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgIHsvKiDsoJzrqqnqs7wg7IOB7YOcICovfVxuICAgICAgICAgICAgICAgICAgPFNpbXBsZUhlYWRlcj5cbiAgICAgICAgICAgICAgICAgICAgPFNpbXBsZVRpdGxlPntzZWxlY3RlZFRlc3RDYXNlLnRpdGxlIHx8IHNlbGVjdGVkVGVzdENhc2UubmFtZX08L1NpbXBsZVRpdGxlPlxuICAgICAgICAgICAgICAgICAgICA8U2ltcGxlU3RhdHVzIHN0YXR1cz17c2VsZWN0ZWRUZXN0Q2FzZS5zdGF0dXN9PntzZWxlY3RlZFRlc3RDYXNlLnN0YXR1c308L1NpbXBsZVN0YXR1cz5cbiAgICAgICAgICAgICAgICAgIDwvU2ltcGxlSGVhZGVyPlxuXG4gICAgICAgICAgICAgICAgICB7Lyog6riw67O4IOygleuztCAqL31cbiAgICAgICAgICAgICAgICAgIDxTaW1wbGVJbmZvPlxuICAgICAgICAgICAgICAgICAgICA8U2ltcGxlSW5mb0l0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgPFNpbXBsZUxhYmVsPklEOjwvU2ltcGxlTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgPFNpbXBsZVZhbHVlPiN7c2VsZWN0ZWRUZXN0Q2FzZS5pZH08L1NpbXBsZVZhbHVlPlxuICAgICAgICAgICAgICAgICAgICA8L1NpbXBsZUluZm9JdGVtPlxuICAgICAgICAgICAgICAgICAgICA8U2ltcGxlSW5mb0l0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgPFNpbXBsZUxhYmVsPlByaW9yaXR5OjwvU2ltcGxlTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgPFNpbXBsZVZhbHVlIHByaW9yaXR5PXtzZWxlY3RlZFRlc3RDYXNlLnByaW9yaXR5fT57c2VsZWN0ZWRUZXN0Q2FzZS5wcmlvcml0eX08L1NpbXBsZVZhbHVlPlxuICAgICAgICAgICAgICAgICAgICA8L1NpbXBsZUluZm9JdGVtPlxuICAgICAgICAgICAgICAgICAgICA8U2ltcGxlSW5mb0l0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgPFNpbXBsZUxhYmVsPkF1dGhvcjo8L1NpbXBsZUxhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgIDxTaW1wbGVWYWx1ZT57c2VsZWN0ZWRUZXN0Q2FzZS5jcmVhdGVkQnkgfHwgJ2FkbWluJ308L1NpbXBsZVZhbHVlPlxuICAgICAgICAgICAgICAgICAgICA8L1NpbXBsZUluZm9JdGVtPlxuICAgICAgICAgICAgICAgICAgPC9TaW1wbGVJbmZvPlxuXG4gICAgICAgICAgICAgICAgICB7Lyog7ISk66qFICovfVxuICAgICAgICAgICAgICAgICAgPFNpbXBsZVNlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgIDxTaW1wbGVMYWJlbD5EZXNjcmlwdGlvbjwvU2ltcGxlTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxTaW1wbGVUZXh0PntzZWxlY3RlZFRlc3RDYXNlLmRlc2NyaXB0aW9uIHx8ICfshKTrqoXsnbQg7JeG7Iq164uI64ukLid9PC9TaW1wbGVUZXh0PlxuICAgICAgICAgICAgICAgICAgPC9TaW1wbGVTZWN0aW9uPlxuXG4gICAgICAgICAgICAgICAgICB7Lyog7IKs7KCEIOyhsOqxtCAqL31cbiAgICAgICAgICAgICAgICAgIDxTaW1wbGVTZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICA8U2ltcGxlTGFiZWw+UHJlcmVxdWlzaXRlczwvU2ltcGxlTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxTaW1wbGVUZXh0PntzZWxlY3RlZFRlc3RDYXNlLnByZXJlcSB8fCAn7IKs7KCEIOyhsOqxtOydtCDsl4bsirXri4jri6QuJ308L1NpbXBsZVRleHQ+XG4gICAgICAgICAgICAgICAgICA8L1NpbXBsZVNlY3Rpb24+XG5cbiAgICAgICAgICAgICAgICAgIHsvKiDthYzsiqTtirgg64uo6rOEICovfVxuICAgICAgICAgICAgICAgICAgPFNpbXBsZVNlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgIDxTaW1wbGVMYWJlbD5UZXN0IFN0ZXBzPC9TaW1wbGVMYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPFNpbXBsZVN0ZXBzPlxuICAgICAgICAgICAgICAgICAgICAgIHsoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0ZXBzQXJyYXk6IHN0cmluZ1tdID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRUZXN0Q2FzZS5zdGVwcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzZWxlY3RlZFRlc3RDYXNlLnN0ZXBzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXBzQXJyYXkgPSBzZWxlY3RlZFRlc3RDYXNlLnN0ZXBzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzZWxlY3RlZFRlc3RDYXNlLnN0ZXBzID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGVwc0FycmF5ID0gSlNPTi5wYXJzZShzZWxlY3RlZFRlc3RDYXNlLnN0ZXBzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGVwc0FycmF5ID0gW3NlbGVjdGVkVGVzdENhc2Uuc3RlcHNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RlcHNBcnJheS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdGVwc0FycmF5Lm1hcCgoc3RlcDogc3RyaW5nLCBpbmRleDogbnVtYmVyKSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNpbXBsZVN0ZXAga2V5PXtpbmRleH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2ltcGxlU3RlcE51bWJlcj57aW5kZXggKyAxfS48L1NpbXBsZVN0ZXBOdW1iZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2ltcGxlU3RlcFRleHQ+e3N0ZXB9PC9TaW1wbGVTdGVwVGV4dD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1NpbXBsZVN0ZXA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2ltcGxlU3RlcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTaW1wbGVTdGVwTnVtYmVyPjEuPC9TaW1wbGVTdGVwTnVtYmVyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNpbXBsZVN0ZXBUZXh0Pk5vIHN0ZXBzIGRlZmluZWQ8L1NpbXBsZVN0ZXBUZXh0PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvU2ltcGxlU3RlcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9KSgpfVxuICAgICAgICAgICAgICAgICAgICA8L1NpbXBsZVN0ZXBzPlxuICAgICAgICAgICAgICAgICAgPC9TaW1wbGVTZWN0aW9uPlxuXG4gICAgICAgICAgICAgICAgICB7Lyog7JiI7IOBIOqysOqzvCAqL31cbiAgICAgICAgICAgICAgICAgIDxTaW1wbGVTZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICA8U2ltcGxlTGFiZWw+RXhwZWN0ZWQgUmVzdWx0PC9TaW1wbGVMYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPFNpbXBsZVRleHQ+e3NlbGVjdGVkVGVzdENhc2UuZXhwZWN0ZWQgfHwgc2VsZWN0ZWRUZXN0Q2FzZS5leHBlY3RlZFJlc3VsdCB8fCAn7JiI7IOBIOqysOqzvOqwgCDsl4bsirXri4jri6QuJ308L1NpbXBsZVRleHQ+XG4gICAgICAgICAgICAgICAgICA8L1NpbXBsZVNlY3Rpb24+XG4gICAgICAgICAgICAgICAgPC9EZXRhaWxTZWN0aW9uPlxuXG4gICAgICAgICAgICAgICAge3NlbGVjdGVkVGVzdENhc2Uuc3RlcHMgJiYgKFxuICAgICAgICAgICAgICAgICAgPERldGFpbFNlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgIDxEZXRhaWxUaXRsZT5TdGVwczwvRGV0YWlsVGl0bGU+XG4gICAgICAgICAgICAgICAgICAgIDxEZXRhaWxUZXh0PlxuICAgICAgICAgICAgICAgICAgICAgIHsoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0ZXBzQXJyYXk6IHN0cmluZ1tdID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRUZXN0Q2FzZS5zdGVwcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzZWxlY3RlZFRlc3RDYXNlLnN0ZXBzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXBzQXJyYXkgPSBzZWxlY3RlZFRlc3RDYXNlLnN0ZXBzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzZWxlY3RlZFRlc3RDYXNlLnN0ZXBzID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGVwc0FycmF5ID0gSlNPTi5wYXJzZShzZWxlY3RlZFRlc3RDYXNlLnN0ZXBzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGVwc0FycmF5ID0gW3NlbGVjdGVkVGVzdENhc2Uuc3RlcHNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0ZXBzQXJyYXkuam9pbignXFxuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgfSkoKX1cbiAgICAgICAgICAgICAgICAgICAgPC9EZXRhaWxUZXh0PlxuICAgICAgICAgICAgICAgICAgPC9EZXRhaWxTZWN0aW9uPlxuICAgICAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgICAgICB7c2VsZWN0ZWRUZXN0Q2FzZS5leHBlY3RlZFJlc3VsdCAmJiAoXG4gICAgICAgICAgICAgICAgICA8RGV0YWlsU2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgPERldGFpbFRpdGxlPkV4cGVjdGVkIFJlc3VsdDwvRGV0YWlsVGl0bGU+XG4gICAgICAgICAgICAgICAgICAgIDxEZXRhaWxUZXh0PntzZWxlY3RlZFRlc3RDYXNlLmV4cGVjdGVkUmVzdWx0fTwvRGV0YWlsVGV4dD5cbiAgICAgICAgICAgICAgICAgIDwvRGV0YWlsU2VjdGlvbj5cbiAgICAgICAgICAgICAgICApfVxuXG4gICAgICAgICAgICAgICAgPERldGFpbFNlY3Rpb24+XG4gICAgICAgICAgICAgICAgICA8RGV0YWlsVGl0bGU+UnVuIFRlc3Q8L0RldGFpbFRpdGxlPlxuICAgICAgICAgICAgICAgICAgPFN0YXR1c0NoYW5nZUZvcm0+XG4gICAgICAgICAgICAgICAgICAgIDxTdGF0dXNSYWRpb0dyb3VwPlxuICAgICAgICAgICAgICAgICAgICAgIHsoWydQYXNzJywgJ0ZhaWwnLCAnQmxvY2tlZCcsICdTa2lwJ10gYXMgY29uc3QpLm1hcCgoc3RhdHVzKSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8U3RhdHVzUmFkaW8ga2V5PXtzdGF0dXN9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwicmFkaW9cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJzdGF0dXNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtzdGF0dXN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17c2VsZWN0ZWRUZXN0Q2FzZS5zdGF0dXMgPT09IHN0YXR1c31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCfrnbzrlJTsmKQg67KE7Yq8IO2BtOumrTonLCBzdGF0dXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0LmNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlU3RhdHVzQ2hhbmdlKHNlbGVjdGVkVGVzdENhc2UuaWQsIHN0YXR1cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1c0JhZGdlIHN0YXR1cz17c3RhdHVzfT57c3RhdHVzfTwvU3RhdHVzQmFkZ2U+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1N0YXR1c1JhZGlvPlxuICAgICAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgICAgICA8L1N0YXR1c1JhZGlvR3JvdXA+XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICA8RmlsdGVyTGFiZWw+Q29tbWVudCAoT3B0aW9uYWwpPC9GaWx0ZXJMYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPENvbW1lbnRUZXh0YXJlYSBcbiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkFkZCBhIGNvbW1lbnQgYWJvdXQgdGhpcyB0ZXN0IGV4ZWN1dGlvbi4uLlwiXG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2N1cnJlbnRDb21tZW50fVxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gc2V0Q3VycmVudENvbW1lbnQoZS50YXJnZXQudmFsdWUpfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgPFNhdmVCdXR0b24gXG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDb21tZW50LnRyaW0oKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDrjJPquIDsnbQg7J6I7Jy866m0IO2YhOyerCDsg4Htg5zroZwg64uk7IucIOyggOyepVxuICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVTdGF0dXNDaGFuZ2Uoc2VsZWN0ZWRUZXN0Q2FzZS5pZCwgc2VsZWN0ZWRUZXN0Q2FzZS5zdGF0dXMgfHwgJ0luYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDrjJPquIDsnbQg7JeG7Jy866m0IOq3uOuDpSDtjKjrhJAg64ur6riwXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNldFNlbGVjdGVkVGVzdENhc2UobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgIHtjdXJyZW50Q29tbWVudC50cmltKCkgPyAnU2F2ZSB3aXRoIENvbW1lbnQnIDogJ0Nsb3NlJ31cbiAgICAgICAgICAgICAgICAgICAgPC9TYXZlQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgPC9TdGF0dXNDaGFuZ2VGb3JtPlxuICAgICAgICAgICAgICAgIDwvRGV0YWlsU2VjdGlvbj5cblxuICAgICAgICAgICAgICAgIDxEZXRhaWxTZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgPERldGFpbFRpdGxlPkhpc3Rvcnk8L0RldGFpbFRpdGxlPlxuICAgICAgICAgICAgICAgICAgPEhpc3RvcnlMaXN0PlxuICAgICAgICAgICAgICAgICAgICA8SGlzdG9yeUl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgPEhpc3RvcnlNZXRhPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+Sm9obiBEb2U8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4yMDI0LTAxLTE1IDE0OjMwPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgIDwvSGlzdG9yeU1ldGE+XG4gICAgICAgICAgICAgICAgICAgICAgPEhpc3RvcnlDaGFuZ2U+U3RhdHVzIGNoYW5nZWQgZnJvbSBOb3QgUnVuIHRvIFBhc3M8L0hpc3RvcnlDaGFuZ2U+XG4gICAgICAgICAgICAgICAgICAgIDwvSGlzdG9yeUl0ZW0+XG4gICAgICAgICAgICAgICAgICAgIDxIaXN0b3J5SXRlbT5cbiAgICAgICAgICAgICAgICAgICAgICA8SGlzdG9yeU1ldGE+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5KYW5lIFNtaXRoPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+MjAyNC0wMS0xNCAxNjo0NTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICA8L0hpc3RvcnlNZXRhPlxuICAgICAgICAgICAgICAgICAgICAgIDxIaXN0b3J5Q2hhbmdlPlN0YXR1cyBjaGFuZ2VkIGZyb20gUGFzcyB0byBGYWlsPC9IaXN0b3J5Q2hhbmdlPlxuICAgICAgICAgICAgICAgICAgICA8L0hpc3RvcnlJdGVtPlxuICAgICAgICAgICAgICAgICAgPC9IaXN0b3J5TGlzdD5cbiAgICAgICAgICAgICAgICA8L0RldGFpbFNlY3Rpb24+XG4gICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L0RldGFpbENvbnRlbnQ+XG4gICAgICAgIDwvRGV0YWlsUGFuZWw+XG4gICAgICA8L01haW5Db250ZW50PlxuXG4gICAgICB7Lyog7YWM7Iqk7Yq47LyA7J207IqkIOyEoO2DnSDrqqjri6wgKi99XG5cbiAgICAgIHtzaG93VGVzdENhc2VNb2RhbCAmJiAoXG4gICAgICAgIDxNb2RhbE92ZXJsYXkgb25DbGljaz17KCkgPT4gc2V0U2hvd1Rlc3RDYXNlTW9kYWwoZmFsc2UpfT5cbiAgICAgICAgICA8TW9kYWxDb250ZW50IG9uQ2xpY2s9eyhlKSA9PiBlLnN0b3BQcm9wYWdhdGlvbigpfT5cbiAgICAgICAgICAgIDxNb2RhbEhlYWRlcj5cbiAgICAgICAgICAgICAgPE1vZGFsVGl0bGU+7YWM7Iqk7Yq47LyA7J207IqkIOqwgOyguOyYpOq4sDwvTW9kYWxUaXRsZT5cbiAgICAgICAgICAgICAgPENsb3NlQnV0dG9uIG9uQ2xpY2s9eygpID0+IHNldFNob3dUZXN0Q2FzZU1vZGFsKGZhbHNlKX0+w5c8L0Nsb3NlQnV0dG9uPlxuICAgICAgICAgICAgPC9Nb2RhbEhlYWRlcj5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgPE1vZGFsQm9keT5cbiAgICAgICAgICAgICAgPGRpdiBzdHlsZT17eyBwYWRkaW5nOiAnMjBweCcgfX0+XG4gICAgICAgICAgICAgICAgPGgzIHN0eWxlPXt7IG1hcmdpbkJvdHRvbTogJzE2cHgnLCB0ZXh0QWxpZ246ICdjZW50ZXInIH19Pu2FjOyKpO2KuCDqtIDrpqzsl5DshJwg7Y+0642UIOyEoO2DnTwvaDM+XG4gICAgICAgICAgICAgICAgPHAgc3R5bGU9e3sgbWFyZ2luQm90dG9tOiAnMTZweCcsIGNvbG9yOiAnIzZiNzI4MCcsIHRleHRBbGlnbjogJ2NlbnRlcicgfX0+XG4gICAgICAgICAgICAgICAgICDqsIDsoLjsmKwg7Y+0642U66W8IOyEoO2Dne2VmOyEuOyalC4g6rCBIO2PtOuNlOulvCDqsJzrs4TsoIHsnLzroZwg7ISg7YOd7ZWgIOyImCDsnojsirXri4jri6QuXG4gICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgIDxGb2xkZXJMaXN0PlxuICAgICAgICAgICAgICAgICAge0FycmF5LmlzQXJyYXkoZm9sZGVycykgPyByZW5kZXJGb2xkZXJUcmVlKGJ1aWxkRm9sZGVyVHJlZShmb2xkZXJzKSkgOiAoXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3sgdGV4dEFsaWduOiAnY2VudGVyJywgcGFkZGluZzogJzIwcHgnLCBjb2xvcjogJyM2YjcyODAnIH19PlxuICAgICAgICAgICAgICAgICAgICAgIHtpc0xvYWRpbmcgPyAn7Y+0642UIOuqqeuhneydhCDrtojrn6zsmKTripQg7KSRLi4uJyA6ICftj7TrjZQg66qp66Gd7J2EIOu2iOufrOyYrCDsiJgg7JeG7Iq164uI64ukLid9XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICA8L0ZvbGRlckxpc3Q+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9Nb2RhbEJvZHk+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIDxNb2RhbEZvb3Rlcj5cbiAgICAgICAgICAgICAgPENhbmNlbEJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBzZXRTaG93VGVzdENhc2VNb2RhbChmYWxzZSl9PlxuICAgICAgICAgICAgICAgIOy3qOyGjFxuICAgICAgICAgICAgICA8L0NhbmNlbEJ1dHRvbj5cbiAgICAgICAgICAgICAgPEFkZEJ1dHRvbiBcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVBZGRTZWxlY3RlZEZvbGRlcnN9XG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9e3NlbGVjdGVkVGVzdENhc2VzVG9BZGQubGVuZ3RoID09PSAwIHx8IGlzTG9hZGluZ1Rlc3RDYXNlc31cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtpc0xvYWRpbmdUZXN0Q2FzZXMgPyAn7LaU6rCAIOykkS4uLicgOiBg7ISg7YOd65CcICR7c2VsZWN0ZWRUZXN0Q2FzZXNUb0FkZC5sZW5ndGh96rCcIO2PtOuNlCDstpTqsIBgfVxuICAgICAgICAgICAgICA8L0FkZEJ1dHRvbj5cbiAgICAgICAgICAgIDwvTW9kYWxGb290ZXI+XG4gICAgICAgICAgPC9Nb2RhbENvbnRlbnQ+XG4gICAgICAgIDwvTW9kYWxPdmVybGF5PlxuICAgICAgKX1cblxuXG4gICAgPC9FeGVjdXRpb25Db250YWluZXI+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBFeGVjdXRpb25WaWV3O1xuIl0sInZlcnNpb24iOjN9