{"file":"/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/tests/ExecutionView.folder-sync.test.tsx","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/tests/ExecutionView.folder-sync.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { Provider } from 'react-redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport ExecutionView from '../src/renderer/features/ReleaseManagementV2/components/ExecutionView';\nimport { api } from '../src/renderer/services/api';\n\n// Mock API responses\nconst mockApiTestCases = [\n  {\n    id: '81',\n    title: 'Test Case 1',\n    description: 'Test description 1',\n    status: 'Inactive',\n    priority: 'High',\n    steps: '[\"Step 1\", \"Step 2\"]',\n    expected: 'Expected result 1',\n    createdBy: 'admin',\n    createdAt: '2024-01-01T00:00:00Z',\n    updatedAt: '2024-01-01T00:00:00Z'\n  },\n  {\n    id: '82',\n    title: 'Test Case 2',\n    description: 'Test description 2',\n    status: 'Pass',\n    priority: 'Medium',\n    steps: '[\"Step 1\", \"Step 2\", \"Step 3\"]',\n    expected: 'Expected result 2',\n    createdBy: 'admin',\n    createdAt: '2024-01-01T00:00:00Z',\n    updatedAt: '2024-01-01T00:00:00Z'\n  }\n];\n\nconst mockExecutionStats = {\n  data: {\n    total: 2,\n    passed: 1,\n    failed: 0,\n    blocked: 0,\n    skipped: 0,\n    planned: 2,\n    passRate: 50\n  }\n};\n\n// Mock store\nconst createMockStore = () => {\n  return configureStore({\n    reducer: {\n      [api.reducerPath]: api.reducer,\n    },\n    middleware: (getDefaultMiddleware) =>\n      getDefaultMiddleware().concat(api.middleware),\n  });\n};\n\n// Mock props\nconst mockRelease = {\n  id: 'test-release-id',\n  name: 'Test Release',\n  version: '1.0.0',\n  owner: 'admin',\n  createdAt: '2024-01-01T00:00:00Z'\n};\n\nconst mockTestCases = [\n  {\n    id: '81',\n    name: 'Test Case 1',\n    title: 'Test Case 1',\n    description: 'Test description 1',\n    status: 'Inactive' as const,\n    priority: 'High' as const,\n    steps: ['Step 1', 'Step 2'],\n    expected: 'Expected result 1',\n    lastUpdated: '2024-01-01T00:00:00Z',\n    tags: ['test'],\n    createdBy: 'admin',\n    createdAt: '2024-01-01T00:00:00Z',\n    updatedAt: '2024-01-01T00:00:00Z'\n  }\n];\n\n// Mock callbacks\nconst mockOnTestCaseUpdate = jest.fn();\nconst mockOnBulkUpdate = jest.fn();\nconst mockOnAddTestCases = jest.fn();\nconst mockOnTestCasesLoad = jest.fn();\n\n// Mock API hooks\njest.mock('../src/renderer/services/api', () => ({\n  api: {\n    reducerPath: 'api',\n    reducer: (state = {}, action: any) => state,\n    middleware: () => (next: any) => (action: any) => next(action),\n  },\n  useGetReleaseTestCasesQuery: jest.fn(),\n  useUpdateReleaseExecutionStatsMutation: jest.fn(),\n  useGetReleaseExecutionStatsQuery: jest.fn(),\n  useUpdateTestCaseStatusMutation: jest.fn(),\n  useGetTestFoldersQuery: jest.fn(),\n  useGetImportedFoldersQuery: jest.fn(),\n  useAddImportedFoldersMutation: jest.fn(),\n  useRemoveImportedFolderMutation: jest.fn(),\n}));\n\nimport {\n  useGetReleaseTestCasesQuery,\n  useUpdateReleaseExecutionStatsMutation,\n  useGetReleaseExecutionStatsQuery,\n  useUpdateTestCaseStatusMutation,\n  useGetTestFoldersQuery,\n  useGetImportedFoldersQuery,\n  useAddImportedFoldersMutation,\n  useRemoveImportedFolderMutation,\n} from '../src/renderer/services/api';\n\ndescribe('ExecutionView Folder Synchronization Tests', () => {\n  let mockStore: ReturnType<typeof createMockStore>;\n\n  const mockFolderTestCases = [\n    {\n      id: '81',\n      name: 'Test Case 1',\n      title: 'Test Case 1',\n      description: 'Test description 1',\n      status: 'Inactive' as const,\n      priority: 'High' as const,\n      steps: ['Step 1', 'Step 2'],\n      expected: 'Expected result 1',\n      lastUpdated: '2024-01-01T00:00:00Z',\n      tags: ['test'],\n      createdBy: 'admin',\n      createdAt: '2024-01-01T00:00:00Z',\n      updatedAt: '2024-01-01T00:00:00Z'\n    }\n  ];\n\n  const mockImportedFolders = [\n    {\n      id: 'folder-1',\n      name: 'Test Folder',\n      path: '/test/folder',\n      testCases: mockFolderTestCases\n    }\n  ];\n\n  beforeEach(() => {\n    mockStore = createMockStore();\n    \n    // Reset all mocks\n    jest.clearAllMocks();\n    \n    // Setup default mock implementations\n    (useGetReleaseTestCasesQuery as jest.Mock).mockReturnValue({\n      data: mockApiTestCases,\n      isLoading: false,\n      error: null,\n      refetch: jest.fn(),\n    });\n\n    (useGetReleaseExecutionStatsQuery as jest.Mock).mockReturnValue({\n      data: mockExecutionStats,\n      isLoading: false,\n      error: null,\n      refetch: jest.fn(),\n    });\n\n    (useUpdateTestCaseStatusMutation as jest.Mock).mockReturnValue([\n      jest.fn().mockResolvedValue({ data: { success: true } }),\n    ]);\n\n    (useUpdateReleaseExecutionStatsMutation as jest.Mock).mockReturnValue([\n      jest.fn().mockResolvedValue({ data: { success: true } }),\n    ]);\n\n    (useGetTestFoldersQuery as jest.Mock).mockReturnValue({\n      data: [],\n    });\n\n    (useGetImportedFoldersQuery as jest.Mock).mockReturnValue({\n      data: mockImportedFolders,\n      refetch: jest.fn(),\n    });\n\n    (useAddImportedFoldersMutation as jest.Mock).mockReturnValue([\n      jest.fn().mockResolvedValue({ data: { success: true } }),\n    ]);\n\n    (useRemoveImportedFolderMutation as jest.Mock).mockReturnValue([\n      jest.fn().mockResolvedValue({ data: { success: true } }),\n    ]);\n\n    // 폴더 테스트케이스 API 모킹\n    global.fetch = jest.fn().mockResolvedValue({\n      ok: true,\n      json: () => Promise.resolve({ data: mockFolderTestCases })\n    });\n  });\n\n  const renderExecutionView = () => {\n    return render(\n      <Provider store={mockStore}>\n        <ExecutionView\n          release={mockRelease}\n          testCases={mockTestCases}\n          onTestCaseUpdate={mockOnTestCaseUpdate}\n          onBulkUpdate={mockOnBulkUpdate}\n          onAddTestCases={mockOnAddTestCases}\n          onTestCasesLoad={mockOnTestCasesLoad}\n        />\n      </Provider>\n    );\n  };\n\n  describe('폴더 선택 상태 동기화', () => {\n    it('폴더 선택 시 해당 폴더의 테스트케이스만 표시되어야 한다', async () => {\n      renderExecutionView();\n      \n      // 폴더 추가 버튼 클릭\n      const addFolderButton = screen.getByText('+ 폴더 추가');\n      fireEvent.click(addFolderButton);\n      \n      // 폴더 선택 (실제 구현에서는 모달이 열리고 폴더를 선택해야 함)\n      // 여기서는 모킹된 폴더 데이터를 직접 설정\n      await waitFor(() => {\n        expect(screen.getByText('Test Case 1')).toBeInTheDocument();\n      });\n    });\n\n    it('폴더 선택 상태에서 상태 변경 시 즉시 UI에 반영되어야 한다', async () => {\n      const mockUpdateStatus = jest.fn().mockResolvedValue({ \n        data: { success: true, message: '상태가 업데이트되었습니다.' } \n      });\n      \n      (useUpdateTestCaseStatusMutation as jest.Mock).mockReturnValue([\n        mockUpdateStatus,\n      ]);\n\n      renderExecutionView();\n      \n      // 드롭다운 버튼 찾기 (실제 UI에서는 status-text 클래스를 가진 요소)\n      const dropdownButton = screen.getByText('Inactive');\n      fireEvent.click(dropdownButton);\n      \n      // Pass 상태 선택\n      await waitFor(() => {\n        const passOption = screen.getByText('Pass');\n        fireEvent.click(passOption);\n      });\n      \n      // 즉시 UI에 반영되어야 함\n      await waitFor(() => {\n        expect(screen.getByText('Pass')).toBeInTheDocument();\n        expect(screen.queryByText('Inactive')).not.toBeInTheDocument();\n      });\n      \n      // API 호출 확인\n      expect(mockUpdateStatus).toHaveBeenCalledWith({\n        releaseId: 'test-release-id',\n        testCaseId: '81',\n        status: 'Pass',\n        comment: ''\n      });\n    });\n\n    it('폴더 선택 해제 후 전체 테스트케이스에서 변경된 상태가 유지되어야 한다', async () => {\n      const mockUpdateStatus = jest.fn().mockResolvedValue({ \n        data: { success: true, message: '상태가 업데이트되었습니다.' } \n      });\n      \n      (useUpdateTestCaseStatusMutation as jest.Mock).mockReturnValue([\n        mockUpdateStatus,\n      ]);\n\n      renderExecutionView();\n      \n      // 상태 변경\n      const dropdownButton = screen.getByText('Inactive');\n      fireEvent.click(dropdownButton);\n      \n      await waitFor(() => {\n        const passOption = screen.getByText('Pass');\n        fireEvent.click(passOption);\n      });\n      \n      // 전체 테스트케이스에서도 변경된 상태가 유지되어야 함\n      await waitFor(() => {\n        expect(screen.getByText('Pass')).toBeInTheDocument();\n        expect(screen.queryByText('Inactive')).not.toBeInTheDocument();\n      });\n    });\n\n    it('전체 테스트케이스에서 상태 변경 시 폴더 선택 상태에서도 동기화되어야 한다', async () => {\n      const mockUpdateStatus = jest.fn().mockResolvedValue({ \n        data: { success: true, message: '상태가 업데이트되었습니다.' } \n      });\n      \n      (useUpdateTestCaseStatusMutation as jest.Mock).mockReturnValue([\n        mockUpdateStatus,\n      ]);\n\n      renderExecutionView();\n      \n      // 전체 테스트케이스에서 상태 변경\n      const dropdownButtons = screen.getAllByText(/Inactive|Pass|Fail|Block|Skip/);\n      const firstDropdownButton = dropdownButtons[0];\n      fireEvent.click(firstDropdownButton);\n      \n      await waitFor(() => {\n        const passOption = screen.getByText('Pass');\n        fireEvent.click(passOption);\n      });\n      \n      // 상태가 변경되었는지 확인\n      await waitFor(() => {\n        expect(screen.getByText('Pass')).toBeInTheDocument();\n        expect(screen.queryByText('Inactive')).not.toBeInTheDocument();\n      });\n    });\n\n    it('폴더 데이터 새로고침 시 로컬 상태 업데이트가 유지되어야 한다', async () => {\n      const mockUpdateStatus = jest.fn().mockResolvedValue({ \n        data: { success: true, message: '상태가 업데이트되었습니다.' } \n      });\n      \n      (useUpdateTestCaseStatusMutation as jest.Mock).mockReturnValue([\n        mockUpdateStatus,\n      ]);\n\n      // 폴더 데이터 새로고침 시 더 최신 로컬 상태를 반환하도록 모킹\n      global.fetch = jest.fn()\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve({ \n            data: [{ ...mockFolderTestCases[0], status: 'Pass', lastUpdated: '2024-01-01T00:00:00Z' }] \n          })\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: () => Promise.resolve({ \n            data: [{ ...mockFolderTestCases[0], status: 'Fail', lastUpdated: '2024-01-02T00:00:00Z' }] \n          })\n        });\n\n      renderExecutionView();\n      \n      // 상태 변경 (Pass로 변경)\n      const dropdownButton = screen.getByText('Inactive');\n      fireEvent.click(dropdownButton);\n      \n      await waitFor(() => {\n        const passOption = screen.getByText('Pass');\n        fireEvent.click(passOption);\n      });\n      \n      // API 호출 후 폴더 데이터 새로고침이 발생하더라도 로컬 상태가 유지되어야 함\n      await waitFor(() => {\n        expect(screen.getByText('Pass')).toBeInTheDocument();\n      });\n      \n      // API 호출 확인\n      expect(mockUpdateStatus).toHaveBeenCalledWith({\n        releaseId: 'test-release-id',\n        testCaseId: '81',\n        status: 'Pass',\n        comment: ''\n      });\n    });\n\n    it('폴더 선택 상태에서 상태 변경 시 부모 컴포넌트 콜백이 호출되어야 한다', async () => {\n      renderExecutionView();\n      \n      // 상태 변경\n      const dropdownButton = screen.getByText('Inactive');\n      fireEvent.click(dropdownButton);\n      \n      await waitFor(() => {\n        const passOption = screen.getByText('Pass');\n        fireEvent.click(passOption);\n      });\n      \n      // 부모 콜백 호출 확인\n      await waitFor(() => {\n        expect(mockOnTestCaseUpdate).toHaveBeenCalledWith('81', {\n          status: 'Pass',\n          lastUpdated: expect.any(String)\n        });\n      });\n    });\n\n    it('폴더 선택 상태와 전체 테스트케이스 상태가 완전히 동기화되어야 한다', async () => {\n      const mockUpdateStatus = jest.fn().mockResolvedValue({ \n        data: { success: true, message: '상태가 업데이트되었습니다.' } \n      });\n      \n      (useUpdateTestCaseStatusMutation as jest.Mock).mockReturnValue([\n        mockUpdateStatus,\n      ]);\n\n      renderExecutionView();\n      \n      // 1. 전체 테스트케이스에서 상태 변경\n      const dropdownButtons = screen.getAllByText(/Inactive|Pass|Fail|Block|Skip/);\n      const firstDropdownButton = dropdownButtons[0];\n      fireEvent.click(firstDropdownButton);\n      \n      await waitFor(() => {\n        const passOption = screen.getByText('Pass');\n        fireEvent.click(passOption);\n      });\n      \n      // 2. 상태가 변경되었는지 확인\n      await waitFor(() => {\n        expect(screen.getByText('Pass')).toBeInTheDocument();\n      });\n      \n      // 3. 다시 상태 변경 (Fail로 변경)\n      const updatedDropdownButton = screen.getByText('Pass');\n      fireEvent.click(updatedDropdownButton);\n      \n      await waitFor(() => {\n        const failOption = screen.getByText('Fail');\n        fireEvent.click(failOption);\n      });\n      \n      // 4. 변경된 상태가 유지되어야 함\n      await waitFor(() => {\n        expect(screen.getByText('Fail')).toBeInTheDocument();\n        expect(screen.queryByText('Pass')).not.toBeInTheDocument();\n      });\n    });\n  });\n});\n"],"version":3}