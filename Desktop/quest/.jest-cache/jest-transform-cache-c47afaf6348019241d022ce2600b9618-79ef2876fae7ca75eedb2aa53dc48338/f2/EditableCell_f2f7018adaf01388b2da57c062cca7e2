f8bca11680c8b0a16ed38b30be9745e9
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const styled_components_1 = __importDefault(require("styled-components"));
const CellContainer = styled_components_1.default.div `
  position: relative;
  width: 100%;
  height: 100%;
`;
const DisplayValue = styled_components_1.default.div `
  padding: 8px 12px;
  border: 2px solid transparent;
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.2s ease;
  
  &:hover {
    border-color: #e2e8f0;
    background-color: #f8fafc;
  }
  
  &.editing {
    border-color: #3b82f6;
    background-color: #eff6ff;
  }
`;
const Input = styled_components_1.default.input `
  width: 100%;
  padding: 8px 12px;
  border: 2px solid #3b82f6;
  border-radius: 4px;
  font-size: inherit;
  font-family: inherit;
  outline: none;
  background-color: white;
  
  &:focus {
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }
`;
const Select = styled_components_1.default.select `
  width: 100%;
  padding: 8px 12px;
  border: 2px solid #3b82f6;
  border-radius: 4px;
  font-size: inherit;
  font-family: inherit;
  outline: none;
  background-color: white;
  cursor: pointer;
  
  &:focus {
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }
`;
const Checkbox = styled_components_1.default.input `
  width: 18px;
  height: 18px;
  cursor: pointer;
  accent-color: #3b82f6;
`;
const SaveIndicator = styled_components_1.default.div `
  position: absolute;
  top: -20px;
  right: 0;
  background-color: #10b981;
  color: white;
  padding: 2px 6px;
  border-radius: 4px;
  font-size: 12px;
  opacity: 0;
  transition: opacity 0.3s ease;
  
  &.saving {
    opacity: 1;
  }
`;
const EditableCell = ({ value, type = 'text', options = [], onSave, onCancel, placeholder = '', disabled = false, className = '' }) => {
    const [isEditing, setIsEditing] = (0, react_1.useState)(false);
    const [editValue, setEditValue] = (0, react_1.useState)(value);
    const [isSaving, setIsSaving] = (0, react_1.useState)(false);
    const inputRef = (0, react_1.useRef)(null);
    const selectRef = (0, react_1.useRef)(null);
    const saveTimeoutRef = (0, react_1.useRef)(undefined);
    // 편집 모드 진입
    const startEditing = (0, react_1.useCallback)(() => {
        if (disabled)
            return;
        setIsEditing(true);
        setEditValue(value);
    }, [disabled, value]);
    // 편집 모드 종료
    const stopEditing = (0, react_1.useCallback)(() => {
        setIsEditing(false);
        setIsSaving(false);
        if (saveTimeoutRef.current) {
            clearTimeout(saveTimeoutRef.current);
        }
    }, []);
    // 저장 실행
    const saveValue = (0, react_1.useCallback)(() => {
        if (editValue !== value) {
            setIsSaving(true);
            onSave(editValue);
            // 저장 완료 표시 후 숨김
            setTimeout(() => {
                setIsSaving(false);
            }, 1000);
        }
        stopEditing();
    }, [editValue, value, onSave, stopEditing]);
    // 취소
    const cancelEdit = (0, react_1.useCallback)(() => {
        setEditValue(value);
        stopEditing();
        onCancel?.();
    }, [value, stopEditing, onCancel]);
    // 자동저장 (debounce)
    const debouncedSave = (0, react_1.useCallback)(() => {
        if (saveTimeoutRef.current) {
            clearTimeout(saveTimeoutRef.current);
        }
        saveTimeoutRef.current = setTimeout(() => {
            if (editValue !== value) {
                setIsSaving(true);
                onSave(editValue);
                setTimeout(() => setIsSaving(false), 1000);
            }
        }, 500);
    }, [editValue, value, onSave]);
    // 키보드 이벤트 처리
    const handleKeyDown = (0, react_1.useCallback)((e) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            saveValue();
        }
        else if (e.key === 'Escape') {
            e.preventDefault();
            cancelEdit();
        }
    }, [saveValue, cancelEdit]);
    // 값 변경 시 자동저장
    (0, react_1.useEffect)(() => {
        if (isEditing && editValue !== value) {
            debouncedSave();
        }
    }, [editValue, isEditing, value, debouncedSave]);
    // 포커스 관리
    (0, react_1.useEffect)(() => {
        if (isEditing) {
            if (type === 'select' && selectRef.current) {
                selectRef.current.focus();
            }
            else if (inputRef.current) {
                inputRef.current.focus();
                inputRef.current.select();
            }
        }
    }, [isEditing, type]);
    // 값 변경 시 편집값 동기화
    (0, react_1.useEffect)(() => {
        if (!isEditing) {
            setEditValue(value);
        }
    }, [value, isEditing]);
    // 렌더링 함수들
    const renderDisplayValue = () => {
        if (type === 'checkbox') {
            return ((0, jsx_runtime_1.jsx)(Checkbox, { type: "checkbox", checked: Boolean(value), onChange: (e) => onSave(e.target.checked), disabled: disabled }));
        }
        if (type === 'select') {
            const option = options.find(opt => opt.value === String(value));
            return option?.label || String(value);
        }
        return String(value);
    };
    const renderEditInput = () => {
        if (type === 'select') {
            return ((0, jsx_runtime_1.jsx)(Select, { ref: selectRef, value: String(editValue), onChange: (e) => setEditValue(e.target.value), onKeyDown: handleKeyDown, onBlur: saveValue, children: options.map(option => ((0, jsx_runtime_1.jsx)("option", { value: option.value, children: option.label }, option.value))) }));
        }
        if (type === 'checkbox') {
            return ((0, jsx_runtime_1.jsx)(Checkbox, { type: "checkbox", checked: Boolean(editValue), onChange: (e) => setEditValue(e.target.checked), onKeyDown: handleKeyDown, onBlur: saveValue }));
        }
        return ((0, jsx_runtime_1.jsx)(Input, { ref: inputRef, type: "text", value: String(editValue), onChange: (e) => setEditValue(e.target.value), onKeyDown: handleKeyDown, onBlur: saveValue, placeholder: placeholder }));
    };
    return ((0, jsx_runtime_1.jsxs)(CellContainer, { className: className, children: [isEditing ? (renderEditInput()) : ((0, jsx_runtime_1.jsx)(DisplayValue, { onClick: startEditing, className: isEditing ? 'editing' : '', children: renderDisplayValue() })), (0, jsx_runtime_1.jsx)(SaveIndicator, { className: isSaving ? 'saving' : '', children: "\uC800\uC7A5\uB428" })] }));
};
exports.default = EditableCell;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,