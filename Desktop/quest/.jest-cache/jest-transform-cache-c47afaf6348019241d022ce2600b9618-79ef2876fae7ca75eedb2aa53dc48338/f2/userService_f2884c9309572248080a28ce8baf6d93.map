{"file":"/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/src/main/app/domains/users/services/userService.ts","mappings":";;;;;AAMA,gCAmBC;AAED,gDAoBC;AAED,4CAEC;AAlDD,wEAAwE;AACxE,oDAA4B;AAE5B,MAAM,WAAW,GAAG,EAAE,CAAC;AAEhB,KAAK,UAAU,UAAU,CAAC,QAAgB,EAAE,QAAgB,EAAE,IAAc;IAC/E,MAAM,IAAI,GAAG,MAAM,gBAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;IACtD,MAAM,QAAQ,GAAG,IAAA,sBAAW,GAAE,CAAC;IAC/B,IAAI,CAAC,QAAQ,EAAE,CAAC;QACZ,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;IACtD,CAAC;IACD,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,KAAK,CAC/B,qHAAqH,EACrH,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,CACzB,CAAC;IACF,OAAO;QACH,EAAE,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;QACrB,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ;QACjC,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;QACjC,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ;QACjC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI;QACzB,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU;QACpC,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU;KACpE,CAAC;AACN,CAAC;AAEM,KAAK,UAAU,kBAAkB,CAAC,QAAgB;IACrD,MAAM,QAAQ,GAAG,IAAA,sBAAW,GAAE,CAAC;IAC/B,IAAI,CAAC,QAAQ,EAAE,CAAC;QACZ,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;IACtD,CAAC;IACD,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,KAAK,CAC/B,gFAAgF,EAChF,CAAC,QAAQ,CAAC,CACb,CAAC;IACF,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC;QAAE,OAAO,IAAI,CAAC;IAC1C,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC3B,OAAO;QACH,EAAE,EAAE,GAAG,CAAC,EAAE;QACV,QAAQ,EAAE,GAAG,CAAC,QAAQ;QACtB,KAAK,EAAE,GAAG,CAAC,KAAK,IAAI,EAAE;QACtB,QAAQ,EAAE,GAAG,CAAC,QAAQ;QACtB,IAAI,EAAE,GAAG,CAAC,IAAI;QACd,SAAS,EAAE,GAAG,CAAC,UAAU;QACzB,SAAS,EAAE,GAAG,CAAC,UAAU,IAAI,GAAG,CAAC,UAAU;KAC9C,CAAC;AACN,CAAC;AAEM,KAAK,UAAU,gBAAgB,CAAC,IAAU,EAAE,QAAgB;IAC/D,OAAO,gBAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AACnD,CAAC","names":[],"sources":["/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/src/main/app/domains/users/services/userService.ts"],"sourcesContent":["import { User, UserRole } from '../types';\nimport { getPgClient } from '../../../infrastructure/database/pgClient';\nimport bcrypt from 'bcrypt';\n\nconst SALT_ROUNDS = 10;\n\nexport async function createUser(username: string, password: string, role: UserRole): Promise<User> {\n    const hash = await bcrypt.hash(password, SALT_ROUNDS);\n    const pgClient = getPgClient();\n    if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n    }\n    const result = await pgClient.query(\n        'INSERT INTO users (username, password, role) VALUES ($1, $2, $3) RETURNING id, username, password, role, created_at',\n        [username, hash, role]\n    );\n    return {\n        id: result.rows[0].id,\n        username: result.rows[0].username,\n        email: result.rows[0].email || '',\n        password: result.rows[0].password,\n        role: result.rows[0].role,\n        createdAt: result.rows[0].created_at,\n        updatedAt: result.rows[0].updated_at || result.rows[0].created_at,\n    };\n}\n\nexport async function findUserByUsername(username: string): Promise<User | null> {\n    const pgClient = getPgClient();\n    if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n    }\n    const result = await pgClient.query(\n        'SELECT id, username, password, role, created_at FROM users WHERE username = $1',\n        [username]\n    );\n    if (result.rows.length === 0) return null;\n    const row = result.rows[0];\n    return {\n        id: row.id,\n        username: row.username,\n        email: row.email || '',\n        password: row.password,\n        role: row.role,\n        createdAt: row.created_at,\n        updatedAt: row.updated_at || row.created_at,\n    };\n}\n\nexport async function validatePassword(user: User, password: string): Promise<boolean> {\n    return bcrypt.compare(password, user.password);\n} "],"version":3}