05332e0cbf33fe564dff1c522263464a
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createUser = createUser;
exports.findUserByUsername = findUserByUsername;
exports.validatePassword = validatePassword;
const pgClient_1 = require("../../../infrastructure/database/pgClient");
const bcrypt_1 = __importDefault(require("bcrypt"));
const SALT_ROUNDS = 10;
async function createUser(username, password, role) {
    const hash = await bcrypt_1.default.hash(password, SALT_ROUNDS);
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const result = await pgClient.query('INSERT INTO users (username, password, role) VALUES ($1, $2, $3) RETURNING id, username, password, role, created_at', [username, hash, role]);
    return {
        id: result.rows[0].id,
        username: result.rows[0].username,
        email: result.rows[0].email || '',
        password: result.rows[0].password,
        role: result.rows[0].role,
        createdAt: result.rows[0].created_at,
        updatedAt: result.rows[0].updated_at || result.rows[0].created_at,
    };
}
async function findUserByUsername(username) {
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const result = await pgClient.query('SELECT id, username, password, role, created_at FROM users WHERE username = $1', [username]);
    if (result.rows.length === 0)
        return null;
    const row = result.rows[0];
    return {
        id: row.id,
        username: row.username,
        email: row.email || '',
        password: row.password,
        role: row.role,
        createdAt: row.created_at,
        updatedAt: row.updated_at || row.created_at,
    };
}
async function validatePassword(user, password) {
    return bcrypt_1.default.compare(password, user.password);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0RvY3VtZW50cy9xdWVzdC9EZXNrdG9wL3F1ZXN0L3NyYy9tYWluL2FwcC9kb21haW5zL3VzZXJzL3NlcnZpY2VzL3VzZXJTZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBTUEsZ0NBbUJDO0FBRUQsZ0RBb0JDO0FBRUQsNENBRUM7QUFsREQsd0VBQXdFO0FBQ3hFLG9EQUE0QjtBQUU1QixNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUM7QUFFaEIsS0FBSyxVQUFVLFVBQVUsQ0FBQyxRQUFnQixFQUFFLFFBQWdCLEVBQUUsSUFBYztJQUMvRSxNQUFNLElBQUksR0FBRyxNQUFNLGdCQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUN0RCxNQUFNLFFBQVEsR0FBRyxJQUFBLHNCQUFXLEdBQUUsQ0FBQztJQUMvQixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDWixNQUFNLElBQUksS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUNELE1BQU0sTUFBTSxHQUFHLE1BQU0sUUFBUSxDQUFDLEtBQUssQ0FDL0IscUhBQXFILEVBQ3JILENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FDekIsQ0FBQztJQUNGLE9BQU87UUFDSCxFQUFFLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ3JCLFFBQVEsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVE7UUFDakMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDakMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUTtRQUNqQyxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJO1FBQ3pCLFNBQVMsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVU7UUFDcEMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVTtLQUNwRSxDQUFDO0FBQ04sQ0FBQztBQUVNLEtBQUssVUFBVSxrQkFBa0IsQ0FBQyxRQUFnQjtJQUNyRCxNQUFNLFFBQVEsR0FBRyxJQUFBLHNCQUFXLEdBQUUsQ0FBQztJQUMvQixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDWixNQUFNLElBQUksS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUNELE1BQU0sTUFBTSxHQUFHLE1BQU0sUUFBUSxDQUFDLEtBQUssQ0FDL0IsZ0ZBQWdGLEVBQ2hGLENBQUMsUUFBUSxDQUFDLENBQ2IsQ0FBQztJQUNGLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQztRQUFFLE9BQU8sSUFBSSxDQUFDO0lBQzFDLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0IsT0FBTztRQUNILEVBQUUsRUFBRSxHQUFHLENBQUMsRUFBRTtRQUNWLFFBQVEsRUFBRSxHQUFHLENBQUMsUUFBUTtRQUN0QixLQUFLLEVBQUUsR0FBRyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3RCLFFBQVEsRUFBRSxHQUFHLENBQUMsUUFBUTtRQUN0QixJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUk7UUFDZCxTQUFTLEVBQUUsR0FBRyxDQUFDLFVBQVU7UUFDekIsU0FBUyxFQUFFLEdBQUcsQ0FBQyxVQUFVLElBQUksR0FBRyxDQUFDLFVBQVU7S0FDOUMsQ0FBQztBQUNOLENBQUM7QUFFTSxLQUFLLFVBQVUsZ0JBQWdCLENBQUMsSUFBVSxFQUFFLFFBQWdCO0lBQy9ELE9BQU8sZ0JBQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNuRCxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy8zaS1hMS0yMDIxLTAxNy9Eb2N1bWVudHMvcXVlc3QvRGVza3RvcC9xdWVzdC9zcmMvbWFpbi9hcHAvZG9tYWlucy91c2Vycy9zZXJ2aWNlcy91c2VyU2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBVc2VyLCBVc2VyUm9sZSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IGdldFBnQ2xpZW50IH0gZnJvbSAnLi4vLi4vLi4vaW5mcmFzdHJ1Y3R1cmUvZGF0YWJhc2UvcGdDbGllbnQnO1xuaW1wb3J0IGJjcnlwdCBmcm9tICdiY3J5cHQnO1xuXG5jb25zdCBTQUxUX1JPVU5EUyA9IDEwO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlVXNlcih1c2VybmFtZTogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nLCByb2xlOiBVc2VyUm9sZSk6IFByb21pc2U8VXNlcj4ge1xuICAgIGNvbnN0IGhhc2ggPSBhd2FpdCBiY3J5cHQuaGFzaChwYXNzd29yZCwgU0FMVF9ST1VORFMpO1xuICAgIGNvbnN0IHBnQ2xpZW50ID0gZ2V0UGdDbGllbnQoKTtcbiAgICBpZiAoIXBnQ2xpZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUG9zdGdyZVNRTCDtgbTrnbzsnbTslrjtirjqsIAg7LSI6riw7ZmU65CY7KeAIOyViuyVmOyKteuLiOuLpC4nKTtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcGdDbGllbnQucXVlcnkoXG4gICAgICAgICdJTlNFUlQgSU5UTyB1c2VycyAodXNlcm5hbWUsIHBhc3N3b3JkLCByb2xlKSBWQUxVRVMgKCQxLCAkMiwgJDMpIFJFVFVSTklORyBpZCwgdXNlcm5hbWUsIHBhc3N3b3JkLCByb2xlLCBjcmVhdGVkX2F0JyxcbiAgICAgICAgW3VzZXJuYW1lLCBoYXNoLCByb2xlXVxuICAgICk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaWQ6IHJlc3VsdC5yb3dzWzBdLmlkLFxuICAgICAgICB1c2VybmFtZTogcmVzdWx0LnJvd3NbMF0udXNlcm5hbWUsXG4gICAgICAgIGVtYWlsOiByZXN1bHQucm93c1swXS5lbWFpbCB8fCAnJyxcbiAgICAgICAgcGFzc3dvcmQ6IHJlc3VsdC5yb3dzWzBdLnBhc3N3b3JkLFxuICAgICAgICByb2xlOiByZXN1bHQucm93c1swXS5yb2xlLFxuICAgICAgICBjcmVhdGVkQXQ6IHJlc3VsdC5yb3dzWzBdLmNyZWF0ZWRfYXQsXG4gICAgICAgIHVwZGF0ZWRBdDogcmVzdWx0LnJvd3NbMF0udXBkYXRlZF9hdCB8fCByZXN1bHQucm93c1swXS5jcmVhdGVkX2F0LFxuICAgIH07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmaW5kVXNlckJ5VXNlcm5hbWUodXNlcm5hbWU6IHN0cmluZyk6IFByb21pc2U8VXNlciB8IG51bGw+IHtcbiAgICBjb25zdCBwZ0NsaWVudCA9IGdldFBnQ2xpZW50KCk7XG4gICAgaWYgKCFwZ0NsaWVudCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Bvc3RncmVTUUwg7YG065287J207Ja47Yq46rCAIOy0iOq4sO2ZlOuQmOyngCDslYrslZjsirXri4jri6QuJyk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHBnQ2xpZW50LnF1ZXJ5KFxuICAgICAgICAnU0VMRUNUIGlkLCB1c2VybmFtZSwgcGFzc3dvcmQsIHJvbGUsIGNyZWF0ZWRfYXQgRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ICQxJyxcbiAgICAgICAgW3VzZXJuYW1lXVxuICAgICk7XG4gICAgaWYgKHJlc3VsdC5yb3dzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGw7XG4gICAgY29uc3Qgcm93ID0gcmVzdWx0LnJvd3NbMF07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaWQ6IHJvdy5pZCxcbiAgICAgICAgdXNlcm5hbWU6IHJvdy51c2VybmFtZSxcbiAgICAgICAgZW1haWw6IHJvdy5lbWFpbCB8fCAnJyxcbiAgICAgICAgcGFzc3dvcmQ6IHJvdy5wYXNzd29yZCxcbiAgICAgICAgcm9sZTogcm93LnJvbGUsXG4gICAgICAgIGNyZWF0ZWRBdDogcm93LmNyZWF0ZWRfYXQsXG4gICAgICAgIHVwZGF0ZWRBdDogcm93LnVwZGF0ZWRfYXQgfHwgcm93LmNyZWF0ZWRfYXQsXG4gICAgfTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHZhbGlkYXRlUGFzc3dvcmQodXNlcjogVXNlciwgcGFzc3dvcmQ6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybiBiY3J5cHQuY29tcGFyZShwYXNzd29yZCwgdXNlci5wYXNzd29yZCk7XG59ICJdLCJ2ZXJzaW9uIjozfQ==