7928b4f171542be132d1bb2294ca3645
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensurePgConnected = ensurePgConnected;
exports.testPgConnection = testPgConnection;
exports.getPgClient = getPgClient;
const pg_1 = require("pg");
let pgClient = null;
let isConnected = false;
function createClient() {
    const config = {
        user: process.env.PGUSER || 'postgres',
        host: process.env.PGHOST || 'localhost',
        database: process.env.PGDATABASE || 'itms',
        password: process.env.PGPASSWORD,
        port: Number(process.env.PGPORT) || 5432,
    };
    // 비밀번호가 설정되지 않은 경우 undefined로 설정 (macOS에서는 비밀번호 없이도 접속 가능)
    if (!config.password) {
        config.password = undefined;
    }
    return new pg_1.Client(config);
}
async function ensurePgConnected() {
    if (!isConnected) {
        if (!pgClient) {
            pgClient = createClient();
        }
        await pgClient.connect();
        isConnected = true;
    }
}
async function testPgConnection() {
    try {
        await ensurePgConnected();
        if (pgClient) {
            await pgClient.query('SELECT NOW()');
        }
        return true;
    }
    catch (err) {
        return false;
    }
}
function getPgClient() {
    return pgClient;
}
exports.default = pgClient;
// users 테이블 생성 예시
// CREATE TABLE users (
//   id SERIAL PRIMARY KEY,
//   username VARCHAR(64) UNIQUE NOT NULL,
//   password VARCHAR(128) NOT NULL,
//   role VARCHAR(16) NOT NULL,
//   created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
// ); 
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0RvY3VtZW50cy9xdWVzdC9EZXNrdG9wL3F1ZXN0L3NyYy9tYWluL2FwcC9pbmZyYXN0cnVjdHVyZS9kYXRhYmFzZS9wZ0NsaWVudC50cyIsIm1hcHBpbmdzIjoiOztBQXNCQSw4Q0FRQztBQUVELDRDQVVDO0FBRUQsa0NBRUM7QUE5Q0QsMkJBQTRCO0FBRTVCLElBQUksUUFBUSxHQUFrQixJQUFJLENBQUM7QUFDbkMsSUFBSSxXQUFXLEdBQUcsS0FBSyxDQUFDO0FBRXhCLFNBQVMsWUFBWTtJQUNqQixNQUFNLE1BQU0sR0FBRztRQUNYLElBQUksRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sSUFBSSxVQUFVO1FBQ3RDLElBQUksRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sSUFBSSxXQUFXO1FBQ3ZDLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsSUFBSSxNQUFNO1FBQzFDLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVU7UUFDaEMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUk7S0FDM0MsQ0FBQztJQUVGLDJEQUEyRDtJQUMzRCxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ25CLE1BQU0sQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxPQUFPLElBQUksV0FBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzlCLENBQUM7QUFFTSxLQUFLLFVBQVUsaUJBQWlCO0lBQ25DLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNmLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNaLFFBQVEsR0FBRyxZQUFZLEVBQUUsQ0FBQztRQUM5QixDQUFDO1FBQ0QsTUFBTSxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDekIsV0FBVyxHQUFHLElBQUksQ0FBQztJQUN2QixDQUFDO0FBQ0wsQ0FBQztBQUVNLEtBQUssVUFBVSxnQkFBZ0I7SUFDbEMsSUFBSSxDQUFDO1FBQ0QsTUFBTSxpQkFBaUIsRUFBRSxDQUFDO1FBQzFCLElBQUksUUFBUSxFQUFFLENBQUM7WUFDWCxNQUFNLFFBQVEsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDekMsQ0FBQztRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ1gsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztBQUNMLENBQUM7QUFFRCxTQUFnQixXQUFXO0lBQ3ZCLE9BQU8sUUFBUSxDQUFDO0FBQ3BCLENBQUM7QUFFRCxrQkFBZSxRQUFRLENBQUM7QUFFeEIsa0JBQWtCO0FBQ2xCLHVCQUF1QjtBQUN2QiwyQkFBMkI7QUFDM0IsMENBQTBDO0FBQzFDLG9DQUFvQztBQUNwQywrQkFBK0I7QUFDL0IsbURBQW1EO0FBQ25ELE1BQU0iLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0RvY3VtZW50cy9xdWVzdC9EZXNrdG9wL3F1ZXN0L3NyYy9tYWluL2FwcC9pbmZyYXN0cnVjdHVyZS9kYXRhYmFzZS9wZ0NsaWVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDbGllbnQgfSBmcm9tICdwZyc7XG5cbmxldCBwZ0NsaWVudDogQ2xpZW50IHwgbnVsbCA9IG51bGw7XG5sZXQgaXNDb25uZWN0ZWQgPSBmYWxzZTtcblxuZnVuY3Rpb24gY3JlYXRlQ2xpZW50KCkge1xuICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgICAgdXNlcjogcHJvY2Vzcy5lbnYuUEdVU0VSIHx8ICdwb3N0Z3JlcycsXG4gICAgICAgIGhvc3Q6IHByb2Nlc3MuZW52LlBHSE9TVCB8fCAnbG9jYWxob3N0JyxcbiAgICAgICAgZGF0YWJhc2U6IHByb2Nlc3MuZW52LlBHREFUQUJBU0UgfHwgJ2l0bXMnLFxuICAgICAgICBwYXNzd29yZDogcHJvY2Vzcy5lbnYuUEdQQVNTV09SRCxcbiAgICAgICAgcG9ydDogTnVtYmVyKHByb2Nlc3MuZW52LlBHUE9SVCkgfHwgNTQzMixcbiAgICB9O1xuXG4gICAgLy8g67mE67CA67KI7Zi46rCAIOyEpOygleuQmOyngCDslYrsnYAg6rK97JqwIHVuZGVmaW5lZOuhnCDshKTsoJUgKG1hY09T7JeQ7ISc64qUIOu5hOuwgOuyiO2YuCDsl4bsnbTrj4Qg7KCR7IaNIOqwgOuKpSlcbiAgICBpZiAoIWNvbmZpZy5wYXNzd29yZCkge1xuICAgICAgICBjb25maWcucGFzc3dvcmQgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBDbGllbnQoY29uZmlnKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGVuc3VyZVBnQ29ubmVjdGVkKCkge1xuICAgIGlmICghaXNDb25uZWN0ZWQpIHtcbiAgICAgICAgaWYgKCFwZ0NsaWVudCkge1xuICAgICAgICAgICAgcGdDbGllbnQgPSBjcmVhdGVDbGllbnQoKTtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBwZ0NsaWVudC5jb25uZWN0KCk7XG4gICAgICAgIGlzQ29ubmVjdGVkID0gdHJ1ZTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB0ZXN0UGdDb25uZWN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGVuc3VyZVBnQ29ubmVjdGVkKCk7XG4gICAgICAgIGlmIChwZ0NsaWVudCkge1xuICAgICAgICAgICAgYXdhaXQgcGdDbGllbnQucXVlcnkoJ1NFTEVDVCBOT1coKScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGdDbGllbnQoKSB7XG4gICAgcmV0dXJuIHBnQ2xpZW50O1xufVxuXG5leHBvcnQgZGVmYXVsdCBwZ0NsaWVudDtcblxuLy8gdXNlcnMg7YWM7J2067iUIOyDneyEsSDsmIjsi5xcbi8vIENSRUFURSBUQUJMRSB1c2VycyAoXG4vLyAgIGlkIFNFUklBTCBQUklNQVJZIEtFWSxcbi8vICAgdXNlcm5hbWUgVkFSQ0hBUig2NCkgVU5JUVVFIE5PVCBOVUxMLFxuLy8gICBwYXNzd29yZCBWQVJDSEFSKDEyOCkgTk9UIE5VTEwsXG4vLyAgIHJvbGUgVkFSQ0hBUigxNikgTk9UIE5VTEwsXG4vLyAgIGNyZWF0ZWRfYXQgVElNRVNUQU1QIERFRkFVTFQgQ1VSUkVOVF9USU1FU1RBTVBcbi8vICk7ICJdLCJ2ZXJzaW9uIjozfQ==