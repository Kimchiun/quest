{"file":"/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/tests/folder.service.test.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/tests/folder.service.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, jest } from '@jest/globals';\nimport * as folderService from '../src/main/app/domains/folders/services/folderService';\nimport * as folderRepository from '../src/main/app/domains/folders/repositories/folderRepository';\n\n// Mock folderRepository\njest.mock('../src/main/app/domains/folders/repositories/folderRepository');\nconst mockFolderRepository = folderRepository as jest.Mocked<typeof folderRepository>;\n\ndescribe('Folder Service', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('createFolder', () => {\n    it('should create a folder successfully', async () => {\n      const folderData = {\n        name: 'Test Folder',\n        description: 'Test Description',\n        parentId: undefined,\n        projectId: 1\n      };\n\n      const expectedFolder = {\n        id: 1,\n        name: 'Test Folder',\n        description: 'Test Description',\n        parentId: undefined,\n        projectId: 1,\n        orderIndex: 100,\n        depth: 0,\n        createdBy: 'testuser',\n        isLocked: false,\n        isArchived: false,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      mockFolderRepository.createFolder.mockResolvedValue(expectedFolder);\n\n      const result = await folderService.createFolder(folderData, 'testuser');\n\n      expect(result).toEqual(expectedFolder);\n      expect(mockFolderRepository.createFolder).toHaveBeenCalledWith(folderData);\n    });\n  });\n\n  describe('getFolderById', () => {\n    it('should return folder when found', async () => {\n      const folderId = 1;\n      const expectedFolder = {\n        id: 1,\n        name: 'Test Folder',\n        description: 'Test Description',\n        parentId: undefined,\n        projectId: 1,\n        orderIndex: 100,\n        depth: 0,\n        createdBy: 'testuser',\n        isLocked: false,\n        isArchived: false,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      mockFolderRepository.getFolderById.mockResolvedValue(expectedFolder);\n\n      const result = await folderService.getFolderById(folderId);\n\n      expect(result).toEqual(expectedFolder);\n      expect(mockFolderRepository.getFolderById).toHaveBeenCalledWith(folderId);\n    });\n\n    it('should return null when folder not found', async () => {\n      const folderId = 999;\n\n      mockFolderRepository.getFolderById.mockResolvedValue(null);\n\n      const result = await folderService.getFolderById(folderId);\n\n      expect(result).toBeNull();\n      expect(mockFolderRepository.getFolderById).toHaveBeenCalledWith(folderId);\n    });\n  });\n\n  describe('listFolders', () => {\n    it('should return list of folders', async () => {\n      const expectedFolders = [\n        {\n          id: 1,\n          name: 'Folder 1',\n          description: 'Description 1',\n          parentId: undefined,\n          projectId: 1,\n          orderIndex: 100,\n          depth: 0,\n          createdBy: 'testuser',\n          isLocked: false,\n          isArchived: false,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        },\n        {\n          id: 2,\n          name: 'Folder 2',\n          description: 'Description 2',\n          parentId: 1,\n          projectId: 1,\n          orderIndex: 200,\n          depth: 1,\n          createdBy: 'testuser',\n          isLocked: false,\n          isArchived: false,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        }\n      ];\n\n      mockFolderRepository.listFolders.mockResolvedValue(expectedFolders);\n\n      const result = await folderService.listFoldersByProject(1);\n\n      expect(result).toEqual(expectedFolders);\n      expect(mockFolderRepository.listFolders).toHaveBeenCalled();\n    });\n  });\n\n  describe('updateFolder', () => {\n    it('should update folder successfully', async () => {\n      const folderId = 1;\n      const updateData = {\n        name: 'Updated Folder',\n        description: 'Updated Description',\n        updatedBy: 'testuser'\n      };\n\n      const expectedFolder = {\n        id: 1,\n        name: 'Updated Folder',\n        description: 'Updated Description',\n        parentId: undefined,\n        projectId: 1,\n        orderIndex: 100,\n        depth: 0,\n        createdBy: 'testuser',\n        isLocked: false,\n        isArchived: false,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      mockFolderRepository.updateFolder.mockResolvedValue(expectedFolder);\n\n      const result = await folderService.updateFolder(folderId, updateData, 'testuser');\n\n      expect(result).toEqual(expectedFolder);\n      expect(mockFolderRepository.updateFolder).toHaveBeenCalledWith(folderId, { ...updateData, updatedBy: 'testuser' });\n    });\n\n    it('should return null when folder not found', async () => {\n      const folderId = 999;\n      const updateData = {\n        name: 'Updated Folder',\n        updatedBy: 'testuser'\n      };\n\n      mockFolderRepository.updateFolder.mockResolvedValue(null);\n\n      const result = await folderService.updateFolder(folderId, updateData, 'testuser');\n\n      expect(result).toBeNull();\n      expect(mockFolderRepository.updateFolder).toHaveBeenCalledWith(folderId, { ...updateData, updatedBy: 'testuser' });\n    });\n  });\n\n  describe('deleteFolder', () => {\n    it('should delete folder successfully', async () => {\n      const folderId = 1;\n\n      mockFolderRepository.deleteFolder.mockResolvedValue(true);\n\n      const result = await folderService.deleteFolder(folderId, 'soft', 'testuser');\n\n      expect(result).toBe(true);\n      expect(mockFolderRepository.deleteFolder).toHaveBeenCalledWith(folderId, 'soft', 'testuser');\n    });\n\n    it('should return false when folder not found', async () => {\n      const folderId = 999;\n\n      mockFolderRepository.deleteFolder.mockResolvedValue(false);\n\n      const result = await folderService.deleteFolder(folderId, 'soft', 'testuser');\n\n      expect(result).toBe(false);\n      expect(mockFolderRepository.deleteFolder).toHaveBeenCalledWith(folderId, 'soft', 'testuser');\n    });\n  });\n\n\n}); "],"version":3}