089e217e2fdb80e49a392c483ca33230
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// 모킹 설정 - 올바른 경로 사용
jest.mock('../src/main/app/infrastructure/database/pgClient', () => ({
    query: jest.fn().mockResolvedValue({ rows: [] }),
    connect: jest.fn().mockResolvedValue({}),
}));
jest.mock('../src/main/app/infrastructure/elasticsearch/esClient', () => ({
    search: jest.fn().mockResolvedValue({ hits: { hits: [] } }),
    index: jest.fn().mockResolvedValue({}),
}));
const util_1 = require("util");
global.TextEncoder = util_1.TextEncoder;
global.TextDecoder = util_1.TextDecoder;
// ClearImmediate 폴리필 추가
if (typeof global.clearImmediate === 'undefined') {
    global.clearImmediate = jest.fn();
}
if (typeof global.ReadableStream === 'undefined') {
    global.ReadableStream = require('stream').Readable;
}
if (typeof global.setImmediate === 'undefined') {
    global.setImmediate = (fn, ...args) => setTimeout(fn, 0, ...args);
}
const supertest_1 = __importDefault(require("supertest"));
const app_1 = __importDefault(require("../src/main/app/app"));
// 테스트용 fixture 데이터 - 스키마에 맞게 수정
const TESTCASE_ID = 1;
const RELEASE_ID = '550e8400-e29b-41d4-a716-446655440000'; // UUID 형식
const EXECUTED_BY = 'testuser';
let executionId;
describe('Execution API', () => {
    beforeEach(() => {
        // 각 테스트 전에 모킹 초기화
        jest.clearAllMocks();
        // PostgreSQL 모킹 설정 - 스키마에 맞게 수정
        const { query } = require('../src/main/app/infrastructure/database/pgClient');
        query.mockImplementation((sql, params) => {
            if (sql.includes('INSERT INTO executions')) {
                return Promise.resolve({ rows: [{ id: 1 }] });
            }
            if (sql.includes('SELECT * FROM executions')) {
                return Promise.resolve({
                    rows: [{
                            id: 1,
                            testcase_id: TESTCASE_ID,
                            release_id: RELEASE_ID, // UUID 형식
                            status: 'Fail',
                            executed_by: EXECUTED_BY,
                            executed_at: new Date().toISOString(),
                            comments: '테스트 실패' // comments (복수형)
                        }]
                });
            }
            if (sql.includes('UPDATE executions')) {
                return Promise.resolve({ rows: [{ id: 1, status: 'Pass', comments: '수정됨' }] });
            }
            if (sql.includes('DELETE FROM executions')) {
                return Promise.resolve({ rows: [] });
            }
            return Promise.resolve({ rows: [] });
        });
    });
    it('should create an execution', async () => {
        const res = await (0, supertest_1.default)(app_1.default)
            .post('/api/executions')
            .send({
            testcaseId: TESTCASE_ID,
            releaseId: RELEASE_ID, // UUID 형식
            status: 'Fail',
            executedBy: EXECUTED_BY,
            executedAt: new Date().toISOString(),
            comment: '테스트 실패' // comment (단수형)
        });
        expect(res.status).toBe(201);
        expect(res.body).toHaveProperty('id');
        executionId = res.body.id;
    }, 60000);
    it('should get execution by id', async () => {
        const res = await (0, supertest_1.default)(app_1.default).get(`/api/executions/${executionId}`);
        expect(res.status).toBe(200);
        expect(res.body.id).toBe(executionId);
    }, 60000);
    it('should get executions by testcase', async () => {
        const res = await (0, supertest_1.default)(app_1.default).get(`/api/executions/testcase/${TESTCASE_ID}`);
        expect(res.status).toBe(200);
        expect(Array.isArray(res.body)).toBe(true);
    }, 60000);
    it('should update execution', async () => {
        const res = await (0, supertest_1.default)(app_1.default)
            .put(`/api/executions/${executionId}`)
            .send({ status: 'Pass', comment: '수정됨' });
        expect(res.status).toBe(200);
        expect(res.body.status).toBe('Pass');
        expect(res.body.comment).toBe('수정됨');
    }, 60000);
    it('should delete execution', async () => {
        const res = await (0, supertest_1.default)(app_1.default).delete(`/api/executions/${executionId}`);
        expect(res.status).toBe(204);
    }, 60000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,