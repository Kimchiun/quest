{"file":"/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/tests/auth.test.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,0DAAgC;AAChC,8DAAsC;AACtC,6FAA+F;AAE/F,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;IACzB,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,MAAM,IAAA,4BAAiB,GAAE,CAAC;IAC5B,CAAC,CAAC,CAAC;IAEH,MAAM,sBAAsB,GAAG,GAAG,EAAE,CAAC,YAAY,IAAI,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;IAEzG,EAAE,CAAC,SAAS,EAAE,KAAK,IAAI,EAAE;QACvB,MAAM,UAAU,GAAG,EAAE,QAAQ,EAAE,sBAAsB,EAAE,EAAE,QAAQ,EAAE,aAAa,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;QAC/F,MAAM,GAAG,GAAG,MAAM,IAAA,mBAAO,EAAC,aAAG,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC3E,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC7B,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QACpD,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;QAC1B,MAAM,UAAU,GAAG,EAAE,QAAQ,EAAE,sBAAsB,EAAE,EAAE,QAAQ,EAAE,aAAa,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;QAE/F,YAAY;QACZ,MAAM,IAAA,mBAAO,EAAC,aAAG,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAE/D,WAAW;QACX,MAAM,GAAG,GAAG,MAAM,IAAA,mBAAO,EAAC,aAAG,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC3E,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iBAAiB,EAAE,KAAK,IAAI,EAAE;QAC/B,MAAM,UAAU,GAAG,EAAE,QAAQ,EAAE,sBAAsB,EAAE,EAAE,QAAQ,EAAE,aAAa,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;QAE/F,YAAY;QACZ,MAAM,IAAA,mBAAO,EAAC,aAAG,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAE/D,MAAM,GAAG,GAAG,MAAM,IAAA,mBAAO,EAAC,aAAG,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,UAAU,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC9H,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC7B,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iBAAiB,EAAE,KAAK,IAAI,EAAE;QAC/B,MAAM,UAAU,GAAG,EAAE,QAAQ,EAAE,sBAAsB,EAAE,EAAE,QAAQ,EAAE,aAAa,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;QAE/F,YAAY;QACZ,MAAM,IAAA,mBAAO,EAAC,aAAG,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAE/D,MAAM,GAAG,GAAG,MAAM,IAAA,mBAAO,EAAC,aAAG,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,UAAU,CAAC,QAAQ,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC,CAAC;QACtH,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,mCAAmC;IACnC,EAAE,CAAC,wBAAwB,EAAE,KAAK,IAAI,EAAE;QACtC,MAAM,UAAU,GAAG,EAAE,QAAQ,EAAE,sBAAsB,EAAE,EAAE,QAAQ,EAAE,aAAa,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;QAE/F,kBAAkB;QAClB,MAAM,IAAA,mBAAO,EAAC,aAAG,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC/D,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,aAAG,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,UAAU,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;QACnI,MAAM,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;QAEtC,iCAAiC;QACjC,MAAM,GAAG,GAAG,MAAM,IAAA,mBAAO,EAAC,aAAG,CAAC;aAC3B,GAAG,CAAC,eAAe,CAAC;aACpB,GAAG,CAAC,eAAe,EAAE,UAAU,SAAS,EAAE,CAAC,CAAC;QAE/C,8BAA8B;QAC9B,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,KAAK,IAAI,EAAE;QAClB,IAAI,kBAAQ,EAAE,CAAC;YACb,MAAM,kBAAQ,CAAC,GAAG,EAAE,CAAC;QACvB,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/tests/auth.test.ts"],"sourcesContent":["import request from 'supertest';\nimport app from '../src/main/app/app';\nimport pgClient, { ensurePgConnected } from '../src/main/app/infrastructure/database/pgClient';\n\ndescribe('인증/권한 API', () => {\n  beforeAll(async () => {\n    await ensurePgConnected();\n  });\n\n  const generateUniqueUsername = () => `testuser_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n  it('회원가입 성공', async () => {\n    const uniqueUser = { username: generateUniqueUsername(), password: 'testpass123', role: 'QA' };\n    const res = await request(app).post('/api/auth/register').send(uniqueUser);\n    expect(res.status).toBe(201);\n    expect(res.body.username).toBe(uniqueUser.username);\n    expect(res.body.role).toBe(uniqueUser.role);\n  });\n\n  it('중복 회원가입 실패', async () => {\n    const uniqueUser = { username: generateUniqueUsername(), password: 'testpass123', role: 'QA' };\n    \n    // 먼저 사용자 생성\n    await request(app).post('/api/auth/register').send(uniqueUser);\n    \n    // 중복 생성 시도\n    const res = await request(app).post('/api/auth/register').send(uniqueUser);\n    expect(res.status).toBe(409);\n  });\n\n  it('로그인 성공 및 JWT 반환', async () => {\n    const uniqueUser = { username: generateUniqueUsername(), password: 'testpass123', role: 'QA' };\n    \n    // 먼저 사용자 생성\n    await request(app).post('/api/auth/register').send(uniqueUser);\n    \n    const res = await request(app).post('/api/auth/login').send({ username: uniqueUser.username, password: uniqueUser.password });\n    expect(res.status).toBe(200);\n    expect(res.body.token).toBeDefined();\n  });\n\n  it('잘못된 비밀번호 로그인 실패', async () => {\n    const uniqueUser = { username: generateUniqueUsername(), password: 'testpass123', role: 'QA' };\n    \n    // 먼저 사용자 생성\n    await request(app).post('/api/auth/register').send(uniqueUser);\n    \n    const res = await request(app).post('/api/auth/login').send({ username: uniqueUser.username, password: 'wrongpass' });\n    expect(res.status).toBe(401);\n  });\n\n  // RBAC 미들웨어 테스트 - 실제 존재하는 엔드포인트 사용\n  it('권한 미들웨어: 인증된 사용자 접근 허용', async () => {\n    const uniqueUser = { username: generateUniqueUsername(), password: 'testpass123', role: 'QA' };\n    \n    // 먼저 사용자 생성 및 로그인\n    await request(app).post('/api/auth/register').send(uniqueUser);\n    const loginRes = await request(app).post('/api/auth/login').send({ username: uniqueUser.username, password: uniqueUser.password });\n    const authToken = loginRes.body.token;\n    \n    // 실제 존재하는 엔드포인트 사용 (예: releases)\n    const res = await request(app)\n      .get('/api/releases')\n      .set('Authorization', `Bearer ${authToken}`);\n    \n    // 200 또는 401 (인증 실패) 중 하나는 정상\n    expect([200, 401]).toContain(res.status);\n  });\n\n  afterAll(async () => {\n    if (pgClient) {\n      await pgClient.end();\n    }\n  });\n}); "],"version":3}