a4896b7998893d1075f5ba33f5943d76
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFolder = createFolder;
exports.updateFolder = updateFolder;
exports.moveFolder = moveFolder;
exports.moveFolderBatch = moveFolderBatch;
exports.deleteFolder = deleteFolder;
exports.getFolderTree = getFolderTree;
exports.getFolderById = getFolderById;
exports.listFoldersByProject = listFoldersByProject;
const folderRepository_1 = require("../repositories/folderRepository");
// 간격법을 위한 유틸리티 함수
function calculateOrderIndex(prevIndex, nextIndex) {
    if (prevIndex === null && nextIndex === null)
        return 100;
    if (prevIndex === null)
        return nextIndex - 100;
    if (nextIndex === null)
        return prevIndex + 100;
    if (nextIndex - prevIndex > 1)
        return Math.floor((prevIndex + nextIndex) / 2);
    else
        return triggerReindex(prevIndex, nextIndex);
}
function triggerReindex(prevIndex, nextIndex) {
    // 실제로는 서버에서 전체 재간격을 수행
    return Math.floor((prevIndex + nextIndex) / 2);
}
async function createFolder(data, createdBy) {
    // 동일 부모 내 이름 중복 체크
    const siblings = await (0, folderRepository_1.listFolders)({ parentId: data.parentId, projectId: data.projectId });
    const duplicateName = siblings.find(f => f.name === data.name);
    if (duplicateName) {
        throw new Error(`폴더명 "${data.name}"이(가) 이미 존재합니다.`);
    }
    // orderIndex 계산
    const orderIndex = calculateOrderIndex(siblings.length > 0 ? siblings[siblings.length - 1].orderIndex : null, null);
    // depth 계산
    let depth = 0;
    if (data.parentId) {
        const parent = await (0, folderRepository_1.getFolderById)(data.parentId);
        if (!parent) {
            throw new Error('부모 폴더를 찾을 수 없습니다.');
        }
        depth = parent.depth + 1;
        if (depth > 10) {
            throw new Error('폴더 깊이는 최대 10단계까지 가능합니다.');
        }
    }
    const folderData = {
        projectId: data.projectId,
        parentId: data.parentId,
        name: data.name,
        description: data.description,
        orderIndex,
        depth,
        createdBy,
        isLocked: false,
        isArchived: false
    };
    return await (0, folderRepository_1.createFolder)(folderData);
}
async function updateFolder(id, data, updatedBy) {
    const existing = await (0, folderRepository_1.getFolderById)(id);
    if (!existing)
        return null;
    // 이름 변경 시 중복 체크
    if (data.name && data.name !== existing.name) {
        const siblings = await (0, folderRepository_1.listFolders)({
            parentId: existing.parentId,
            projectId: existing.projectId
        });
        const duplicateName = siblings.find(f => f.id !== id && f.name === data.name);
        if (duplicateName) {
            throw new Error(`폴더명 "${data.name}"이(가) 이미 존재합니다.`);
        }
    }
    // 부모 변경 시 순환 참조 체크
    if (data.parentId !== undefined && data.parentId !== existing.parentId) {
        if (data.parentId === id) {
            throw new Error('자기 자신을 부모로 설정할 수 없습니다.');
        }
        // 하위 폴더로 이동하는지 체크
        const isDescendant = await checkIsDescendant(id, data.parentId);
        if (isDescendant) {
            throw new Error('하위 폴더로는 이동할 수 없습니다.');
        }
    }
    return await (0, folderRepository_1.updateFolder)(id, { ...data, updatedBy });
}
async function moveFolder(id, data, movedBy) {
    const folder = await (0, folderRepository_1.getFolderById)(id);
    if (!folder)
        return null;
    // 순환 참조 체크
    if (data.targetParentId !== undefined) {
        if (data.targetParentId === id) {
            throw new Error('자기 자신을 부모로 설정할 수 없습니다.');
        }
        const isDescendant = await checkIsDescendant(id, data.targetParentId);
        if (isDescendant) {
            throw new Error('하위 폴더로는 이동할 수 없습니다.');
        }
    }
    // 드롭 타입에 따른 orderIndex 계산
    let orderIndex;
    const targetParentId = data.targetParentId !== undefined ? data.targetParentId : folder.parentId;
    const siblings = await (0, folderRepository_1.listFolders)({ parentId: targetParentId, projectId: folder.projectId });
    switch (data.dropType) {
        case 'before':
            if (data.relativeToId) {
                const relativeFolder = siblings.find(f => f.id === data.relativeToId);
                if (relativeFolder) {
                    orderIndex = calculateOrderIndex(null, relativeFolder.orderIndex);
                }
                else {
                    orderIndex = calculateOrderIndex(null, null);
                }
            }
            else {
                orderIndex = calculateOrderIndex(null, null);
            }
            break;
        case 'after':
            if (data.relativeToId) {
                const relativeFolder = siblings.find(f => f.id === data.relativeToId);
                if (relativeFolder) {
                    orderIndex = calculateOrderIndex(relativeFolder.orderIndex, null);
                }
                else {
                    orderIndex = calculateOrderIndex(null, null);
                }
            }
            else {
                orderIndex = calculateOrderIndex(null, null);
            }
            break;
        case 'into':
        default:
            // 자식으로 이동하는 경우 마지막 위치에 배치
            const maxOrderIndex = siblings.length > 0 ? Math.max(...siblings.map(f => f.orderIndex)) : 0;
            orderIndex = calculateOrderIndex(maxOrderIndex, null);
            break;
    }
    return await (0, folderRepository_1.updateFolder)(id, {
        parentId: data.targetParentId,
        orderIndex,
        updatedBy: movedBy
    });
}
async function moveFolderBatch(items, movedBy) {
    const results = {
        success: [],
        failed: []
    };
    // 트랜잭션으로 배치 처리
    for (const item of items) {
        try {
            const folder = await moveFolder(parseInt(item.id), {
                targetParentId: item.targetParentId,
                dropType: item.dropType,
                relativeToId: item.relativeToId,
                orderIndex: item.orderIndex
            }, movedBy);
            if (folder) {
                results.success.push({ id: item.id, folder });
            }
            else {
                results.failed.push({
                    id: item.id,
                    error: '폴더를 찾을 수 없습니다.',
                    reason: 'FOLDER_NOT_FOUND'
                });
            }
        }
        catch (error) {
            let reason = 'UNKNOWN_ERROR';
            if (error.message.includes('순환'))
                reason = 'CYCLIC_MOVE';
            else if (error.message.includes('권한'))
                reason = 'PERMISSION_DENIED';
            else if (error.message.includes('이름'))
                reason = 'NAME_CONFLICT';
            else if (error.message.includes('잠금'))
                reason = 'LOCKED';
            else if (error.message.includes('아카이브'))
                reason = 'ARCHIVED';
            results.failed.push({
                id: item.id,
                error: error.message,
                reason
            });
        }
    }
    return results;
}
async function checkIsDescendant(folderId, targetParentId) {
    const children = await (0, folderRepository_1.listFolders)({ parentId: folderId });
    for (const child of children) {
        if (child.id === targetParentId)
            return true;
        if (await checkIsDescendant(child.id, targetParentId))
            return true;
    }
    return false;
}
async function deleteFolder(id, mode = 'soft', deletedBy) {
    console.log(`🗑️ 폴더 삭제 시도: ID ${id}, 모드: ${mode}`);
    const folder = await (0, folderRepository_1.getFolderById)(id);
    if (!folder) {
        console.log(`❌ 폴더를 찾을 수 없음: ID ${id}`);
        return false;
    }
    console.log(`✅ 폴더 찾음: ${folder.name} (ID: ${folder.id})`);
    // 하위 폴더들을 재귀적으로 삭제
    const children = await (0, folderRepository_1.listFolders)({ parentId: id });
    console.log(`📁 하위 폴더 ${children.length}개 발견`);
    for (const child of children) {
        console.log(`🗑️ 하위 폴더 삭제: ${child.name} (ID: ${child.id})`);
        await deleteFolder(child.id, mode, deletedBy);
    }
    const result = await (0, folderRepository_1.deleteFolder)(id, mode, deletedBy);
    console.log(`🗑️ 폴더 삭제 결과: ${result ? '성공' : '실패'} (ID: ${id})`);
    return result;
}
async function getFolderTree(projectId, depth) {
    return await (0, folderRepository_1.getFolderTree)(projectId, depth);
}
async function getFolderById(id) {
    return await (0, folderRepository_1.getFolderById)(id);
}
async function listFoldersByProject(projectId) {
    return await (0, folderRepository_1.listFolders)({ projectId });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,