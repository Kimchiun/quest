{"file":"/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/src/main/app/domains/executions/controllers/executionController.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/src/main/app/domains/executions/controllers/executionController.ts"],"sourcesContent":["import { Router, Request, Response } from 'express';\nimport { executionService } from '../services/executionService';\n\n/**\n * @swagger\n * components:\n *   schemas:\n *     Execution:\n *       type: object\n *       properties:\n *         id:\n *           type: integer\n *           description: 실행 기록 ID\n *         testCaseId:\n *           type: integer\n *           description: 테스트케이스 ID\n *         status:\n *           type: string\n *           enum: [Pass, Fail, Blocked, Skip, Not Executed]\n *           description: 실행 상태\n *         executedBy:\n *           type: string\n *           description: 실행자\n *         executedAt:\n *           type: string\n *           format: date-time\n *           description: 실행 시간\n *         comment:\n *           type: string\n *           description: 실행 코멘트\n *         createdAt:\n *           type: string\n *           format: date-time\n *           description: 생성일\n *         updatedAt:\n *           type: string\n *           format: date-time\n *           description: 수정일\n */\n\nconst router = Router();\n\n// 테스트 엔드포인트\nrouter.get('/test', (req: Request, res: Response) => {\n    console.log('=== Execution test endpoint called ===');\n    res.json({ message: 'Execution controller is working' });\n});\n\n/**\n * @swagger\n * /api/executions:\n *   post:\n *     summary: 실행 기록 생성\n *     description: 새로운 테스트 실행 기록을 생성합니다.\n *     tags: [Executions]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - testCaseId\n *               - status\n *             properties:\n *               testCaseId:\n *                 type: integer\n *                 description: 테스트케이스 ID\n *               status:\n *                 type: string\n *                 enum: [Pass, Fail, Blocked, Skip, Not Executed]\n *                 description: 실행 상태\n *               executedBy:\n *                 type: string\n *                 description: 실행자\n *               comment:\n *                 type: string\n *                 description: 실행 코멘트\n *     responses:\n *       201:\n *         description: 실행 기록 생성 성공\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Execution'\n *       400:\n *         description: 잘못된 요청\n *       500:\n *         description: 서버 오류\n */\n// 실행 기록 생성\nrouter.post('/', async (req: Request, res: Response) => {\n    console.log('=== ExecutionController POST / called ===');\n    console.log('Request body:', JSON.stringify(req.body, null, 2));\n    \n    try {\n        console.log('Calling executionService.createExecution...');\n        const execution = await executionService.createExecution(req.body);\n        console.log('ExecutionService returned:', execution);\n        res.status(201).json(execution);\n    } catch (err: any) {\n        console.error('ExecutionController error:', err);\n        console.error('Error stack:', err.stack);\n        res.status(400).json({ error: err.message });\n    }\n});\n\n/**\n * @swagger\n * /api/executions/{id}:\n *   get:\n *     summary: 실행 기록 단건 조회\n *     description: ID로 특정 실행 기록을 조회합니다.\n *     tags: [Executions]\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: integer\n *         description: 실행 기록 ID\n *     responses:\n *       200:\n *         description: 실행 기록 조회 성공\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Execution'\n *       404:\n *         description: 실행 기록을 찾을 수 없음\n *       500:\n *         description: 서버 오류\n */\n// 실행 기록 단건 조회\nrouter.get('/:id', async (req: Request, res: Response) => {\n    try {\n        const execution = await executionService.getExecutionById(Number(req.params.id));\n        if (!execution) return res.status(404).json({ error: 'Not found' });\n        res.json(execution);\n    } catch (err: any) {\n        res.status(500).json({ error: err.message });\n    }\n});\n\n/**\n * @swagger\n * /api/executions/testcase/{testcaseId}:\n *   get:\n *     summary: 테스트케이스별 실행 기록 조회\n *     description: 특정 테스트케이스의 모든 실행 기록을 조회합니다.\n *     tags: [Executions]\n *     parameters:\n *       - in: path\n *         name: testcaseId\n *         required: true\n *         schema:\n *           type: integer\n *         description: 테스트케이스 ID\n *     responses:\n *       200:\n *         description: 테스트케이스 실행 기록 조회 성공\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/Execution'\n *       500:\n *         description: 서버 오류\n */\n// 특정 테스트케이스의 실행 기록 전체 조회\nrouter.get('/testcase/:testcaseId', async (req: Request, res: Response) => {\n    try {\n        const executions = await executionService.getExecutionsByTestCase(Number(req.params.testcaseId));\n        res.json(executions);\n    } catch (err: any) {\n        res.status(500).json({ error: err.message });\n    }\n});\n\n/**\n * @swagger\n * /api/executions/{id}:\n *   put:\n *     summary: 실행 기록 수정\n *     description: 특정 실행 기록을 수정합니다.\n *     tags: [Executions]\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: integer\n *         description: 실행 기록 ID\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               status:\n *                 type: string\n *                 enum: [Pass, Fail, Blocked, Skip, Not Executed]\n *                 description: 실행 상태\n *               executedBy:\n *                 type: string\n *                 description: 실행자\n *               comment:\n *                 type: string\n *                 description: 실행 코멘트\n *     responses:\n *       200:\n *         description: 실행 기록 수정 성공\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Execution'\n *       404:\n *         description: 실행 기록을 찾을 수 없음\n *       400:\n *         description: 잘못된 요청\n *       500:\n *         description: 서버 오류\n */\n// 실행 기록 수정\nrouter.put('/:id', async (req: Request, res: Response) => {\n    try {\n        const updated = await executionService.updateExecution(Number(req.params.id), req.body);\n        if (!updated) return res.status(404).json({ error: 'Not found' });\n        res.json(updated);\n    } catch (err: any) {\n        res.status(400).json({ error: err.message });\n    }\n});\n\n/**\n * @swagger\n * /api/executions/{id}:\n *   delete:\n *     summary: 실행 기록 삭제\n *     description: 특정 실행 기록을 삭제합니다.\n *     tags: [Executions]\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: integer\n *         description: 실행 기록 ID\n *     responses:\n *       204:\n *         description: 실행 기록 삭제 성공\n *       500:\n *         description: 서버 오류\n */\n// 실행 기록 삭제\nrouter.delete('/:id', async (req: Request, res: Response) => {\n    try {\n        await executionService.deleteExecution(Number(req.params.id));\n        res.status(204).send();\n    } catch (err: any) {\n        res.status(500).json({ error: err.message });\n    }\n});\n\nexport default router; "],"version":3}