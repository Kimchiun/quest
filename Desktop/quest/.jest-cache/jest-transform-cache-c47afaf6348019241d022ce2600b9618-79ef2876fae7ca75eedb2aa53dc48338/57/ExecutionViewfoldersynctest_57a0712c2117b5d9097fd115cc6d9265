7f0a49a67c709597463378b68ccfedda
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// Mock API hooks
jest.mock('../src/renderer/services/api', () => ({
    api: {
        reducerPath: 'api',
        reducer: (state = {}, action) => state,
        middleware: () => (next) => (action) => next(action),
    },
    useGetReleaseTestCasesQuery: jest.fn(),
    useUpdateReleaseExecutionStatsMutation: jest.fn(),
    useGetReleaseExecutionStatsQuery: jest.fn(),
    useUpdateTestCaseStatusMutation: jest.fn(),
    useGetTestFoldersQuery: jest.fn(),
    useGetImportedFoldersQuery: jest.fn(),
    useAddImportedFoldersMutation: jest.fn(),
    useRemoveImportedFolderMutation: jest.fn(),
}));
const react_1 = require("@testing-library/react");
const react_redux_1 = require("react-redux");
const toolkit_1 = require("@reduxjs/toolkit");
const ExecutionView_1 = __importDefault(require("../src/renderer/features/ReleaseManagementV2/components/ExecutionView"));
const api_1 = require("../src/renderer/services/api");
// Mock API responses
const mockApiTestCases = {
    data: [
        {
            id: '81',
            title: 'Test Case 1',
            description: 'Test description 1',
            status: 'Inactive',
            priority: 'High',
            steps: '["Step 1", "Step 2"]',
            expected: 'Expected result 1',
            createdBy: 'admin',
            createdAt: '2024-01-01T00:00:00Z',
            updatedAt: '2024-01-01T00:00:00Z'
        },
        {
            id: '82',
            title: 'Test Case 2',
            description: 'Test description 2',
            status: 'Pass',
            priority: 'Medium',
            steps: '["Step 1", "Step 2", "Step 3"]',
            expected: 'Expected result 2',
            createdBy: 'admin',
            createdAt: '2024-01-01T00:00:00Z',
            updatedAt: '2024-01-01T00:00:00Z'
        }
    ]
};
const mockExecutionStats = {
    data: {
        total: 2,
        passed: 1,
        failed: 0,
        blocked: 0,
        skipped: 0,
        planned: 2,
        passRate: 50
    }
};
// Mock store
const createMockStore = () => {
    return (0, toolkit_1.configureStore)({
        reducer: {
            [api_1.api.reducerPath]: api_1.api.reducer,
        },
        middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api_1.api.middleware),
    });
};
// Mock props
const mockRelease = {
    id: 'test-release-id',
    name: 'Test Release',
    version: '1.0.0',
    owner: 'admin',
    createdAt: '2024-01-01T00:00:00Z'
};
const mockTestCases = [
    {
        id: '81',
        name: 'Test Case 1',
        title: 'Test Case 1',
        description: 'Test description 1',
        status: 'Inactive',
        priority: 'High',
        steps: ['Step 1', 'Step 2'],
        expected: 'Expected result 1',
        lastUpdated: '2024-01-01T00:00:00Z',
        tags: ['test'],
        createdBy: 'admin',
        createdAt: '2024-01-01T00:00:00Z',
        updatedAt: '2024-01-01T00:00:00Z'
    }
];
// Mock callbacks
const mockOnTestCaseUpdate = jest.fn();
const mockOnBulkUpdate = jest.fn();
const mockOnAddTestCases = jest.fn();
const mockOnTestCasesLoad = jest.fn();
const api_2 = require("../src/renderer/services/api");
describe('ExecutionView Folder Synchronization Tests', () => {
    let mockStore;
    const mockFolderTestCases = [
        {
            id: '81',
            name: 'Test Case 1',
            title: 'Test Case 1',
            description: 'Test description 1',
            status: 'Inactive',
            priority: 'High',
            steps: ['Step 1', 'Step 2'],
            expected: 'Expected result 1',
            lastUpdated: '2024-01-01T00:00:00Z',
            tags: ['test'],
            createdBy: 'admin',
            createdAt: '2024-01-01T00:00:00Z',
            updatedAt: '2024-01-01T00:00:00Z'
        }
    ];
    const mockImportedFolders = [
        {
            id: 'folder-1',
            name: 'Test Folder',
            path: '/test/folder',
            testCases: mockFolderTestCases
        }
    ];
    beforeEach(() => {
        mockStore = createMockStore();
        // Reset all mocks
        jest.clearAllMocks();
        // Setup default mock implementations
        api_2.useGetReleaseTestCasesQuery.mockReturnValue({
            data: mockApiTestCases,
            isLoading: false,
            error: null,
            refetch: jest.fn(),
        });
        api_2.useGetReleaseExecutionStatsQuery.mockReturnValue({
            data: mockExecutionStats,
            isLoading: false,
            error: null,
            refetch: jest.fn(),
        });
        api_2.useUpdateTestCaseStatusMutation.mockReturnValue([
            jest.fn().mockResolvedValue({ data: { success: true } }),
        ]);
        api_2.useUpdateReleaseExecutionStatsMutation.mockReturnValue([
            jest.fn().mockResolvedValue({ data: { success: true } }),
        ]);
        api_2.useGetTestFoldersQuery.mockReturnValue({
            data: [],
        });
        api_2.useGetImportedFoldersQuery.mockReturnValue({
            data: mockImportedFolders,
            refetch: jest.fn(),
        });
        api_2.useAddImportedFoldersMutation.mockReturnValue([
            jest.fn().mockResolvedValue({ data: { success: true } }),
        ]);
        api_2.useRemoveImportedFolderMutation.mockReturnValue([
            jest.fn().mockResolvedValue({ data: { success: true } }),
        ]);
        // 폴더 테스트케이스 API 모킹
        global.fetch = jest.fn().mockResolvedValue({
            ok: true,
            json: () => Promise.resolve({ data: mockFolderTestCases })
        });
    });
    const renderExecutionView = () => {
        return (0, react_1.render)((0, jsx_runtime_1.jsx)(react_redux_1.Provider, { store: mockStore, children: (0, jsx_runtime_1.jsx)(ExecutionView_1.default, { release: mockRelease, testCases: mockTestCases, onTestCaseUpdate: mockOnTestCaseUpdate, onBulkUpdate: mockOnBulkUpdate, onAddTestCases: mockOnAddTestCases, onTestCasesLoad: mockOnTestCasesLoad }) }));
    };
    describe('폴더 선택 상태 동기화', () => {
        it('폴더 선택 시 해당 폴더의 테스트케이스만 표시되어야 한다', async () => {
            renderExecutionView();
            // 폴더 선택 버튼 찾기 (실제 구현에 따라 조정 필요)
            const folderSelectButton = react_1.screen.getByText('Test Folder');
            react_1.fireEvent.click(folderSelectButton);
            // 폴더의 테스트케이스만 표시되어야 함
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('Test Case 1')).toBeInTheDocument();
                // 다른 테스트케이스는 표시되지 않아야 함
                expect(react_1.screen.queryByText('Test Case 2')).not.toBeInTheDocument();
            });
        });
        it('폴더 선택 상태에서 상태 변경 시 즉시 UI에 반영되어야 한다', async () => {
            const mockUpdateStatus = jest.fn().mockResolvedValue({
                data: { success: true, message: '상태가 업데이트되었습니다.' }
            });
            api_2.useUpdateTestCaseStatusMutation.mockReturnValue([
                mockUpdateStatus,
            ]);
            renderExecutionView();
            // 폴더 선택
            const folderSelectButton = react_1.screen.getByText('Test Folder');
            react_1.fireEvent.click(folderSelectButton);
            // 폴더 테스트케이스의 드롭다운 열기
            await (0, react_1.waitFor)(() => {
                const dropdownButton = react_1.screen.getByText('Inactive');
                react_1.fireEvent.click(dropdownButton);
            });
            // Pass 상태 선택
            await (0, react_1.waitFor)(() => {
                const passOption = react_1.screen.getByText('Pass');
                react_1.fireEvent.click(passOption);
            });
            // 즉시 UI에 반영되어야 함
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('Pass')).toBeInTheDocument();
                expect(react_1.screen.queryByText('Inactive')).not.toBeInTheDocument();
            });
            // API 호출 확인
            expect(mockUpdateStatus).toHaveBeenCalledWith({
                releaseId: 'test-release-id',
                testCaseId: '81',
                status: 'Pass',
                comment: ''
            });
        });
        it('폴더 선택 해제 후 전체 테스트케이스에서 변경된 상태가 유지되어야 한다', async () => {
            const mockUpdateStatus = jest.fn().mockResolvedValue({
                data: { success: true, message: '상태가 업데이트되었습니다.' }
            });
            api_2.useUpdateTestCaseStatusMutation.mockReturnValue([
                mockUpdateStatus,
            ]);
            renderExecutionView();
            // 폴더 선택
            const folderSelectButton = react_1.screen.getByText('Test Folder');
            react_1.fireEvent.click(folderSelectButton);
            // 폴더 테스트케이스 상태 변경
            await (0, react_1.waitFor)(() => {
                const dropdownButton = react_1.screen.getByText('Inactive');
                react_1.fireEvent.click(dropdownButton);
            });
            await (0, react_1.waitFor)(() => {
                const passOption = react_1.screen.getByText('Pass');
                react_1.fireEvent.click(passOption);
            });
            // 폴더 선택 해제 (전체 테스트케이스로 돌아가기)
            const clearFolderButton = react_1.screen.getByText('전체 보기') || react_1.screen.getByText('Clear Selection');
            react_1.fireEvent.click(clearFolderButton);
            // 전체 테스트케이스에서도 변경된 상태가 유지되어야 함
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('Pass')).toBeInTheDocument();
                expect(react_1.screen.queryByText('Inactive')).not.toBeInTheDocument();
            });
        });
        it('전체 테스트케이스에서 상태 변경 시 폴더 선택 상태에서도 동기화되어야 한다', async () => {
            const mockUpdateStatus = jest.fn().mockResolvedValue({
                data: { success: true, message: '상태가 업데이트되었습니다.' }
            });
            api_2.useUpdateTestCaseStatusMutation.mockReturnValue([
                mockUpdateStatus,
            ]);
            renderExecutionView();
            // 전체 테스트케이스에서 상태 변경
            const dropdownButtons = react_1.screen.getAllByText(/Inactive|Pass|Fail|Block|Skip/);
            const firstDropdownButton = dropdownButtons[0];
            react_1.fireEvent.click(firstDropdownButton);
            await (0, react_1.waitFor)(() => {
                const passOption = react_1.screen.getByText('Pass');
                react_1.fireEvent.click(passOption);
            });
            // 폴더 선택
            const folderSelectButton = react_1.screen.getByText('Test Folder');
            react_1.fireEvent.click(folderSelectButton);
            // 폴더 테스트케이스에서도 변경된 상태가 표시되어야 함
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('Pass')).toBeInTheDocument();
                expect(react_1.screen.queryByText('Inactive')).not.toBeInTheDocument();
            });
        });
        it('폴더 데이터 새로고침 시 로컬 상태 업데이트가 유지되어야 한다', async () => {
            const mockUpdateStatus = jest.fn().mockResolvedValue({
                data: { success: true, message: '상태가 업데이트되었습니다.' }
            });
            api_2.useUpdateTestCaseStatusMutation.mockReturnValue([
                mockUpdateStatus,
            ]);
            // 폴더 데이터 새로고침 시 더 최신 로컬 상태를 반환하도록 모킹
            global.fetch = jest.fn()
                .mockResolvedValueOnce({
                ok: true,
                json: () => Promise.resolve({
                    data: [{ ...mockFolderTestCases[0], status: 'Pass', lastUpdated: '2024-01-01T00:00:00Z' }]
                })
            })
                .mockResolvedValueOnce({
                ok: true,
                json: () => Promise.resolve({
                    data: [{ ...mockFolderTestCases[0], status: 'Fail', lastUpdated: '2024-01-02T00:00:00Z' }]
                })
            });
            renderExecutionView();
            // 폴더 선택
            const folderSelectButton = react_1.screen.getByText('Test Folder');
            react_1.fireEvent.click(folderSelectButton);
            // 폴더 테스트케이스 상태 변경 (Pass로 변경)
            await (0, react_1.waitFor)(() => {
                const dropdownButton = react_1.screen.getByText('Inactive');
                react_1.fireEvent.click(dropdownButton);
            });
            await (0, react_1.waitFor)(() => {
                const passOption = react_1.screen.getByText('Pass');
                react_1.fireEvent.click(passOption);
            });
            // API 호출 후 폴더 데이터 새로고침이 발생하더라도 로컬 상태가 유지되어야 함
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('Pass')).toBeInTheDocument();
            });
            // API 호출 확인
            expect(mockUpdateStatus).toHaveBeenCalledWith({
                releaseId: 'test-release-id',
                testCaseId: '81',
                status: 'Pass',
                comment: ''
            });
        });
        it('폴더 선택 상태에서 상태 변경 시 부모 컴포넌트 콜백이 호출되어야 한다', async () => {
            renderExecutionView();
            // 폴더 선택
            const folderSelectButton = react_1.screen.getByText('Test Folder');
            react_1.fireEvent.click(folderSelectButton);
            // 폴더 테스트케이스 상태 변경
            await (0, react_1.waitFor)(() => {
                const dropdownButton = react_1.screen.getByText('Inactive');
                react_1.fireEvent.click(dropdownButton);
            });
            await (0, react_1.waitFor)(() => {
                const passOption = react_1.screen.getByText('Pass');
                react_1.fireEvent.click(passOption);
            });
            // 부모 콜백 호출 확인
            await (0, react_1.waitFor)(() => {
                expect(mockOnTestCaseUpdate).toHaveBeenCalledWith('81', {
                    status: 'Pass',
                    lastUpdated: expect.any(String)
                });
            });
        });
        it('폴더 선택 상태와 전체 테스트케이스 상태가 완전히 동기화되어야 한다', async () => {
            const mockUpdateStatus = jest.fn().mockResolvedValue({
                data: { success: true, message: '상태가 업데이트되었습니다.' }
            });
            api_2.useUpdateTestCaseStatusMutation.mockReturnValue([
                mockUpdateStatus,
            ]);
            renderExecutionView();
            // 1. 전체 테스트케이스에서 상태 변경
            const dropdownButtons = react_1.screen.getAllByText(/Inactive|Pass|Fail|Block|Skip/);
            const firstDropdownButton = dropdownButtons[0];
            react_1.fireEvent.click(firstDropdownButton);
            await (0, react_1.waitFor)(() => {
                const passOption = react_1.screen.getByText('Pass');
                react_1.fireEvent.click(passOption);
            });
            // 2. 폴더 선택
            const folderSelectButton = react_1.screen.getByText('Test Folder');
            react_1.fireEvent.click(folderSelectButton);
            // 3. 폴더에서 상태가 동기화되었는지 확인
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('Pass')).toBeInTheDocument();
            });
            // 4. 폴더에서 다시 상태 변경
            await (0, react_1.waitFor)(() => {
                const dropdownButton = react_1.screen.getByText('Pass');
                react_1.fireEvent.click(dropdownButton);
            });
            await (0, react_1.waitFor)(() => {
                const failOption = react_1.screen.getByText('Fail');
                react_1.fireEvent.click(failOption);
            });
            // 5. 폴더 선택 해제
            const clearFolderButton = react_1.screen.getByText('전체 보기') || react_1.screen.getByText('Clear Selection');
            react_1.fireEvent.click(clearFolderButton);
            // 6. 전체 테스트케이스에서도 변경된 상태가 유지되어야 함
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('Fail')).toBeInTheDocument();
                expect(react_1.screen.queryByText('Pass')).not.toBeInTheDocument();
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,