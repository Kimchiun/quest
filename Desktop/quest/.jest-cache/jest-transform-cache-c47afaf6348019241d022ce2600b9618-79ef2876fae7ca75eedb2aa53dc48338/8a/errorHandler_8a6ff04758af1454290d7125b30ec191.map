{"file":"/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/src/main/app/utils/errorHandler.ts","mappings":";;;AAOA,MAAa,WAAY,SAAQ,KAAK;IAIpC,YAAY,OAAe,EAAE,aAAqB,GAAG;QACnD,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAE1B,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAClD,CAAC;CACF;AAXD,kCAWC;AAEM,MAAM,YAAY,GAAG,CAC1B,KAAe,EACf,GAAY,EACZ,GAAa,EACb,IAAkB,EAClB,EAAE;IACF,MAAM,UAAU,GAAG,KAAK,CAAC,UAAU,IAAI,GAAG,CAAC;IAC3C,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,IAAI,mBAAmB,CAAC;IAErD,sBAAsB;IACtB,MAAM,aAAa,GAAQ;QACzB,OAAO;QACP,UAAU;QACV,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;QACnC,IAAI,EAAE,GAAG,CAAC,IAAI;QACd,MAAM,EAAE,GAAG,CAAC,MAAM;KACnB,CAAC;IAEF,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,EAAE,CAAC;QAC3C,aAAa,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;QAClC,aAAa,CAAC,KAAK,GAAG,KAAK,CAAC;IAC9B,CAAC;IAED,KAAK;IACL,OAAO,CAAC,KAAK,CAAC,QAAQ,EAAE;QACtB,OAAO,EAAE,KAAK,CAAC,OAAO;QACtB,KAAK,EAAE,KAAK,CAAC,KAAK;QAClB,GAAG,EAAE,GAAG,CAAC,GAAG;QACZ,MAAM,EAAE,GAAG,CAAC,MAAM;QAClB,EAAE,EAAE,GAAG,CAAC,EAAE;QACV,SAAS,EAAE,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC;KACjC,CAAC,CAAC;IAEH,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AAC7C,CAAC,CAAC;AAlCW,QAAA,YAAY,gBAkCvB;AAEK,MAAM,YAAY,GAAG,CAAC,EAAY,EAAE,EAAE;IAC3C,OAAO,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;QACzD,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAClD,CAAC,CAAC;AACJ,CAAC,CAAC;AAJW,QAAA,YAAY,gBAIvB;AAEK,MAAM,WAAW,GAAG,CAAC,OAAe,EAAE,aAAqB,GAAG,EAAe,EAAE;IACpF,OAAO,IAAI,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;AAC9C,CAAC,CAAC;AAFW,QAAA,WAAW,eAEtB","names":[],"sources":["/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/src/main/app/utils/errorHandler.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\n\nexport interface AppError extends Error {\n  statusCode?: number;\n  isOperational?: boolean;\n}\n\nexport class CustomError extends Error implements AppError {\n  public statusCode: number;\n  public isOperational: boolean;\n\n  constructor(message: string, statusCode: number = 500) {\n    super(message);\n    this.statusCode = statusCode;\n    this.isOperational = true;\n\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n\nexport const errorHandler = (\n  error: AppError,\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  const statusCode = error.statusCode || 500;\n  const message = error.message || '서버 내부 오류가 발생했습니다.';\n\n  // 개발 환경에서는 스택 트레이스 포함\n  const errorResponse: any = {\n    message,\n    statusCode,\n    timestamp: new Date().toISOString(),\n    path: req.path,\n    method: req.method\n  };\n\n  if (process.env.NODE_ENV === 'development') {\n    errorResponse.stack = error.stack;\n    errorResponse.error = error;\n  }\n\n  // 로깅\n  console.error('에러 발생:', {\n    message: error.message,\n    stack: error.stack,\n    url: req.url,\n    method: req.method,\n    ip: req.ip,\n    userAgent: req.get('User-Agent')\n  });\n\n  res.status(statusCode).json(errorResponse);\n};\n\nexport const asyncHandler = (fn: Function) => {\n  return (req: Request, res: Response, next: NextFunction) => {\n    Promise.resolve(fn(req, res, next)).catch(next);\n  };\n};\n\nexport const createError = (message: string, statusCode: number = 500): CustomError => {\n  return new CustomError(message, statusCode);\n}; "],"version":3}