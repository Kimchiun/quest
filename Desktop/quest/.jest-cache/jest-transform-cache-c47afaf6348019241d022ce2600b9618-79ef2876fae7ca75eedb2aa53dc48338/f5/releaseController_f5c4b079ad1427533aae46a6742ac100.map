{"file":"/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/src/main/app/domains/releases/controllers/releaseController.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/src/main/app/domains/releases/controllers/releaseController.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport { releaseRepository } from '../repositories/releaseRepository';\n\n/**\n * @swagger\n * components:\n *   schemas:\n *     Release:\n *       type: object\n *       properties:\n *         id:\n *           type: string\n *           format: uuid\n *           description: 릴리즈 ID\n *         name:\n *           type: string\n *           description: 릴리즈 이름\n *         version:\n *           type: string\n *           description: 릴리즈 버전\n *         description:\n *           type: string\n *           description: 릴리즈 설명\n *         status:\n *           type: string\n *           enum: [Planning, In Progress, Completed, Cancelled]\n *           description: 릴리즈 상태\n *         startAt:\n *           type: string\n *           format: date-time\n *           description: 시작일\n *         endAt:\n *           type: string\n *           format: date-time\n *           description: 종료일\n *         owners:\n *           type: array\n *           items:\n *             type: string\n *           description: 소유자 목록\n *         createdAt:\n *           type: string\n *           format: date-time\n *           description: 생성일\n *         updatedAt:\n *           type: string\n *           format: date-time\n *           description: 수정일\n *     ExecutionStats:\n *       type: object\n *       properties:\n *         planned:\n *           type: integer\n *           description: 계획된 테스트케이스 수\n *         executed:\n *           type: integer\n *           description: 실행된 테스트케이스 수\n *         passed:\n *           type: integer\n *           description: 통과한 테스트케이스 수\n *         failed:\n *           type: integer\n *           description: 실패한 테스트케이스 수\n *         blocked:\n *           type: integer\n *           description: 차단된 테스트케이스 수\n *         skipped:\n *           type: integer\n *           description: 건너뛴 테스트케이스 수\n *         passRate:\n *           type: integer\n *           description: 통과율 (%)\n */\n\nexport class ReleaseController {\n  /**\n   * @swagger\n   * /api/releases:\n   *   get:\n   *     summary: 모든 릴리즈 조회\n   *     description: 시스템의 모든 릴리즈 목록을 조회합니다.\n   *     tags: [Releases]\n   *     responses:\n   *       200:\n   *         description: 릴리즈 목록 조회 성공\n   *         content:\n   *           application/json:\n   *             schema:\n   *               type: object\n   *               properties:\n   *                 success:\n   *                   type: boolean\n   *                 data:\n   *                   type: array\n   *                   items:\n   *                     $ref: '#/components/schemas/Release'\n   *                 message:\n   *                   type: string\n   *       500:\n   *         description: 서버 오류\n   */\n  // 모든 릴리즈 조회\n  async getAllReleases(req: Request, res: Response) {\n    try {\n      const releases = await releaseRepository.findAll();\n      res.json({\n        success: true,\n        data: releases,\n        message: '릴리즈 목록을 성공적으로 조회했습니다.'\n      });\n    } catch (error) {\n      console.error('릴리즈 목록 조회 실패:', error);\n      res.status(500).json({\n        success: false,\n        message: '릴리즈 목록 조회 중 오류가 발생했습니다.'\n      });\n    }\n  }\n\n  /**\n   * @swagger\n   * /api/releases/{id}:\n   *   get:\n   *     summary: ID로 릴리즈 조회\n   *     description: 특정 ID의 릴리즈를 조회합니다.\n   *     tags: [Releases]\n   *     parameters:\n   *       - in: path\n   *         name: id\n   *         required: true\n   *         schema:\n   *           type: string\n   *           format: uuid\n   *         description: 릴리즈 ID\n   *     responses:\n   *       200:\n   *         description: 릴리즈 조회 성공\n   *         content:\n   *           application/json:\n   *             schema:\n   *               type: object\n   *               properties:\n   *                 success:\n   *                   type: boolean\n   *                 data:\n   *                   $ref: '#/components/schemas/Release'\n   *                 message:\n   *                   type: string\n   *       404:\n   *         description: 릴리즈를 찾을 수 없음\n   *       500:\n   *         description: 서버 오류\n   */\n  // ID로 릴리즈 조회\n  async getReleaseById(req: Request, res: Response) {\n    try {\n      const { id } = req.params;\n      const release = await releaseRepository.findById(id);\n      \n      if (!release) {\n        return res.status(404).json({\n          success: false,\n          message: '해당 릴리즈를 찾을 수 없습니다.'\n        });\n      }\n\n      res.json({\n        success: true,\n        data: release,\n        message: '릴리즈를 성공적으로 조회했습니다.'\n      });\n    } catch (error) {\n      console.error('릴리즈 조회 실패:', error);\n      res.status(500).json({\n        success: false,\n        message: '릴리즈 조회 중 오류가 발생했습니다.'\n      });\n    }\n  }\n\n  // 프로젝트별 릴리즈 조회\n  async getReleasesByProject(req: Request, res: Response) {\n    try {\n      const { projectId } = req.params;\n      const releases = await releaseRepository.findByProjectId(projectId);\n      \n      res.json({\n        success: true,\n        data: releases,\n        message: '프로젝트 릴리즈 목록을 성공적으로 조회했습니다.'\n      });\n    } catch (error) {\n      console.error('프로젝트 릴리즈 조회 실패:', error);\n      res.status(500).json({\n        success: false,\n        message: '프로젝트 릴리즈 조회 중 오류가 발생했습니다.'\n      });\n    }\n  }\n\n  /**\n   * @swagger\n   * /api/releases:\n   *   post:\n   *     summary: 릴리즈 생성\n   *     description: 새로운 릴리즈를 생성합니다.\n   *     tags: [Releases]\n   *     requestBody:\n   *       required: true\n   *       content:\n   *         application/json:\n   *           schema:\n   *             type: object\n   *             required:\n   *               - name\n   *               - version\n   *               - startAt\n   *               - endAt\n   *             properties:\n   *               name:\n   *                 type: string\n   *                 description: 릴리즈 이름\n   *               version:\n   *                 type: string\n   *                 description: 릴리즈 버전\n   *               description:\n   *                 type: string\n   *                 description: 릴리즈 설명\n   *               startAt:\n   *                 type: string\n   *                 format: date-time\n   *                 description: 시작일\n   *               endAt:\n   *                 type: string\n   *                 format: date-time\n   *                 description: 종료일\n   *               assignee:\n   *                 type: string\n   *                 description: 담당자\n   *     responses:\n   *       201:\n   *         description: 릴리즈 생성 성공\n   *         content:\n   *           application/json:\n   *             schema:\n   *               type: object\n   *               properties:\n   *                 success:\n   *                   type: boolean\n   *                 data:\n   *                   $ref: '#/components/schemas/Release'\n   *                 message:\n   *                   type: string\n   *       400:\n   *         description: 잘못된 요청\n   *       500:\n   *         description: 서버 오류\n   */\n  // 릴리즈 생성\n  async createRelease(req: Request, res: Response) {\n    try {\n      const releaseData = req.body;\n      \n      // 필수 필드 검증\n      if (!releaseData.name || !releaseData.version || !releaseData.startAt || !releaseData.endAt) {\n        return res.status(400).json({\n          success: false,\n          message: '필수 필드가 누락되었습니다. (name, version, startAt, endAt)'\n        });\n      }\n\n      const newRelease = await releaseRepository.create({\n        ...releaseData,\n        createdBy: 'system',\n        updatedBy: 'system'\n      });\n\n      res.status(201).json({\n        success: true,\n        data: newRelease,\n        message: '릴리즈가 성공적으로 생성되었습니다.'\n      });\n    } catch (error) {\n      console.error('릴리즈 생성 실패:', error);\n      res.status(500).json({\n        success: false,\n        message: '릴리즈 생성 중 오류가 발생했습니다.'\n      });\n    }\n  }\n\n  // 릴리즈 업데이트\n  async updateRelease(req: Request, res: Response) {\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n\n      console.log('=== ReleaseController.updateRelease 호출됨 ===');\n      console.log('releaseId:', id);\n      console.log('updateData:', updateData);\n\n      // assignee 필드를 owners 배열로 변환\n      const processedUpdateData = {\n        ...updateData,\n        owners: updateData.assignee ? [updateData.assignee] : undefined,\n        updatedBy: 'system'\n      };\n\n      console.log('=== 처리된 업데이트 데이터 ===');\n      console.log('processedUpdateData:', processedUpdateData);\n\n      const updatedRelease = await releaseRepository.update(id, processedUpdateData);\n\n      if (!updatedRelease) {\n        return res.status(404).json({\n          success: false,\n          message: '해당 릴리즈를 찾을 수 없습니다.'\n        });\n      }\n\n      res.json({\n        success: true,\n        data: updatedRelease,\n        message: '릴리즈가 성공적으로 업데이트되었습니다.'\n      });\n    } catch (error) {\n      console.error('릴리즈 업데이트 실패:', error);\n      res.status(500).json({\n        success: false,\n        message: '릴리즈 업데이트 중 오류가 발생했습니다.'\n      });\n    }\n  }\n\n  // 릴리즈 삭제\n  async deleteRelease(req: Request, res: Response) {\n    try {\n      const { id } = req.params;\n      await releaseRepository.deleteRelease(id);\n\n      res.json({\n        success: true,\n        message: '릴리즈가 성공적으로 삭제되었습니다.'\n      });\n    } catch (error) {\n      console.error('릴리즈 삭제 실패:', error);\n      \n      if (error instanceof Error && error.message.includes('찾을 수 없습니다')) {\n        return res.status(404).json({\n          success: false,\n          message: '해당 릴리즈를 찾을 수 없습니다.'\n        });\n      }\n      \n      res.status(500).json({\n        success: false,\n        message: '릴리즈 삭제 중 오류가 발생했습니다.'\n      });\n    }\n  }\n\n  // 릴리즈 검색\n  async searchReleases(req: Request, res: Response) {\n    try {\n      const { q } = req.query;\n      \n      if (!q || typeof q !== 'string') {\n        return res.status(400).json({\n          success: false,\n          message: '검색어를 입력해주세요.'\n        });\n      }\n\n      const releases = await releaseRepository.search(q);\n      \n      res.json({\n        success: true,\n        data: releases,\n        message: '검색 결과를 성공적으로 조회했습니다.'\n      });\n    } catch (error) {\n      console.error('릴리즈 검색 실패:', error);\n      res.status(500).json({\n        success: false,\n        message: '릴리즈 검색 중 오류가 발생했습니다.'\n      });\n    }\n  }\n\n  // 상태별 릴리즈 조회\n  async getReleasesByStatus(req: Request, res: Response) {\n    try {\n      const { status } = req.params;\n      const releases = await releaseRepository.findByStatus(status as any);\n      \n      res.json({\n        success: true,\n        data: releases,\n        message: '상태별 릴리즈 목록을 성공적으로 조회했습니다.'\n      });\n    } catch (error) {\n      console.error('상태별 릴리즈 조회 실패:', error);\n      res.status(500).json({\n        success: false,\n        message: '상태별 릴리즈 조회 중 오류가 발생했습니다.'\n      });\n    }\n  }\n\n  // 릴리즈 통계 조회\n  async getReleaseStatistics(req: Request, res: Response) {\n    try {\n      const { id } = req.params;\n      const statistics = await releaseRepository.getStatistics(id);\n\n      if (!statistics) {\n        return res.status(404).json({\n          success: false,\n          message: '해당 릴리즈를 찾을 수 없습니다.'\n        });\n      }\n\n      res.json({\n        success: true,\n        data: statistics,\n        message: '릴리즈 통계를 성공적으로 조회했습니다.'\n      });\n    } catch (error) {\n      console.error('릴리즈 통계 조회 실패:', error);\n      res.status(500).json({\n        success: false,\n        message: '릴리즈 통계 조회 중 오류가 발생했습니다.'\n      });\n    }\n  }\n\n  // 게이트 기준 업데이트\n  async updateGateCriteria(req: Request, res: Response) {\n    try {\n      const { id } = req.params;\n      const { gateCriteria } = req.body;\n\n      const updatedRelease = await releaseRepository.updateGateCriteria(id, gateCriteria);\n\n      if (!updatedRelease) {\n        return res.status(404).json({\n          success: false,\n          message: '해당 릴리즈를 찾을 수 없습니다.'\n        });\n      }\n\n      res.json({\n        success: true,\n        data: updatedRelease,\n        message: '게이트 기준이 성공적으로 업데이트되었습니다.'\n      });\n    } catch (error) {\n      console.error('게이트 기준 업데이트 실패:', error);\n      res.status(500).json({\n        success: false,\n        message: '게이트 기준 업데이트 중 오류가 발생했습니다.'\n      });\n    }\n  }\n\n  // 릴리즈 케이스 업데이트\n  async updateReleaseCase(req: Request, res: Response) {\n    try {\n      const { releaseId, caseId } = req.params;\n      const updates = req.body;\n\n      const updatedRelease = await releaseRepository.updateCase(releaseId, caseId, updates);\n\n      if (!updatedRelease) {\n        return res.status(404).json({\n          success: false,\n          message: '해당 릴리즈 또는 케이스를 찾을 수 없습니다.'\n        });\n      }\n\n      res.json({\n        success: true,\n        data: updatedRelease,\n        message: '릴리즈 케이스가 성공적으로 업데이트되었습니다.'\n      });\n    } catch (error) {\n      console.error('릴리즈 케이스 업데이트 실패:', error);\n      res.status(500).json({\n        success: false,\n        message: '릴리즈 케이스 업데이트 중 오류가 발생했습니다.'\n      });\n    }\n  }\n\n  // 실행 결과 저장\n  async saveRun(req: Request, res: Response) {\n    try {\n      const { releaseId } = req.params;\n      const runData = req.body;\n\n      const updatedRelease = await releaseRepository.saveRun(releaseId, {\n        ...runData,\n        executedBy: 'system',\n        executedAt: new Date().toISOString()\n      });\n\n      if (!updatedRelease) {\n        return res.status(404).json({\n          success: false,\n          message: '해당 릴리즈를 찾을 수 없습니다.'\n        });\n      }\n\n      res.json({\n        success: true,\n        data: updatedRelease,\n        message: '실행 결과가 성공적으로 저장되었습니다.'\n      });\n    } catch (error) {\n      console.error('실행 결과 저장 실패:', error);\n      res.status(500).json({\n        success: false,\n        message: '실행 결과 저장 중 오류가 발생했습니다.'\n      });\n    }\n  }\n\n  // 결함 링크 추가\n  async addDefectLink(req: Request, res: Response) {\n    try {\n      const { releaseId } = req.params;\n      const defectLinkData = req.body;\n\n      const updatedRelease = await releaseRepository.addDefectLink(releaseId, {\n        ...defectLinkData,\n        createdBy: 'system',\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      });\n\n      if (!updatedRelease) {\n        return res.status(404).json({\n          success: false,\n          message: '해당 릴리즈를 찾을 수 없습니다.'\n        });\n      }\n\n      res.json({\n        success: true,\n        data: updatedRelease,\n        message: '결함 링크가 성공적으로 추가되었습니다.'\n      });\n    } catch (error) {\n      console.error('결함 링크 추가 실패:', error);\n      res.status(500).json({\n        success: false,\n        message: '결함 링크 추가 중 오류가 발생했습니다.'\n      });\n    }\n  }\n\n  // 환경 정보 업데이트\n  async updateEnvironment(req: Request, res: Response) {\n    try {\n      const { releaseId } = req.params;\n      const environmentData = req.body;\n\n      const updatedRelease = await releaseRepository.updateEnvironment(releaseId, {\n        ...environmentData,\n        updatedAt: new Date().toISOString()\n      });\n\n      if (!updatedRelease) {\n        return res.status(404).json({\n          success: false,\n          message: '해당 릴리즈를 찾을 수 없습니다.'\n        });\n      }\n\n      res.json({\n        success: true,\n        data: updatedRelease,\n        message: '환경 정보가 성공적으로 업데이트되었습니다.'\n      });\n    } catch (error) {\n      console.error('환경 정보 업데이트 실패:', error);\n      res.status(500).json({\n        success: false,\n        message: '환경 정보 업데이트 중 오류가 발생했습니다.'\n      });\n    }\n  }\n\n  /**\n   * @swagger\n   * /api/releases/{id}/testcases:\n   *   get:\n   *     summary: 릴리즈 테스트케이스 조회\n   *     description: 특정 릴리즈에 포함된 테스트케이스 목록을 조회합니다.\n   *     tags: [Releases]\n   *     parameters:\n   *       - in: path\n   *         name: id\n   *         required: true\n   *         schema:\n   *           type: string\n   *           format: uuid\n   *         description: 릴리즈 ID\n   *     responses:\n   *       200:\n   *         description: 릴리즈 테스트케이스 조회 성공\n   *         content:\n   *           application/json:\n   *             schema:\n   *               type: object\n   *               properties:\n   *                 success:\n   *                   type: boolean\n   *                 data:\n   *                   type: array\n   *                   items:\n   *                     $ref: '#/components/schemas/TestCase'\n   *                 message:\n   *                   type: string\n   *       500:\n   *         description: 서버 오류\n   */\n  // 릴리즈 테스트 케이스 조회\n  async getReleaseTestCases(req: Request, res: Response) {\n    try {\n      const { id } = req.params;\n      const testCases = await releaseRepository.getTestCases(id);\n      \n      res.json({\n        success: true,\n        data: testCases,\n        message: '릴리즈 테스트 케이스를 성공적으로 조회했습니다.'\n      });\n    } catch (error) {\n      console.error('릴리즈 테스트 케이스 조회 실패:', error);\n      res.status(500).json({\n        success: false,\n        message: '릴리즈 테스트 케이스 조회 중 오류가 발생했습니다.'\n      });\n    }\n  }\n\n  /**\n   * @swagger\n   * /api/releases/testcases/folders:\n   *   get:\n   *     summary: 테스트 폴더 목록 조회\n   *     description: 테스트케이스 가져오기를 위한 폴더 목록을 조회합니다.\n   *     tags: [Releases]\n   *     responses:\n   *       200:\n   *         description: 테스트 폴더 조회 성공\n   *         content:\n   *           application/json:\n   *             schema:\n   *               type: object\n   *               properties:\n   *                 success:\n   *                   type: boolean\n   *                 data:\n   *                   type: array\n   *                   items:\n   *                     $ref: '#/components/schemas/Folder'\n   *                 message:\n   *                   type: string\n   *       500:\n   *         description: 서버 오류\n   */\n  // 테스트 폴더 조회\n  async getTestFolders(req: Request, res: Response) {\n    try {\n      const folders = await releaseRepository.getTestFolders();\n      \n      res.json({\n        success: true,\n        data: folders,\n        message: '테스트 폴더를 성공적으로 조회했습니다.'\n      });\n    } catch (error) {\n      console.error('테스트 폴더 조회 실패:', error);\n      res.status(500).json({\n        success: false,\n        message: '테스트 폴더 조회 중 오류가 발생했습니다.',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  }\n\n  /**\n   * @swagger\n   * /api/releases/folders/{folderId}/testcases:\n   *   get:\n   *     summary: 폴더별 테스트케이스 조회\n   *     description: 특정 폴더에 포함된 테스트케이스 목록을 조회합니다.\n   *     tags: [Releases]\n   *     parameters:\n   *       - in: path\n   *         name: folderId\n   *         required: true\n   *         schema:\n   *           type: integer\n   *         description: 폴더 ID\n   *     responses:\n   *       200:\n   *         description: 폴더 테스트케이스 조회 성공\n   *         content:\n   *           application/json:\n   *             schema:\n   *               type: object\n   *               properties:\n   *                 success:\n   *                   type: boolean\n   *                 data:\n   *                   type: array\n   *                   items:\n   *                     $ref: '#/components/schemas/TestCase'\n   *                 message:\n   *                   type: string\n   *       500:\n   *         description: 서버 오류\n   */\n  // 폴더별 테스트케이스 조회\n  async getFolderTestCases(req: Request, res: Response) {\n    try {\n      const { folderId } = req.params;\n      const testCases = await releaseRepository.getFolderTestCases(folderId);\n      \n      res.json({\n        success: true,\n        data: testCases,\n        message: '폴더 테스트케이스를 성공적으로 조회했습니다.'\n      });\n    } catch (error) {\n      console.error('폴더 테스트케이스 조회 실패:', error);\n      res.status(500).json({\n        success: false,\n        message: '폴더 테스트케이스 조회 중 오류가 발생했습니다.'\n      });\n    }\n  }\n\n  /**\n   * @swagger\n   * /api/releases/{releaseId}/testcases:\n   *   post:\n   *     summary: 릴리즈에 테스트케이스 추가\n   *     description: 특정 릴리즈에 테스트케이스들을 추가합니다.\n   *     tags: [Releases]\n   *     parameters:\n   *       - in: path\n   *         name: releaseId\n   *         required: true\n   *         schema:\n   *           type: string\n   *           format: uuid\n   *         description: 릴리즈 ID\n   *     requestBody:\n   *       required: true\n   *       content:\n   *         application/json:\n   *           schema:\n   *             type: object\n   *             required:\n   *               - testCaseIds\n   *             properties:\n   *               testCaseIds:\n   *                 type: array\n   *                 items:\n   *                   type: integer\n   *                 description: 추가할 테스트케이스 ID 목록\n   *     responses:\n   *       200:\n   *         description: 테스트케이스 추가 성공\n   *         content:\n   *           application/json:\n   *             schema:\n   *               type: object\n   *               properties:\n   *                 success:\n   *                   type: boolean\n   *                 data:\n   *                   type: object\n   *                 message:\n   *                   type: string\n   *       400:\n   *         description: 잘못된 요청\n   *       500:\n   *         description: 서버 오류\n   */\n  // 릴리즈에 테스트케이스 추가\n  async addTestCasesToRelease(req: Request, res: Response) {\n    try {\n      const { releaseId } = req.params;\n      const { testCaseIds } = req.body;\n      \n      if (!testCaseIds || !Array.isArray(testCaseIds)) {\n        return res.status(400).json({\n          success: false,\n          message: '테스트케이스 ID 목록이 필요합니다.'\n        });\n      }\n\n      const result = await releaseRepository.addTestCasesToRelease(releaseId, testCaseIds);\n      \n      res.json({\n        success: true,\n        data: result,\n        message: '테스트케이스가 성공적으로 릴리즈에 추가되었습니다.'\n      });\n    } catch (error) {\n      console.error('테스트케이스 추가 실패:', error);\n      res.status(500).json({\n        success: false,\n        message: '테스트케이스 추가 중 오류가 발생했습니다.'\n      });\n    }\n  }\n\n\n\n  // 릴리즈 테스트케이스 삭제 (전체 또는 특정)\n  async deleteReleaseTestCases(req: Request, res: Response) {\n    try {\n      const { id } = req.params;\n      const { testCaseIds } = req.body;\n      \n      if (testCaseIds && Array.isArray(testCaseIds)) {\n        // 특정 테스트케이스들 삭제\n        await releaseRepository.deleteSpecificTestCases(id, testCaseIds.map(tcId => tcId.toString()));\n        res.json({\n          success: true,\n          message: '선택한 테스트케이스가 성공적으로 릴리즈에서 삭제되었습니다.'\n        });\n      } else {\n        // 모든 테스트케이스 삭제\n        await releaseRepository.deleteTestCases(id);\n        res.json({\n          success: true,\n          message: '릴리즈의 모든 테스트케이스를 성공적으로 삭제했습니다.'\n        });\n      }\n    } catch (error) {\n      console.error('릴리즈 테스트케이스 삭제 실패:', error);\n      res.status(500).json({\n        success: false,\n        message: '릴리즈 테스트케이스 삭제 중 오류가 발생했습니다.'\n      });\n    }\n  }\n\n\n\n  /**\n   * @swagger\n   * /api/releases/{id}/imported-folders:\n   *   get:\n   *     summary: 릴리즈에 가져온 폴더 목록 조회\n   *     description: 특정 릴리즈에 가져온 폴더 목록을 조회합니다.\n   *     tags: [Releases]\n   *     parameters:\n   *       - in: path\n   *         name: id\n   *         required: true\n   *         schema:\n   *           type: string\n   *           format: uuid\n   *         description: 릴리즈 ID\n   *     responses:\n   *       200:\n   *         description: 가져온 폴더 목록 조회 성공\n   *         content:\n   *           application/json:\n   *             schema:\n   *               type: object\n   *               properties:\n   *                 success:\n   *                   type: boolean\n   *                 data:\n   *                   type: array\n   *                   items:\n   *                     type: object\n   *                     properties:\n   *                       id:\n   *                         type: integer\n   *                       release_id:\n   *                         type: string\n   *                         format: uuid\n   *                       folder_id:\n   *                         type: string\n   *                         format: uuid\n   *                       folder_name:\n   *                         type: string\n   *                       parent_id:\n   *                         type: string\n   *                         format: uuid\n   *                       test_case_count:\n   *                         type: integer\n   *                       created_at:\n   *                         type: string\n   *                         format: date-time\n   *       500:\n   *         description: 서버 오류\n   */\n  // 릴리즈에 가져온 폴더 목록 조회\n  async getImportedFolders(req: Request, res: Response) {\n    try {\n      const { id: releaseId } = req.params;\n      \n      const folders = await releaseRepository.getImportedFolders(releaseId);\n      \n      res.json({\n        success: true,\n        data: folders,\n        message: '가져온 폴더 목록을 성공적으로 조회했습니다.'\n      });\n    } catch (error) {\n      console.error('가져온 폴더 목록 조회 실패:', error);\n      res.status(500).json({\n        success: false,\n        message: '가져온 폴더 목록 조회 중 오류가 발생했습니다.'\n      });\n    }\n  }\n\n  /**\n   * @swagger\n   * /api/releases/{id}/imported-folders:\n   *   post:\n   *     summary: 릴리즈에 폴더 추가\n   *     description: 특정 릴리즈에 폴더를 추가합니다.\n   *     tags: [Releases]\n   *     parameters:\n   *       - in: path\n   *         name: id\n   *         required: true\n   *         schema:\n   *           type: string\n   *           format: uuid\n   *         description: 릴리즈 ID\n   *     requestBody:\n   *       required: true\n   *       content:\n   *         application/json:\n   *           schema:\n   *             type: object\n   *             required:\n   *               - folders\n   *             properties:\n   *               folders:\n   *                 type: array\n   *                 items:\n   *                   type: object\n   *                   properties:\n   *                     folder_id:\n   *                       type: string\n   *                       format: uuid\n   *                     folder_name:\n   *                       type: string\n   *                     parent_id:\n   *                       type: string\n   *                       format: uuid\n   *                     test_case_count:\n   *                       type: integer\n   *     responses:\n   *       200:\n   *         description: 폴더 추가 성공\n   *         content:\n   *           application/json:\n   *             schema:\n   *               type: object\n   *               properties:\n   *                 success:\n   *                   type: boolean\n   *                 data:\n   *                   type: array\n   *                 message:\n   *                   type: string\n   *       400:\n   *         description: 잘못된 요청\n   *       500:\n   *         description: 서버 오류\n   */\n  // 릴리즈에 폴더 추가\n  async addImportedFolders(req: Request, res: Response) {\n    try {\n      const { id: releaseId } = req.params;\n      const { folders } = req.body;\n      \n      if (!folders || !Array.isArray(folders)) {\n        return res.status(400).json({\n          success: false,\n          message: '폴더 목록이 필요합니다.'\n        });\n      }\n\n      const result = await releaseRepository.addImportedFolders(releaseId, folders);\n      \n      res.json({\n        success: true,\n        data: result,\n        message: '폴더를 성공적으로 추가했습니다.'\n      });\n    } catch (error) {\n      console.error('폴더 추가 실패:', error);\n      res.status(500).json({\n        success: false,\n        message: '폴더 추가 중 오류가 발생했습니다.'\n      });\n    }\n  }\n\n  /**\n   * @swagger\n   * /api/releases/{id}/imported-folders/{folderId}:\n   *   delete:\n   *     summary: 릴리즈에서 폴더 제거\n   *     description: 특정 릴리즈에서 폴더를 제거합니다.\n   *     tags: [Releases]\n   *     parameters:\n   *       - in: path\n   *         name: id\n   *         required: true\n   *         schema:\n   *           type: string\n   *           format: uuid\n   *         description: 릴리즈 ID\n   *       - in: path\n   *         name: folderId\n   *         required: true\n   *         schema:\n   *           type: string\n   *           format: uuid\n   *         description: 폴더 ID\n   *     responses:\n   *       200:\n   *         description: 폴더 제거 성공\n   *         content:\n   *           application/json:\n   *             schema:\n   *               type: object\n   *               properties:\n   *                 success:\n   *                   type: boolean\n   *                 message:\n   *                   type: string\n   *       500:\n   *         description: 서버 오류\n   */\n  // 릴리즈에서 폴더 제거\n  async removeImportedFolder(req: Request, res: Response) {\n    try {\n      const { id: releaseId, folderId } = req.params;\n      \n      await releaseRepository.removeImportedFolder(releaseId, parseInt(folderId));\n      \n      res.json({\n        success: true,\n        message: '폴더를 성공적으로 제거했습니다.'\n      });\n    } catch (error) {\n      console.error('폴더 제거 실패:', error);\n      res.status(500).json({\n        success: false,\n        message: '폴더 제거 중 오류가 발생했습니다.'\n      });\n    }\n  }\n\n  /**\n   * @swagger\n   * /api/releases/{id}/testcases/{testCaseId}/status:\n   *   put:\n   *     summary: 테스트케이스 상태 변경\n   *     description: 특정 릴리즈의 테스트케이스 상태를 변경합니다.\n   *     tags: [Releases]\n   *     parameters:\n   *       - in: path\n   *         name: id\n   *         required: true\n   *         schema:\n   *           type: string\n   *           format: uuid\n   *         description: 릴리즈 ID\n   *       - in: path\n   *         name: testCaseId\n   *         required: true\n   *         schema:\n   *           type: string\n   *         description: 테스트케이스 ID\n   *     requestBody:\n   *       required: true\n   *       content:\n   *         application/json:\n   *           schema:\n   *             type: object\n   *             properties:\n   *               status:\n   *                 type: string\n   *                 enum: [Pass, Fail, Block, Skip, Not Run]\n   *                 description: 새로운 상태\n   *               comment:\n   *                 type: string\n   *                 description: 코멘트 (선택사항)\n   *     responses:\n   *       200:\n   *         description: 상태 변경 성공\n   *         content:\n   *           application/json:\n   *             schema:\n   *               type: object\n   *               properties:\n   *                 success:\n   *                   type: boolean\n   *                 data:\n   *                   type: object\n   *                 message:\n   *                   type: string\n   *       500:\n   *         description: 서버 오류\n   */\n  // 테스트케이스 상태 변경\n  async updateTestCaseStatus(req: Request, res: Response) {\n    try {\n      const { id: releaseId, testCaseId } = req.params;\n      const { status, comment } = req.body;\n      \n      console.log('=== ReleaseController.updateTestCaseStatus 호출됨 ===');\n      console.log('releaseId:', releaseId);\n      console.log('testCaseId:', testCaseId);\n      console.log('status:', status);\n      console.log('comment:', comment);\n      \n      // 상태 검증 - 프론트엔드 상태값 허용\n      if (!status || !['Pass', 'Fail', 'Block', 'Blocked', 'Skip', 'Not Run'].includes(status)) {\n        return res.status(400).json({\n          success: false,\n          message: '유효하지 않은 상태입니다. (Pass, Fail, Block, Blocked, Skip, Not Run)'\n        });\n      }\n      \n      console.log('=== 컨트롤러에서 리포지토리 호출 전 ===');\n      console.log('전달할 매개변수:', { releaseId, testCaseId, status, comment });\n      \n      const result = await releaseRepository.updateTestCaseStatus(releaseId, testCaseId, status, comment);\n      \n      console.log('=== 상태 변경 성공 ===');\n      console.log('result:', result);\n      \n      res.json({\n        success: true,\n        data: result,\n        message: '테스트케이스 상태가 성공적으로 변경되었습니다.'\n      });\n    } catch (error) {\n      console.error('=== 테스트케이스 상태 변경 실패 ===');\n      console.error('Error details:', error);\n      res.status(500).json({\n        success: false,\n        message: '테스트케이스 상태 변경 중 오류가 발생했습니다.'\n      });\n    }\n  }\n\n  // 릴리즈 실행 통계 조회\n  async getReleaseExecutionStats(req: Request, res: Response) {\n    try {\n      const { id: releaseId } = req.params;\n      \n      console.log('=== ReleaseController.getReleaseExecutionStats 호출됨 ===');\n      console.log('releaseId:', releaseId);\n      \n      const stats = await releaseRepository.getExecutionStats(releaseId);\n      \n      console.log('=== 실행 통계 조회 성공 ===');\n      console.log('stats:', stats);\n      \n      res.json({\n        success: true,\n        data: stats,\n        message: '릴리즈 실행 통계를 성공적으로 조회했습니다.'\n      });\n    } catch (error) {\n      console.error('=== 실행 통계 조회 실패 ===');\n      console.error('Error details:', error);\n      res.status(500).json({\n        success: false,\n        message: '실행 통계 조회 중 오류가 발생했습니다.'\n      });\n    }\n  }\n\n  // 릴리즈 실행 통계 업데이트\n  async updateReleaseExecutionStats(req: Request, res: Response) {\n    try {\n      const { id: releaseId } = req.params;\n      const { plannedCount } = req.body;\n      \n      console.log('=== ReleaseController.updateReleaseExecutionStats 호출됨 ===');\n      console.log('releaseId:', releaseId);\n      console.log('plannedCount:', plannedCount);\n      \n      const stats = await releaseRepository.updateExecutionStats(releaseId, plannedCount);\n      \n      console.log('=== 실행 통계 업데이트 성공 ===');\n      console.log('stats:', stats);\n      \n      res.json({\n        success: true,\n        data: stats,\n        message: '릴리즈 실행 통계를 성공적으로 업데이트했습니다.'\n      });\n    } catch (error) {\n      console.error('=== 실행 통계 업데이트 실패 ===');\n      console.error('Error details:', error);\n      res.status(500).json({\n        success: false,\n        message: '실행 통계 업데이트 중 오류가 발생했습니다.'\n      });\n    }\n  }\n\n  // 초기 데이터 로드 (개발용)\n  async loadInitialData(req: Request, res: Response) {\n    try {\n      await releaseRepository.loadInitialData();\n      \n      res.json({\n        success: true,\n        message: '초기 데이터가 성공적으로 로드되었습니다.'\n      });\n    } catch (error) {\n      console.error('초기 데이터 로드 실패:', error);\n      res.status(500).json({\n        success: false,\n        message: '초기 데이터 로드 중 오류가 발생했습니다.'\n      });\n    }\n  }\n}\n\nexport const releaseController = new ReleaseController();"],"version":3}