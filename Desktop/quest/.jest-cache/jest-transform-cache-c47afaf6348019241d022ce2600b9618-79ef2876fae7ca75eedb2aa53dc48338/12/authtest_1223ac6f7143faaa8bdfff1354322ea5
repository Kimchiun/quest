bc6e4b6b7bf6780cc7621ccd9db858b5
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const supertest_1 = __importDefault(require("supertest"));
const app_1 = __importDefault(require("../src/main/app/app"));
const pgClient_1 = __importStar(require("../src/main/app/infrastructure/database/pgClient"));
describe('인증/권한 API', () => {
    beforeAll(async () => {
        await (0, pgClient_1.ensurePgConnected)();
        if (pgClient_1.default) {
            // 더 강력한 초기화
            await pgClient_1.default.query('TRUNCATE TABLE users CASCADE');
            await pgClient_1.default.query('ALTER SEQUENCE users_id_seq RESTART WITH 1');
        }
    });
    beforeEach(async () => {
        // 각 테스트 전에 사용자 테이블 초기화
        if (pgClient_1.default) {
            await pgClient_1.default.query('DELETE FROM users');
        }
    });
    const user = { username: 'testuser', password: 'testpass123', role: 'QA' };
    let token;
    it('회원가입 성공', async () => {
        const res = await (0, supertest_1.default)(app_1.default).post('/api/auth/register').send(user);
        expect(res.status).toBe(201);
        expect(res.body.username).toBe(user.username);
        expect(res.body.role).toBe(user.role);
    });
    it('중복 회원가입 실패', async () => {
        // 먼저 사용자 생성
        await (0, supertest_1.default)(app_1.default).post('/api/auth/register').send(user);
        // 중복 생성 시도
        const res = await (0, supertest_1.default)(app_1.default).post('/api/auth/register').send(user);
        expect(res.status).toBe(409);
    });
    it('로그인 성공 및 JWT 반환', async () => {
        // 먼저 사용자 생성
        await (0, supertest_1.default)(app_1.default).post('/api/auth/register').send(user);
        const res = await (0, supertest_1.default)(app_1.default).post('/api/auth/login').send({ username: user.username, password: user.password });
        expect(res.status).toBe(200);
        expect(res.body.token).toBeDefined();
        token = res.body.token;
    });
    it('잘못된 비밀번호 로그인 실패', async () => {
        // 먼저 사용자 생성
        await (0, supertest_1.default)(app_1.default).post('/api/auth/register').send(user);
        const res = await (0, supertest_1.default)(app_1.default).post('/api/auth/login').send({ username: user.username, password: 'wrongpass' });
        expect(res.status).toBe(401);
    });
    // RBAC 미들웨어 테스트 - 실제 존재하는 엔드포인트 사용
    it('권한 미들웨어: 인증된 사용자 접근 허용', async () => {
        // 먼저 사용자 생성 및 로그인
        await (0, supertest_1.default)(app_1.default).post('/api/auth/register').send(user);
        const loginRes = await (0, supertest_1.default)(app_1.default).post('/api/auth/login').send({ username: user.username, password: user.password });
        const authToken = loginRes.body.token;
        // 실제 존재하는 엔드포인트 사용 (예: releases)
        const res = await (0, supertest_1.default)(app_1.default)
            .get('/api/releases')
            .set('Authorization', `Bearer ${authToken}`);
        // 200 또는 401 (인증 실패) 중 하나는 정상
        expect([200, 401]).toContain(res.status);
    });
    afterAll(async () => {
        if (pgClient_1.default) {
            await pgClient_1.default.query('DELETE FROM users');
            await pgClient_1.default.end();
        }
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,