df69ff0b161f00ad95ef56e13fcef40e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.executionService = void 0;
const executionRepository_1 = require("../repositories/executionRepository");
exports.executionService = {
    async createExecution(data) {
        console.log('ExecutionService.createExecution received data:', data);
        // 상태 유효성 검사
        if (!['Pass', 'Fail', 'Blocked', 'Untested'].includes(data.status)) {
            throw new Error('Invalid execution status');
        }
        // 필요한 필드만 추출하여 전달
        const executionData = {
            testcaseId: data.testcaseId,
            releaseId: data.releaseId,
            status: data.status,
            executedBy: data.executedBy,
            executedAt: data.executedAt,
            comment: data.comment
        };
        console.log('ExecutionService.createExecution cleaned data:', executionData);
        return executionRepository_1.executionRepository.insert(executionData);
    },
    async getExecutionById(id) {
        return executionRepository_1.executionRepository.findById(id);
    },
    async getExecutionsByTestCase(testcaseId) {
        return executionRepository_1.executionRepository.findByTestCase(testcaseId);
    },
    async updateExecution(id, update) {
        if (update.status && !['Pass', 'Fail', 'Blocked', 'Untested'].includes(update.status)) {
            throw new Error('Invalid execution status');
        }
        return executionRepository_1.executionRepository.update(id, update);
    },
    async deleteExecution(id) {
        await executionRepository_1.executionRepository.delete(id);
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0RvY3VtZW50cy9xdWVzdC9EZXNrdG9wL3F1ZXN0L3NyYy9tYWluL2FwcC9kb21haW5zL2V4ZWN1dGlvbnMvc2VydmljZXMvZXhlY3V0aW9uU2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7QUFDQSw2RUFBMEU7QUFFN0QsUUFBQSxnQkFBZ0IsR0FBRztJQUM1QixLQUFLLENBQUMsZUFBZSxDQUFDLElBQXVEO1FBQ3pFLE9BQU8sQ0FBQyxHQUFHLENBQUMsaURBQWlELEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFckUsWUFBWTtRQUNaLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztZQUNqRSxNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUM7UUFDaEQsQ0FBQztRQUVELGtCQUFrQjtRQUNsQixNQUFNLGFBQWEsR0FBRztZQUNsQixVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDM0IsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3pCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNuQixVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDM0IsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQzNCLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztTQUN4QixDQUFDO1FBRUYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnREFBZ0QsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUU3RSxPQUFPLHlDQUFtQixDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsS0FBSyxDQUFDLGdCQUFnQixDQUFDLEVBQVU7UUFDN0IsT0FBTyx5Q0FBbUIsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxVQUFrQjtRQUM1QyxPQUFPLHlDQUFtQixDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRUQsS0FBSyxDQUFDLGVBQWUsQ0FBQyxFQUFVLEVBQUUsTUFBb0Q7UUFDbEYsSUFBSSxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7WUFDcEYsTUFBTSxJQUFJLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1FBQ2hELENBQUM7UUFDRCxPQUFPLHlDQUFtQixDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELEtBQUssQ0FBQyxlQUFlLENBQUMsRUFBVTtRQUM1QixNQUFNLHlDQUFtQixDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN6QyxDQUFDO0NBQ0osQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvM2ktYTEtMjAyMS0wMTcvRG9jdW1lbnRzL3F1ZXN0L0Rlc2t0b3AvcXVlc3Qvc3JjL21haW4vYXBwL2RvbWFpbnMvZXhlY3V0aW9ucy9zZXJ2aWNlcy9leGVjdXRpb25TZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4ZWN1dGlvbiB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IGV4ZWN1dGlvblJlcG9zaXRvcnkgfSBmcm9tICcuLi9yZXBvc2l0b3JpZXMvZXhlY3V0aW9uUmVwb3NpdG9yeSc7XG5cbmV4cG9ydCBjb25zdCBleGVjdXRpb25TZXJ2aWNlID0ge1xuICAgIGFzeW5jIGNyZWF0ZUV4ZWN1dGlvbihkYXRhOiBPbWl0PEV4ZWN1dGlvbiwgJ2lkJyB8ICdjcmVhdGVkQXQnIHwgJ3VwZGF0ZWRBdCc+KTogUHJvbWlzZTxFeGVjdXRpb24+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ0V4ZWN1dGlvblNlcnZpY2UuY3JlYXRlRXhlY3V0aW9uIHJlY2VpdmVkIGRhdGE6JywgZGF0YSk7XG4gICAgICAgIFxuICAgICAgICAvLyDsg4Htg5wg7Jyg7Zqo7ISxIOqygOyCrFxuICAgICAgICBpZiAoIVsnUGFzcycsICdGYWlsJywgJ0Jsb2NrZWQnLCAnVW50ZXN0ZWQnXS5pbmNsdWRlcyhkYXRhLnN0YXR1cykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBleGVjdXRpb24gc3RhdHVzJyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIO2VhOyalO2VnCDtlYTrk5zrp4wg7LaU7Lac7ZWY7JesIOyghOuLrFxuICAgICAgICBjb25zdCBleGVjdXRpb25EYXRhID0ge1xuICAgICAgICAgICAgdGVzdGNhc2VJZDogZGF0YS50ZXN0Y2FzZUlkLFxuICAgICAgICAgICAgcmVsZWFzZUlkOiBkYXRhLnJlbGVhc2VJZCxcbiAgICAgICAgICAgIHN0YXR1czogZGF0YS5zdGF0dXMsXG4gICAgICAgICAgICBleGVjdXRlZEJ5OiBkYXRhLmV4ZWN1dGVkQnksXG4gICAgICAgICAgICBleGVjdXRlZEF0OiBkYXRhLmV4ZWN1dGVkQXQsXG4gICAgICAgICAgICBjb21tZW50OiBkYXRhLmNvbW1lbnRcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKCdFeGVjdXRpb25TZXJ2aWNlLmNyZWF0ZUV4ZWN1dGlvbiBjbGVhbmVkIGRhdGE6JywgZXhlY3V0aW9uRGF0YSk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gZXhlY3V0aW9uUmVwb3NpdG9yeS5pbnNlcnQoZXhlY3V0aW9uRGF0YSk7XG4gICAgfSxcblxuICAgIGFzeW5jIGdldEV4ZWN1dGlvbkJ5SWQoaWQ6IG51bWJlcik6IFByb21pc2U8RXhlY3V0aW9uIHwgbnVsbD4ge1xuICAgICAgICByZXR1cm4gZXhlY3V0aW9uUmVwb3NpdG9yeS5maW5kQnlJZChpZCk7XG4gICAgfSxcblxuICAgIGFzeW5jIGdldEV4ZWN1dGlvbnNCeVRlc3RDYXNlKHRlc3RjYXNlSWQ6IG51bWJlcik6IFByb21pc2U8RXhlY3V0aW9uW10+IHtcbiAgICAgICAgcmV0dXJuIGV4ZWN1dGlvblJlcG9zaXRvcnkuZmluZEJ5VGVzdENhc2UodGVzdGNhc2VJZCk7XG4gICAgfSxcblxuICAgIGFzeW5jIHVwZGF0ZUV4ZWN1dGlvbihpZDogbnVtYmVyLCB1cGRhdGU6IFBhcnRpYWw8T21pdDxFeGVjdXRpb24sICdpZCcgfCAnY3JlYXRlZEF0Jz4+KTogUHJvbWlzZTxFeGVjdXRpb24gfCBudWxsPiB7XG4gICAgICAgIGlmICh1cGRhdGUuc3RhdHVzICYmICFbJ1Bhc3MnLCAnRmFpbCcsICdCbG9ja2VkJywgJ1VudGVzdGVkJ10uaW5jbHVkZXModXBkYXRlLnN0YXR1cykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBleGVjdXRpb24gc3RhdHVzJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV4ZWN1dGlvblJlcG9zaXRvcnkudXBkYXRlKGlkLCB1cGRhdGUpO1xuICAgIH0sXG5cbiAgICBhc3luYyBkZWxldGVFeGVjdXRpb24oaWQ6IG51bWJlcik6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCBleGVjdXRpb25SZXBvc2l0b3J5LmRlbGV0ZShpZCk7XG4gICAgfVxufTsgIl0sInZlcnNpb24iOjN9