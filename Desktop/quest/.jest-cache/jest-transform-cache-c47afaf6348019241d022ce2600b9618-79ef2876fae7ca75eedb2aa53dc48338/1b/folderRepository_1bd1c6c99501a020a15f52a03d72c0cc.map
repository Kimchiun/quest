{"file":"/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/src/main/app/domains/folders/repositories/folderRepository.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/src/main/app/domains/folders/repositories/folderRepository.ts"],"sourcesContent":["import { Folder, FolderTree } from '../models/Folder';\nimport { getPgClient } from '../../../infrastructure/database/pgClient';\n\nexport async function createFolder(data: Omit<Folder, 'id' | 'createdAt' | 'updatedAt'>): Promise<Folder> {\n    try {\n        const pgClient = getPgClient();\n        if (!pgClient) {\n            throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n        }\n\n        const result = await pgClient.query(`\n            INSERT INTO tree_nodes (name, type, parent_id, sort_order, created_by)\n            VALUES ($1, $2, $3, $4, $5)\n            RETURNING id, name, type, parent_id, sort_order, created_by, created_at, updated_at\n        `, [data.name, 'folder', data.parentId, data.orderIndex, data.createdBy]);\n\n        const row = result.rows[0];\n        return {\n            id: row.id,\n            projectId: data.projectId,\n            parentId: row.parent_id,\n            name: row.name,\n            description: data.description || '',\n            orderIndex: row.sort_order,\n            depth: data.depth || 0,\n            createdBy: row.created_by,\n            updatedBy: data.createdBy,\n            isLocked: false,\n            isArchived: false,\n            createdAt: row.created_at,\n            updatedAt: row.updated_at\n        };\n    } catch (error) {\n        console.error('폴더 생성 실패:', error);\n        throw error;\n    }\n}\n\nexport async function getFolderById(id: number): Promise<Folder | null> {\n    try {\n        const pgClient = getPgClient();\n        if (!pgClient) {\n            throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n        }\n\n        console.log(`🔍 폴더 조회 시도: ID ${id}`);\n        \n        // 먼저 모든 폴더를 조회해서 데이터베이스 연결 확인\n        const allFolders = await pgClient.query(`\n            SELECT id, name, type FROM tree_nodes WHERE type = 'folder' ORDER BY id\n        `);\n        console.log(`🔍 전체 폴더 수: ${allFolders.rows.length}개`);\n        allFolders.rows.forEach(row => {\n            console.log(`  - ID: ${row.id}, 이름: ${row.name}`);\n        });\n        \n        const result = await pgClient.query(`\n            SELECT id, name, type, parent_id, sort_order, created_by, created_at, updated_at\n            FROM tree_nodes \n            WHERE id = $1 AND type = 'folder'\n        `, [id]);\n\n        console.log(`🔍 쿼리 결과: ${result.rows.length}개 행`);\n        if (result.rows.length === 0) {\n            console.log(`❌ 폴더를 찾을 수 없음: ID ${id}`);\n            return null;\n        }\n\n        const row = result.rows[0];\n        console.log(`✅ 폴더 찾음: ${row.name} (ID: ${row.id})`);\n        return {\n            id: row.id,\n            projectId: 1, // 기본값\n            parentId: row.parent_id,\n            name: row.name,\n            description: '',\n            orderIndex: row.sort_order,\n            depth: 0, // 기본값\n            createdBy: row.created_by,\n            updatedBy: row.created_by,\n            isLocked: false,\n            isArchived: false,\n            createdAt: row.created_at,\n            updatedAt: row.updated_at\n        };\n    } catch (error) {\n        console.error('폴더 조회 실패:', error);\n        return null;\n    }\n}\n\nexport async function updateFolder(id: number, data: Partial<Folder> & { updatedBy?: string }): Promise<Folder | null> {\n    try {\n        const pgClient = getPgClient();\n        if (!pgClient) {\n            throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n        }\n\n        // 업데이트할 필드들을 동적으로 구성\n        const updateFields: string[] = [];\n        const queryParams: any[] = [];\n        let paramIndex = 1;\n\n        if (data.name !== undefined) {\n            updateFields.push(`name = $${paramIndex}`);\n            queryParams.push(data.name);\n            paramIndex++;\n        }\n\n        if (data.parentId !== undefined) {\n            updateFields.push(`parent_id = $${paramIndex}`);\n            queryParams.push(data.parentId);\n            paramIndex++;\n        }\n\n        if (data.orderIndex !== undefined) {\n            updateFields.push(`sort_order = $${paramIndex}`);\n            queryParams.push(data.orderIndex);\n            paramIndex++;\n        }\n\n        updateFields.push(`updated_at = NOW()`);\n\n        const result = await pgClient.query(`\n            UPDATE tree_nodes \n            SET ${updateFields.join(', ')}\n            WHERE id = $${paramIndex} AND type = 'folder'\n            RETURNING id, name, type, parent_id, sort_order, created_by, created_at, updated_at\n        `, [...queryParams, id]);\n\n        if (result.rows.length === 0) {\n            return null;\n        }\n\n        const row = result.rows[0];\n        return {\n            id: row.id,\n            projectId: 1, // 기본값\n            parentId: row.parent_id,\n            name: row.name,\n            description: '',\n            orderIndex: row.sort_order,\n            depth: 0, // 기본값\n            createdBy: row.created_by,\n            updatedBy: data.updatedBy || row.created_by,\n            isLocked: false,\n            isArchived: false,\n            createdAt: row.created_at,\n            updatedAt: row.updated_at\n        };\n    } catch (error) {\n        console.error('폴더 업데이트 실패:', error);\n        return null;\n    }\n}\n\nexport async function deleteFolder(id: number, mode: 'soft' | 'hard' = 'soft', deletedBy: string): Promise<boolean> {\n    try {\n        const pgClient = getPgClient();\n        if (!pgClient) {\n            throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n        }\n\n        // 현재는 하드 삭제만 지원\n        const result = await pgClient.query(`\n            DELETE FROM tree_nodes \n            WHERE id = $1 AND type = 'folder'\n        `, [id]);\n        return (result.rowCount || 0) > 0;\n    } catch (error) {\n        console.error('폴더 삭제 실패:', error);\n        return false;\n    }\n}\n\nexport async function listFolders(params: {\n    parentId?: number;\n    projectId?: number;\n} = {}): Promise<Folder[]> {\n    try {\n        const pgClient = getPgClient();\n        if (!pgClient) {\n            throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n        }\n\n        let query = `\n            SELECT id, name, type, parent_id, sort_order, created_by, created_at, updated_at\n            FROM tree_nodes \n            WHERE type = 'folder'\n        `;\n        const queryParams: any[] = [];\n        let paramIndex = 1;\n\n        if (params.parentId !== undefined) {\n            query += ` AND parent_id = $${paramIndex}`;\n            queryParams.push(params.parentId);\n            paramIndex++;\n        }\n\n        // project_id 컬럼이 없으므로 제거\n        // if (params.projectId !== undefined) {\n        //     query += ` AND project_id = $${paramIndex}`;\n        //     queryParams.push(params.projectId);\n        // }\n\n        query += ` ORDER BY sort_order`;\n\n        const result = await pgClient.query(query, queryParams);\n\n        return result.rows.map((row: any) => ({\n            id: row.id,\n            projectId: params.projectId || 1,\n            parentId: row.parent_id,\n            name: row.name,\n            description: '',\n            orderIndex: row.sort_order,\n            depth: 0, // 기본값\n            createdBy: row.created_by,\n            updatedBy: row.created_by,\n            isLocked: false,\n            isArchived: false,\n            createdAt: row.created_at,\n            updatedAt: row.updated_at\n        }));\n    } catch (error) {\n        console.error('폴더 목록 조회 실패:', error);\n        return [];\n    }\n}\n\nexport async function getFolderTree(projectId: number, depth?: number): Promise<FolderTree[]> {\n    const allFolders = await listFolders({ projectId });\n    const folderMap = new Map<number, FolderTree>();\n    const rootFolders: FolderTree[] = [];\n    \n    // 폴더가 없으면 빈 배열 반환 (자동 생성하지 않음)\n    if (allFolders.length === 0) {\n        console.log('📁 폴더가 없습니다. 빈 배열을 반환합니다.');\n        return [];\n    }\n    \n    // depth 계산 함수\n    const calculateDepth = (folderId: number, visited: Set<number> = new Set()): number => {\n        if (visited.has(folderId)) return 0; // 순환 참조 방지\n        visited.add(folderId);\n        \n        const folder = allFolders.find(f => f.id === folderId);\n        if (!folder || !folder.parentId) return 0;\n        \n        return 1 + calculateDepth(folder.parentId, visited);\n    };\n    \n    // 모든 폴더를 맵에 추가 (depth 계산 포함)\n    allFolders.forEach(folder => {\n        const calculatedDepth = calculateDepth(folder.id);\n        if (depth === undefined || calculatedDepth <= depth) {\n            folderMap.set(folder.id, {\n                ...folder,\n                depth: calculatedDepth,\n                children: [],\n                testCaseCount: 0\n            });\n        }\n    });\n    \n    // 트리 구조 생성\n    allFolders.forEach(folder => {\n        const calculatedDepth = calculateDepth(folder.id);\n        if (depth === undefined || calculatedDepth <= depth) {\n            const folderTree = folderMap.get(folder.id)!;\n            \n            if (folder.parentId && folderMap.has(folder.parentId)) {\n                const parent = folderMap.get(folder.parentId)!;\n                parent.children!.push(folderTree);\n            } else {\n                rootFolders.push(folderTree);\n            }\n        }\n    });\n    \n    // 각 폴더의 테스트 케이스 개수 계산\n    for (const folderTree of folderMap.values()) {\n        try {\n            const pgClient = getPgClient();\n            if (pgClient) {\n                const result = await pgClient.query(`\n                    SELECT COUNT(*) as count \n                    FROM tree_nodes \n                    WHERE type = 'testcase' AND parent_id = $1\n                `, [folderTree.id]);\n                \n                folderTree.testCaseCount = parseInt(result.rows[0].count);\n            }\n        } catch (error) {\n            console.error(`테스트 케이스 개수 계산 실패 (폴더 ID: ${folderTree.id}):`, error);\n            folderTree.testCaseCount = 0;\n        }\n    }\n    \n    return rootFolders.sort((a, b) => a.orderIndex - b.orderIndex);\n} "],"version":3}