{"file":"/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/src/main/app/domains/tree/repositories/treeRepository.ts","mappings":";;AAOA,wCAkCC;AAED,0CAuBC;AAED,0CAkCC;AAED,4CAqDC;AAED,wCAiDC;AAED,wCAQC;AAMD,0CA2EC;AAMD,oCA8CC;AAED,0CAsEC;AAMD,wDAwCC;AAMD,gDAiBC;AA5eD,wEAAwE;AAGxE,wDAAwD;AACxD,aAAa;AACb,wDAAwD;AAEjD,KAAK,UAAU,cAAc,CAAC,OAA8B;IACjE,MAAM,QAAQ,GAAG,IAAA,sBAAW,GAAE,CAAC;IAC/B,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;IACpD,CAAC;IAED,sBAAsB;IACtB,IAAI,SAAS,GAAG,CAAC,CAAC;IAClB,IAAI,OAAO,CAAC,QAAQ,KAAK,IAAI,IAAI,OAAO,CAAC,QAAQ,KAAK,SAAS,EAAE,CAAC;QAChE,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,KAAK,CACnC,yFAAyF,EACzF,CAAC,OAAO,CAAC,QAAQ,CAAC,CACnB,CAAC;QACF,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC7B,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC;QAC9C,CAAC;IACH,CAAC;IAED,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,KAAK,CACjC,gHAAgH,EAChH,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,QAAQ,EAAE,SAAS,EAAE,OAAO,CAAC,SAAS,CAAC,CAC7E,CAAC;IAEF,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC3B,OAAO;QACL,EAAE,EAAE,GAAG,CAAC,EAAE;QACV,IAAI,EAAE,GAAG,CAAC,IAAI;QACd,IAAI,EAAE,GAAG,CAAC,IAAI;QACd,QAAQ,EAAE,GAAG,CAAC,SAAS;QACvB,SAAS,EAAE,GAAG,CAAC,UAAU;QACzB,SAAS,EAAE,GAAG,CAAC,UAAU;QACzB,SAAS,EAAE,GAAG,CAAC,UAAU;QACzB,SAAS,EAAE,GAAG,CAAC,UAAU;KAC1B,CAAC;AACJ,CAAC;AAEM,KAAK,UAAU,eAAe,CAAC,EAAU;IAC9C,MAAM,QAAQ,GAAG,IAAA,sBAAW,GAAE,CAAC;IAC/B,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;IACpD,CAAC;IAED,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,KAAK,CAAC,wCAAwC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAEpF,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QAC7B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC3B,OAAO;QACL,EAAE,EAAE,GAAG,CAAC,EAAE;QACV,IAAI,EAAE,GAAG,CAAC,IAAI;QACd,IAAI,EAAE,GAAG,CAAC,IAAI;QACd,QAAQ,EAAE,GAAG,CAAC,SAAS;QACvB,SAAS,EAAE,GAAG,CAAC,UAAU;QACzB,SAAS,EAAE,GAAG,CAAC,UAAU;QACzB,SAAS,EAAE,GAAG,CAAC,UAAU;QACzB,SAAS,EAAE,GAAG,CAAC,UAAU;KAC1B,CAAC;AACJ,CAAC;AAEM,KAAK,UAAU,eAAe;IACnC,MAAM,QAAQ,GAAG,IAAA,sBAAW,GAAE,CAAC;IAC/B,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;IACpD,CAAC;IAED,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,KAAK,CAAC,oDAAoD,CAAC,CAAC;IAE1F,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAQ,EAAE,EAAE,CAAC,CAAC;QAC3C,EAAE,EAAE,GAAG,CAAC,EAAE;QACV,IAAI,EAAE,GAAG,CAAC,IAAI;QACd,IAAI,EAAE,GAAG,CAAC,IAAI;QACd,QAAQ,EAAE,GAAG,CAAC,SAAS;QACvB,SAAS,EAAE,GAAG,CAAC,UAAU;QACzB,SAAS,EAAE,GAAG,CAAC,UAAU;QACzB,SAAS,EAAE,GAAG,CAAC,UAAU;QACzB,SAAS,EAAE,GAAG,CAAC,UAAU;KAC1B,CAAC,CAAC,CAAC;IAEJ,2BAA2B;IAC3B,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;QACzB,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;YAC3B,yBAAyB;YACzB,MAAM,mBAAmB,GAAG,MAAM,QAAQ,CAAC,KAAK,CAAC;;;;OAIhD,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;YAEb,IAAY,CAAC,aAAa,GAAG,QAAQ,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,KAAK,IAAI,GAAG,CAAC,CAAC;QACpF,CAAC;IACH,CAAC;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAEM,KAAK,UAAU,gBAAgB;IACpC,MAAM,QAAQ,GAAG,IAAA,sBAAW,GAAE,CAAC;IAC/B,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;IACpD,CAAC;IAED,WAAW;IACX,MAAM,QAAQ,GAAG,MAAM,eAAe,EAAE,CAAC;IAEzC,cAAc;IACd,MAAM,cAAc,GAAG,MAAM,QAAQ,CAAC,KAAK,CAAC;;;;;GAK3C,CAAC,CAAC;IAEH,MAAM,QAAQ,GAAG,IAAI,GAAG,EAAkB,CAAC;IAC3C,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAQ,EAAE,EAAE;QACvC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,WAAW;IACX,MAAM,OAAO,GAAG,IAAI,GAAG,EAAoB,CAAC;IAC5C,MAAM,SAAS,GAAe,EAAE,CAAC;IAEjC,kBAAkB;IAClB,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QACtB,MAAM,QAAQ,GAAa;YACzB,GAAG,IAAI;YACP,QAAQ,EAAE,EAAE;YACZ,aAAa,EAAE,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC;SAC1C,CAAC;QACF,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,cAAc;IACd,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QACtB,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAE,CAAC;QAEvC,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,EAAE,CAAC;YAC5C,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC1C,IAAI,MAAM,EAAE,CAAC;gBACX,MAAM,CAAC,QAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAClC,CAAC;iBAAM,CAAC;gBACN,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC3B,CAAC;QACH,CAAC;aAAM,CAAC;YACN,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC3B,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,SAAS,CAAC;AACnB,CAAC;AAEM,KAAK,UAAU,cAAc,CAAC,EAAU,EAAE,OAA8B;IAC7E,MAAM,QAAQ,GAAG,IAAA,sBAAW,GAAE,CAAC;IAC/B,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;IACpD,CAAC;IAED,MAAM,UAAU,GAAa,EAAE,CAAC;IAChC,MAAM,MAAM,GAAU,EAAE,CAAC;IACzB,IAAI,UAAU,GAAG,CAAC,CAAC;IAEnB,IAAI,OAAO,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;QAC/B,UAAU,CAAC,IAAI,CAAC,WAAW,UAAU,EAAE,EAAE,CAAC,CAAC;QAC3C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC;IAED,IAAI,OAAO,CAAC,QAAQ,KAAK,SAAS,EAAE,CAAC;QACnC,UAAU,CAAC,IAAI,CAAC,gBAAgB,UAAU,EAAE,EAAE,CAAC,CAAC;QAChD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAChC,CAAC;IAED,IAAI,OAAO,CAAC,SAAS,KAAK,SAAS,EAAE,CAAC;QACpC,UAAU,CAAC,IAAI,CAAC,iBAAiB,UAAU,EAAE,EAAE,CAAC,CAAC;QACjD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACjC,CAAC;IAED,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QAC5B,OAAO,eAAe,CAAC,EAAE,CAAC,CAAC;IAC7B,CAAC;IAED,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAChB,MAAM,KAAK,GAAG,yBAAyB,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,UAAU,cAAc,CAAC;IAErG,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IAEnD,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QAC7B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC3B,OAAO;QACL,EAAE,EAAE,GAAG,CAAC,EAAE;QACV,IAAI,EAAE,GAAG,CAAC,IAAI;QACd,IAAI,EAAE,GAAG,CAAC,IAAI;QACd,QAAQ,EAAE,GAAG,CAAC,SAAS;QACvB,SAAS,EAAE,GAAG,CAAC,UAAU;QACzB,SAAS,EAAE,GAAG,CAAC,UAAU;QACzB,SAAS,EAAE,GAAG,CAAC,UAAU;QACzB,SAAS,EAAE,GAAG,CAAC,UAAU;KAC1B,CAAC;AACJ,CAAC;AAEM,KAAK,UAAU,cAAc,CAAC,EAAU;IAC7C,MAAM,QAAQ,GAAG,IAAA,sBAAW,GAAE,CAAC;IAC/B,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;IACpD,CAAC;IAED,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,KAAK,CAAC,mDAAmD,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/F,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;AAChC,CAAC;AAED,wDAAwD;AACxD,QAAQ;AACR,wDAAwD;AAEjD,KAAK,UAAU,eAAe,CAAC,OAA0B;IAC9D,MAAM,QAAQ,GAAG,IAAA,sBAAW,GAAE,CAAC;IAC/B,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;IACpD,CAAC;IAED,IAAI,KAAK,GAAG,oCAAoC,CAAC;IACjD,MAAM,MAAM,GAAU,EAAE,CAAC;IACzB,IAAI,UAAU,GAAG,CAAC,CAAC;IAEnB,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC;QAClB,KAAK,IAAI,oBAAoB,UAAU,EAAE,EAAE,CAAC;QAC5C,MAAM,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC;IACpC,CAAC;IAED,IAAI,OAAO,CAAC,IAAI,EAAE,CAAC;QACjB,KAAK,IAAI,gBAAgB,UAAU,EAAE,EAAE,CAAC;QACxC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC;IAED,IAAI,OAAO,CAAC,QAAQ,KAAK,SAAS,EAAE,CAAC;QACnC,KAAK,IAAI,qBAAqB,UAAU,EAAE,EAAE,CAAC;QAC7C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAChC,CAAC;IAED,KAAK,IAAI,4BAA4B,CAAC;IAEtC,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC;QAClB,KAAK,IAAI,WAAW,UAAU,EAAE,EAAE,CAAC;QACnC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IAED,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;QACnB,KAAK,IAAI,YAAY,UAAU,EAAE,EAAE,CAAC;QACpC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC9B,CAAC;IAED,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IAEnD,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAQ,EAAE,EAAE,CAAC,CAAC;QAC3C,EAAE,EAAE,GAAG,CAAC,EAAE;QACV,IAAI,EAAE,GAAG,CAAC,IAAI;QACd,IAAI,EAAE,GAAG,CAAC,IAAI;QACd,QAAQ,EAAE,GAAG,CAAC,SAAS;QACvB,SAAS,EAAE,GAAG,CAAC,UAAU;QACzB,SAAS,EAAE,GAAG,CAAC,UAAU;QACzB,SAAS,EAAE,GAAG,CAAC,UAAU;QACzB,SAAS,EAAE,GAAG,CAAC,UAAU;KAC1B,CAAC,CAAC,CAAC;IAEJ,WAAW;IACX,IAAI,UAAU,GAAG,2CAA2C,CAAC;IAC7D,MAAM,WAAW,GAAU,EAAE,CAAC;IAC9B,IAAI,eAAe,GAAG,CAAC,CAAC;IAExB,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC;QAClB,UAAU,IAAI,oBAAoB,eAAe,EAAE,EAAE,CAAC;QACtD,WAAW,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC;IACzC,CAAC;IAED,IAAI,OAAO,CAAC,IAAI,EAAE,CAAC;QACjB,UAAU,IAAI,gBAAgB,eAAe,EAAE,EAAE,CAAC;QAClD,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAED,IAAI,OAAO,CAAC,QAAQ,KAAK,SAAS,EAAE,CAAC;QACnC,UAAU,IAAI,qBAAqB,eAAe,EAAE,EAAE,CAAC;QACvD,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;IAED,MAAM,WAAW,GAAG,MAAM,QAAQ,CAAC,KAAK,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;IAClE,MAAM,KAAK,GAAG,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;IAElD,MAAM,OAAO,GAAG,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC;IAC7D,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC;AACnC,CAAC;AAED,wDAAwD;AACxD,iBAAiB;AACjB,wDAAwD;AAEjD,KAAK,UAAU,YAAY,CAAC,MAAc,EAAE,WAA0B;IAC3E,MAAM,QAAQ,GAAG,IAAA,sBAAW,GAAE,CAAC;IAC/B,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;IACpD,CAAC;IAED,IAAI,CAAC;QACH,MAAM,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAE9B,iBAAiB;QACjB,IAAI,YAAY,GAAG,CAAC,CAAC;QACrB,IAAI,WAAW,KAAK,IAAI,EAAE,CAAC;YACzB,MAAM,aAAa,GAAG,MAAM,QAAQ,CAAC,KAAK,CACxC,sFAAsF,EACtF,CAAC,WAAW,CAAC,CACd,CAAC;YACF,YAAY,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC;QACpD,CAAC;QAED,QAAQ;QACR,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,KAAK,CACjC,iFAAiF,EACjF,CAAC,WAAW,EAAE,YAAY,EAAE,MAAM,CAAC,CACpC,CAAC;QAEF,MAAM,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAE/B,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC7B,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC3B,OAAO;YACL,EAAE,EAAE,GAAG,CAAC,EAAE;YACV,IAAI,EAAE,GAAG,CAAC,IAAI;YACd,IAAI,EAAE,GAAG,CAAC,IAAI;YACd,QAAQ,EAAE,GAAG,CAAC,SAAS;YACvB,SAAS,EAAE,GAAG,CAAC,UAAU;YACzB,SAAS,EAAE,GAAG,CAAC,UAAU;YACzB,SAAS,EAAE,GAAG,CAAC,UAAU;YACzB,SAAS,EAAE,GAAG,CAAC,UAAU;SAC1B,CAAC;IACJ,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QACjC,MAAM,KAAK,CAAC;IACd,CAAC;AACH,CAAC;AAEM,KAAK,UAAU,eAAe,CAAC,MAAc,EAAE,YAAoB,EAAE,QAA4B;IACtG,MAAM,QAAQ,GAAG,IAAA,sBAAW,GAAE,CAAC;IAC/B,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;IACpD,CAAC;IAED,IAAI,CAAC;QACH,MAAM,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAE9B,qBAAqB;QACrB,MAAM,WAAW,GAAG,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC;QAClD,MAAM,UAAU,GAAG,MAAM,eAAe,CAAC,YAAY,CAAC,CAAC;QAEvD,IAAI,CAAC,WAAW,IAAI,CAAC,UAAU,EAAE,CAAC;YAChC,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;QACpC,CAAC;QAED,yBAAyB;QACzB,IAAI,WAAW,CAAC,QAAQ,KAAK,UAAU,CAAC,QAAQ,EAAE,CAAC;YACjD,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;QACjD,CAAC;QAED,kBAAkB;QAClB,MAAM,eAAe,GAAG,UAAU,CAAC,SAAS,IAAI,CAAC,CAAC;QAElD,YAAY;QACZ,IAAI,YAAoB,CAAC;QACzB,IAAI,QAAQ,KAAK,QAAQ,EAAE,CAAC;YAC1B,YAAY,GAAG,eAAe,CAAC;YAC/B,6BAA6B;YAC7B,MAAM,QAAQ,CAAC,KAAK,CAClB,6FAA6F,EAC7F,CAAC,UAAU,CAAC,QAAQ,EAAE,eAAe,CAAC,CACvC,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,YAAY,GAAG,eAAe,GAAG,CAAC,CAAC;YACnC,0BAA0B;YAC1B,MAAM,QAAQ,CAAC,KAAK,CAClB,4FAA4F,EAC5F,CAAC,UAAU,CAAC,QAAQ,EAAE,eAAe,CAAC,CACvC,CAAC;QACJ,CAAC;QAED,mBAAmB;QACnB,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,KAAK,CACjC,iEAAiE,EACjE,CAAC,YAAY,EAAE,MAAM,CAAC,CACvB,CAAC;QAEF,MAAM,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAE/B,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC7B,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC3B,OAAO;YACL,EAAE,EAAE,GAAG,CAAC,EAAE;YACV,IAAI,EAAE,GAAG,CAAC,IAAI;YACd,IAAI,EAAE,GAAG,CAAC,IAAI;YACd,QAAQ,EAAE,GAAG,CAAC,SAAS;YACvB,SAAS,EAAE,GAAG,CAAC,UAAU;YACzB,SAAS,EAAE,GAAG,CAAC,UAAU;YACzB,SAAS,EAAE,GAAG,CAAC,UAAU;YACzB,SAAS,EAAE,GAAG,CAAC,UAAU;SAC1B,CAAC;IACJ,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QACjC,MAAM,KAAK,CAAC;IACd,CAAC;AACH,CAAC;AAED,wDAAwD;AACxD,YAAY;AACZ,wDAAwD;AAEjD,KAAK,UAAU,sBAAsB,CAAC,MAAc,EAAE,WAAmB;IAC9E,MAAM,QAAQ,GAAG,IAAA,sBAAW,GAAE,CAAC;IAC/B,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;IACpD,CAAC;IAED,qBAAqB;IACrB,IAAI,MAAM,KAAK,WAAW,EAAE,CAAC;QAC3B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,yBAAyB;IACzB,MAAM,OAAO,GAAG,IAAI,GAAG,EAAU,CAAC;IAClC,IAAI,SAAS,GAAG,WAAW,CAAC;IAE5B,OAAO,SAAS,KAAK,IAAI,EAAE,CAAC;QAC1B,uBAAuB;QACvB,IAAI,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC;YAC3B,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAEvB,6BAA6B;QAC7B,IAAI,SAAS,KAAK,MAAM,EAAE,CAAC;YACzB,OAAO,IAAI,CAAC;QACd,CAAC;QAED,WAAW;QACX,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,KAAK,CAAC,gDAAgD,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;QACnG,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC;QAE3C,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,MAAM,CAAC,SAAS;QAClB,CAAC;QAED,SAAS,GAAG,QAAQ,CAAC;IACvB,CAAC;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAED,wDAAwD;AACxD,aAAa;AACb,wDAAwD;AAEjD,KAAK,UAAU,kBAAkB,CAAC,OAOxC;IACC,MAAM,QAAQ,GAAG,IAAA,sBAAW,GAAE,CAAC;IAC/B,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;IACpD,CAAC;IAED,MAAM,QAAQ,CAAC,KAAK,CAClB,sJAAsJ,EACtJ,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,WAAW,EAAE,OAAO,CAAC,WAAW,EAAE,OAAO,CAAC,YAAY,EAAE,OAAO,CAAC,YAAY,EAAE,OAAO,CAAC,OAAO,CAAC,CACxH,CAAC;AACJ,CAAC","names":[],"sources":["/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/src/main/app/domains/tree/repositories/treeRepository.ts"],"sourcesContent":["import { getPgClient } from '../../../infrastructure/database/pgClient';\nimport { TreeNode, CreateTreeNodeRequest, UpdateTreeNodeRequest, TreeSearchRequest, TreeSearchResult } from '../types';\n\n// =====================================================\n// 기본 CRUD 함수\n// =====================================================\n\nexport async function createTreeNode(request: CreateTreeNodeRequest): Promise<TreeNode> {\n  const pgClient = getPgClient();\n  if (!pgClient) {\n    throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n  }\n\n  // 새 노드의 sort_order 계산\n  let sortOrder = 0;\n  if (request.parentId !== null && request.parentId !== undefined) {\n    const siblings = await pgClient.query(\n      'SELECT sort_order FROM tree_nodes WHERE parent_id = $1 ORDER BY sort_order DESC LIMIT 1',\n      [request.parentId]\n    );\n    if (siblings.rows.length > 0) {\n      sortOrder = siblings.rows[0].sort_order + 1;\n    }\n  }\n\n  const result = await pgClient.query(\n    'INSERT INTO tree_nodes (name, type, parent_id, sort_order, created_by) VALUES ($1, $2, $3, $4, $5) RETURNING *',\n    [request.name, request.type, request.parentId, sortOrder, request.createdBy]\n  );\n\n  const row = result.rows[0];\n  return {\n    id: row.id,\n    name: row.name,\n    type: row.type,\n    parentId: row.parent_id,\n    sortOrder: row.sort_order,\n    createdAt: row.created_at,\n    updatedAt: row.updated_at,\n    createdBy: row.created_by\n  };\n}\n\nexport async function getTreeNodeById(id: number): Promise<TreeNode | null> {\n  const pgClient = getPgClient();\n  if (!pgClient) {\n    throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n  }\n\n  const result = await pgClient.query('SELECT * FROM tree_nodes WHERE id = $1', [id]);\n  \n  if (result.rows.length === 0) {\n    return null;\n  }\n\n  const row = result.rows[0];\n  return {\n    id: row.id,\n    name: row.name,\n    type: row.type,\n    parentId: row.parent_id,\n    sortOrder: row.sort_order,\n    createdAt: row.created_at,\n    updatedAt: row.updated_at,\n    createdBy: row.created_by\n  };\n}\n\nexport async function getAllTreeNodes(): Promise<TreeNode[]> {\n  const pgClient = getPgClient();\n  if (!pgClient) {\n    throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n  }\n\n  const result = await pgClient.query('SELECT * FROM tree_nodes ORDER BY sort_order, name');\n  \n  const nodes = result.rows.map((row: any) => ({\n    id: row.id,\n    name: row.name,\n    type: row.type,\n    parentId: row.parent_id,\n    sortOrder: row.sort_order,\n    createdAt: row.created_at,\n    updatedAt: row.updated_at,\n    createdBy: row.created_by\n  }));\n\n  // 폴더 타입인 경우에만 테스트케이스 개수 계산\n  for (const node of nodes) {\n    if (node.type === 'folder') {\n      // 해당 폴더의 직접적인 테스트케이스만 계산\n      const testCaseCountResult = await pgClient.query(`\n        SELECT \n          (SELECT COUNT(*) FROM tree_nodes WHERE type = 'testcase' AND parent_id = $1) +\n          (SELECT COUNT(*) FROM testcases WHERE folder_id = $1) as count\n      `, [node.id]);\n      \n      (node as any).testCaseCount = parseInt(testCaseCountResult.rows[0]?.count || '0');\n    }\n  }\n\n  return nodes;\n}\n\nexport async function getTreeStructure(): Promise<TreeNode[]> {\n  const pgClient = getPgClient();\n  if (!pgClient) {\n    throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n  }\n\n  // 모든 노드 조회\n  const allNodes = await getAllTreeNodes();\n  \n  // 테스트케이스 수 계산\n  const testCaseCounts = await pgClient.query(`\n    SELECT parent_id, COUNT(*) as count \n    FROM tree_nodes \n    WHERE type = 'testcase' \n    GROUP BY parent_id\n  `);\n  \n  const countMap = new Map<number, number>();\n  testCaseCounts.rows.forEach((row: any) => {\n    countMap.set(row.parent_id, parseInt(row.count));\n  });\n\n  // 트리 구조 생성\n  const nodeMap = new Map<number, TreeNode>();\n  const rootNodes: TreeNode[] = [];\n\n  // 먼저 모든 노드를 맵에 추가\n  allNodes.forEach(node => {\n    const treeNode: TreeNode = {\n      ...node,\n      children: [],\n      testCaseCount: countMap.get(node.id) || 0\n    };\n    nodeMap.set(node.id, treeNode);\n  });\n\n  // 부모-자식 관계 구성\n  allNodes.forEach(node => {\n    const treeNode = nodeMap.get(node.id)!;\n    \n    if (node.parentId && node.parentId !== null) {\n      const parent = nodeMap.get(node.parentId);\n      if (parent) {\n        parent.children!.push(treeNode);\n      } else {\n        rootNodes.push(treeNode);\n      }\n    } else {\n      rootNodes.push(treeNode);\n    }\n  });\n\n  return rootNodes;\n}\n\nexport async function updateTreeNode(id: number, updates: UpdateTreeNodeRequest): Promise<TreeNode | null> {\n  const pgClient = getPgClient();\n  if (!pgClient) {\n    throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n  }\n\n  const setClauses: string[] = [];\n  const values: any[] = [];\n  let paramIndex = 1;\n\n  if (updates.name !== undefined) {\n    setClauses.push(`name = $${paramIndex++}`);\n    values.push(updates.name);\n  }\n\n  if (updates.parentId !== undefined) {\n    setClauses.push(`parent_id = $${paramIndex++}`);\n    values.push(updates.parentId);\n  }\n\n  if (updates.sortOrder !== undefined) {\n    setClauses.push(`sort_order = $${paramIndex++}`);\n    values.push(updates.sortOrder);\n  }\n\n  if (setClauses.length === 0) {\n    return getTreeNodeById(id);\n  }\n\n  values.push(id);\n  const query = `UPDATE tree_nodes SET ${setClauses.join(', ')} WHERE id = $${paramIndex} RETURNING *`;\n  \n  const result = await pgClient.query(query, values);\n  \n  if (result.rows.length === 0) {\n    return null;\n  }\n\n  const row = result.rows[0];\n  return {\n    id: row.id,\n    name: row.name,\n    type: row.type,\n    parentId: row.parent_id,\n    sortOrder: row.sort_order,\n    createdAt: row.created_at,\n    updatedAt: row.updated_at,\n    createdBy: row.created_by\n  };\n}\n\nexport async function deleteTreeNode(id: number): Promise<boolean> {\n  const pgClient = getPgClient();\n  if (!pgClient) {\n    throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n  }\n\n  const result = await pgClient.query('DELETE FROM tree_nodes WHERE id = $1 RETURNING id', [id]);\n  return result.rows.length > 0;\n}\n\n// =====================================================\n// 검색 함수\n// =====================================================\n\nexport async function searchTreeNodes(request: TreeSearchRequest): Promise<TreeSearchResult> {\n  const pgClient = getPgClient();\n  if (!pgClient) {\n    throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n  }\n\n  let query = 'SELECT * FROM tree_nodes WHERE 1=1';\n  const values: any[] = [];\n  let paramIndex = 1;\n\n  if (request.query) {\n    query += ` AND name ILIKE $${paramIndex++}`;\n    values.push(`%${request.query}%`);\n  }\n\n  if (request.type) {\n    query += ` AND type = $${paramIndex++}`;\n    values.push(request.type);\n  }\n\n  if (request.parentId !== undefined) {\n    query += ` AND parent_id = $${paramIndex++}`;\n    values.push(request.parentId);\n  }\n\n  query += ' ORDER BY sort_order, name';\n\n  if (request.limit) {\n    query += ` LIMIT $${paramIndex++}`;\n    values.push(request.limit);\n  }\n\n  if (request.offset) {\n    query += ` OFFSET $${paramIndex++}`;\n    values.push(request.offset);\n  }\n\n  const result = await pgClient.query(query, values);\n  \n  const nodes = result.rows.map((row: any) => ({\n    id: row.id,\n    name: row.name,\n    type: row.type,\n    parentId: row.parent_id,\n    sortOrder: row.sort_order,\n    createdAt: row.created_at,\n    updatedAt: row.updated_at,\n    createdBy: row.created_by\n  }));\n\n  // 전체 개수 조회\n  let countQuery = 'SELECT COUNT(*) FROM tree_nodes WHERE 1=1';\n  const countValues: any[] = [];\n  let countParamIndex = 1;\n\n  if (request.query) {\n    countQuery += ` AND name ILIKE $${countParamIndex++}`;\n    countValues.push(`%${request.query}%`);\n  }\n\n  if (request.type) {\n    countQuery += ` AND type = $${countParamIndex++}`;\n    countValues.push(request.type);\n  }\n\n  if (request.parentId !== undefined) {\n    countQuery += ` AND parent_id = $${countParamIndex++}`;\n    countValues.push(request.parentId);\n  }\n\n  const countResult = await pgClient.query(countQuery, countValues);\n  const total = parseInt(countResult.rows[0].count);\n\n  const hasMore = (request.offset || 0) + nodes.length < total;\n  return { nodes, total, hasMore };\n}\n\n// =====================================================\n// 드래그 앤 드롭 관련 함수\n// =====================================================\n\nexport async function moveTreeNode(nodeId: number, newParentId: number | null): Promise<TreeNode | null> {\n  const pgClient = getPgClient();\n  if (!pgClient) {\n    throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n  }\n\n  try {\n    await pgClient.query('BEGIN');\n\n    // 새 부모의 최대 순서 조회\n    let newSortOrder = 0;\n    if (newParentId !== null) {\n      const maxSortResult = await pgClient.query(\n        'SELECT COALESCE(MAX(sort_order), 0) as max_sort FROM tree_nodes WHERE parent_id = $1',\n        [newParentId]\n      );\n      newSortOrder = maxSortResult.rows[0].max_sort + 1;\n    }\n\n    // 노드 이동\n    const result = await pgClient.query(\n      'UPDATE tree_nodes SET parent_id = $1, sort_order = $2 WHERE id = $3 RETURNING *',\n      [newParentId, newSortOrder, nodeId]\n    );\n\n    await pgClient.query('COMMIT');\n    \n    if (result.rows.length === 0) {\n      return null;\n    }\n\n    const row = result.rows[0];\n    return {\n      id: row.id,\n      name: row.name,\n      type: row.type,\n      parentId: row.parent_id,\n      sortOrder: row.sort_order,\n      createdAt: row.created_at,\n      updatedAt: row.updated_at,\n      createdBy: row.created_by\n    };\n  } catch (error) {\n    await pgClient.query('ROLLBACK');\n    throw error;\n  }\n}\n\nexport async function reorderTreeNode(nodeId: number, targetNodeId: number, position: 'before' | 'after'): Promise<TreeNode | null> {\n  const pgClient = getPgClient();\n  if (!pgClient) {\n    throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n  }\n\n  try {\n    await pgClient.query('BEGIN');\n\n    // 현재 노드와 대상 노드 정보 조회\n    const draggedNode = await getTreeNodeById(nodeId);\n    const targetNode = await getTreeNodeById(targetNodeId);\n\n    if (!draggedNode || !targetNode) {\n      throw new Error('노드를 찾을 수 없습니다.');\n    }\n\n    // 같은 부모 노드 내에서만 순서 변경 가능\n    if (draggedNode.parentId !== targetNode.parentId) {\n      throw new Error('같은 부모 노드 내에서만 순서 변경이 가능합니다.');\n    }\n\n    // 대상 노드의 현재 순서 조회\n    const targetSortOrder = targetNode.sortOrder || 0;\n\n    // 새로운 순서 계산\n    let newSortOrder: number;\n    if (position === 'before') {\n      newSortOrder = targetSortOrder;\n      // 대상 노드와 그 이후 노드들의 순서를 1씩 증가\n      await pgClient.query(\n        'UPDATE tree_nodes SET sort_order = sort_order + 1 WHERE parent_id = $1 AND sort_order >= $2',\n        [targetNode.parentId, targetSortOrder]\n      );\n    } else {\n      newSortOrder = targetSortOrder + 1;\n      // 대상 노드 이후 노드들의 순서를 1씩 증가\n      await pgClient.query(\n        'UPDATE tree_nodes SET sort_order = sort_order + 1 WHERE parent_id = $1 AND sort_order > $2',\n        [targetNode.parentId, targetSortOrder]\n      );\n    }\n\n    // 드래그한 노드의 순서 업데이트\n    const result = await pgClient.query(\n      'UPDATE tree_nodes SET sort_order = $1 WHERE id = $2 RETURNING *',\n      [newSortOrder, nodeId]\n    );\n\n    await pgClient.query('COMMIT');\n    \n    if (result.rows.length === 0) {\n      return null;\n    }\n\n    const row = result.rows[0];\n    return {\n      id: row.id,\n      name: row.name,\n      type: row.type,\n      parentId: row.parent_id,\n      sortOrder: row.sort_order,\n      createdAt: row.created_at,\n      updatedAt: row.updated_at,\n      createdBy: row.created_by\n    };\n  } catch (error) {\n    await pgClient.query('ROLLBACK');\n    throw error;\n  }\n}\n\n// =====================================================\n// 유효성 검사 함수\n// =====================================================\n\nexport async function checkCircularReference(nodeId: number, newParentId: number): Promise<boolean> {\n  const pgClient = getPgClient();\n  if (!pgClient) {\n    throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n  }\n\n  // 자기 자신을 부모로 설정하는 경우\n  if (nodeId === newParentId) {\n    return true;\n  }\n\n  // 반복문으로 순환 참조 검사 (재귀 대신)\n  const visited = new Set<number>();\n  let currentId = newParentId;\n\n  while (currentId !== null) {\n    // 이미 방문한 ID가 있다면 순환 참조\n    if (visited.has(currentId)) {\n      return true;\n    }\n\n    visited.add(currentId);\n\n    // 현재 ID가 이동하려는 노드와 같다면 순환 참조\n    if (currentId === nodeId) {\n      return true;\n    }\n\n    // 부모 ID 조회\n    const result = await pgClient.query('SELECT parent_id FROM tree_nodes WHERE id = $1', [currentId]);\n    const parentId = result.rows[0]?.parent_id;\n\n    if (!parentId) {\n      break; // 루트에 도달\n    }\n\n    currentId = parentId;\n  }\n\n  return false;\n}\n\n// =====================================================\n// 히스토리 관련 함수\n// =====================================================\n\nexport async function recordTreeNodeMove(history: {\n  nodeId: number;\n  oldParentId: number | null;\n  newParentId: number | null;\n  oldSortOrder: number;\n  newSortOrder: number;\n  movedBy: string;\n}): Promise<void> {\n  const pgClient = getPgClient();\n  if (!pgClient) {\n    throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n  }\n\n  await pgClient.query(\n    'INSERT INTO tree_node_move_history (node_id, old_parent_id, new_parent_id, old_sort_order, new_sort_order, moved_by) VALUES ($1, $2, $3, $4, $5, $6)',\n    [history.nodeId, history.oldParentId, history.newParentId, history.oldSortOrder, history.newSortOrder, history.movedBy]\n  );\n} "],"version":3}