{"file":"/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/tests/auth.test.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/tests/auth.test.ts"],"sourcesContent":["import request from 'supertest';\nimport app from '../src/main/app/app';\nimport pgClient, { ensurePgConnected } from '../src/main/app/infrastructure/database/pgClient';\n\ndescribe('인증/권한 API', () => {\n  beforeAll(async () => {\n    await ensurePgConnected();\n    if (pgClient) {\n      await pgClient.query('DELETE FROM users'); // 테스트 격리\n    }\n  });\n\n  const user = { username: 'testuser', password: 'testpass123', role: 'QA' };\n  let token: string;\n\n  it('회원가입 성공', async () => {\n    const res = await request(app).post('/api/auth/register').send(user);\n    expect(res.status).toBe(201);\n    expect(res.body.username).toBe(user.username);\n    expect(res.body.role).toBe(user.role);\n  });\n\n  it('중복 회원가입 실패', async () => {\n    const res = await request(app).post('/api/auth/register').send(user);\n    expect(res.status).toBe(409);\n  });\n\n  it('로그인 성공 및 JWT 반환', async () => {\n    const res = await request(app).post('/api/auth/login').send({ username: user.username, password: user.password });\n    expect(res.status).toBe(200);\n    expect(res.body.token).toBeDefined();\n    token = res.body.token;\n  });\n\n  it('잘못된 비밀번호 로그인 실패', async () => {\n    const res = await request(app).post('/api/auth/login').send({ username: user.username, password: 'wrongpass' });\n    expect(res.status).toBe(401);\n  });\n\n  // RBAC 미들웨어 테스트용 protected 엔드포인트 예시\n  it('권한 미들웨어: QA만 접근 허용', async () => {\n    // 임시 라우트 추가 필요 (app에 직접 추가)\n    app.get('/api/protected-qa', (req, res, next) => {\n      (req as any).user = { ...user, role: 'QA' }; // 테스트용 강제 주입\n      next();\n    }, require('../src/main/app/domains/users/middleware/rbacMiddleware').requireRole(['QA']), (req, res) => {\n      res.json({ ok: true });\n    });\n    const res = await request(app).get('/api/protected-qa');\n    expect(res.status).toBe(200);\n    expect(res.body.ok).toBe(true);\n  });\n\n  afterAll(async () => {\n    if (pgClient) {\n      await pgClient.query('DELETE FROM users');\n      await pgClient.end();\n    }\n  });\n}); "],"version":3}