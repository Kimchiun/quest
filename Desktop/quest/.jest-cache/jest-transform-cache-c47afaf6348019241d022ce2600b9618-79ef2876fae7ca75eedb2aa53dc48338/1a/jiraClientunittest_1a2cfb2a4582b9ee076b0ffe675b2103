e221034d77d6ac9c3d6806b9cd7d9114
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock axios
jest.mock('axios');
const axios_1 = __importDefault(require("axios"));
const jiraClient_1 = require("../src/main/app/infrastructure/integrations/jiraClient");
const mockedAxios = axios_1.default;
describe('jiraClient (unit)', () => {
    const JIRA_URL = 'http://jira.local';
    const API_PATH = '/rest/api/2/issue';
    const BASE_PARAMS = {
        summary: 'Bug summary',
        description: 'desc',
        projectKey: 'TEST',
        jiraUrl: JIRA_URL,
        username: 'user',
        apiToken: 'token',
    };
    beforeEach(() => {
        jest.clearAllMocks();
    });
    it('should create a Jira issue', async () => {
        mockedAxios.post.mockResolvedValueOnce({
            status: 201,
            data: { key: 'TEST-123' }
        });
        const result = await (0, jiraClient_1.createJiraIssue)(BASE_PARAMS);
        expect(result.key).toBe('TEST-123');
        expect(result.url).toContain('TEST-123');
    });
    it('should handle Jira API error', async () => {
        mockedAxios.post.mockRejectedValueOnce(new Error('Invalid project'));
        await expect((0, jiraClient_1.createJiraIssue)(BASE_PARAMS)).rejects.toThrow(/Invalid project/);
    });
    it('should handle Jira API timeout', async () => {
        mockedAxios.post.mockRejectedValueOnce(new Error('timeout'));
        await expect((0, jiraClient_1.createJiraIssue)({ ...BASE_PARAMS, timeoutMs: 100 })).rejects.toThrow(/timeout/);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0RvY3VtZW50cy9xdWVzdC9EZXNrdG9wL3F1ZXN0L3Rlc3RzL2ppcmFDbGllbnQudW5pdC50ZXN0LnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBR0EsYUFBYTtBQUNiLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFKbkIsa0RBQTBCO0FBQzFCLHVGQUF5RjtBQUl6RixNQUFNLFdBQVcsR0FBRyxlQUFrQyxDQUFDO0FBRXZELFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7SUFDakMsTUFBTSxRQUFRLEdBQUcsbUJBQW1CLENBQUM7SUFDckMsTUFBTSxRQUFRLEdBQUcsbUJBQW1CLENBQUM7SUFDckMsTUFBTSxXQUFXLEdBQUc7UUFDbEIsT0FBTyxFQUFFLGFBQWE7UUFDdEIsV0FBVyxFQUFFLE1BQU07UUFDbkIsVUFBVSxFQUFFLE1BQU07UUFDbEIsT0FBTyxFQUFFLFFBQVE7UUFDakIsUUFBUSxFQUFFLE1BQU07UUFDaEIsUUFBUSxFQUFFLE9BQU87S0FDbEIsQ0FBQztJQUVGLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsNEJBQTRCLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDMUMsV0FBVyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQztZQUNyQyxNQUFNLEVBQUUsR0FBRztZQUNYLElBQUksRUFBRSxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUU7U0FDMUIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFBLDRCQUFlLEVBQUMsV0FBVyxDQUFDLENBQUM7UUFDbEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDM0MsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsOEJBQThCLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDNUMsV0FBVyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7UUFFckUsTUFBTSxNQUFNLENBQUMsSUFBQSw0QkFBZSxFQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ2hGLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGdDQUFnQyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzlDLFdBQVcsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUU3RCxNQUFNLE1BQU0sQ0FBQyxJQUFBLDRCQUFlLEVBQUMsRUFBRSxHQUFHLFdBQVcsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDL0YsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvM2ktYTEtMjAyMS0wMTcvRG9jdW1lbnRzL3F1ZXN0L0Rlc2t0b3AvcXVlc3QvdGVzdHMvamlyYUNsaWVudC51bml0LnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCB7IGNyZWF0ZUppcmFJc3N1ZSB9IGZyb20gJy4uL3NyYy9tYWluL2FwcC9pbmZyYXN0cnVjdHVyZS9pbnRlZ3JhdGlvbnMvamlyYUNsaWVudCc7XG5cbi8vIE1vY2sgYXhpb3Ncbmplc3QubW9jaygnYXhpb3MnKTtcbmNvbnN0IG1vY2tlZEF4aW9zID0gYXhpb3MgYXMgamVzdC5Nb2NrZWQ8dHlwZW9mIGF4aW9zPjtcblxuZGVzY3JpYmUoJ2ppcmFDbGllbnQgKHVuaXQpJywgKCkgPT4ge1xuICBjb25zdCBKSVJBX1VSTCA9ICdodHRwOi8vamlyYS5sb2NhbCc7XG4gIGNvbnN0IEFQSV9QQVRIID0gJy9yZXN0L2FwaS8yL2lzc3VlJztcbiAgY29uc3QgQkFTRV9QQVJBTVMgPSB7XG4gICAgc3VtbWFyeTogJ0J1ZyBzdW1tYXJ5JyxcbiAgICBkZXNjcmlwdGlvbjogJ2Rlc2MnLFxuICAgIHByb2plY3RLZXk6ICdURVNUJyxcbiAgICBqaXJhVXJsOiBKSVJBX1VSTCxcbiAgICB1c2VybmFtZTogJ3VzZXInLFxuICAgIGFwaVRva2VuOiAndG9rZW4nLFxuICB9O1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGNyZWF0ZSBhIEppcmEgaXNzdWUnLCBhc3luYyAoKSA9PiB7XG4gICAgbW9ja2VkQXhpb3MucG9zdC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoeyBcbiAgICAgIHN0YXR1czogMjAxLCBcbiAgICAgIGRhdGE6IHsga2V5OiAnVEVTVC0xMjMnIH0gXG4gICAgfSk7XG4gICAgXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY3JlYXRlSmlyYUlzc3VlKEJBU0VfUEFSQU1TKTtcbiAgICBleHBlY3QocmVzdWx0LmtleSkudG9CZSgnVEVTVC0xMjMnKTtcbiAgICBleHBlY3QocmVzdWx0LnVybCkudG9Db250YWluKCdURVNULTEyMycpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGhhbmRsZSBKaXJhIEFQSSBlcnJvcicsIGFzeW5jICgpID0+IHtcbiAgICBtb2NrZWRBeGlvcy5wb3N0Lm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoJ0ludmFsaWQgcHJvamVjdCcpKTtcbiAgICBcbiAgICBhd2FpdCBleHBlY3QoY3JlYXRlSmlyYUlzc3VlKEJBU0VfUEFSQU1TKSkucmVqZWN0cy50b1Rocm93KC9JbnZhbGlkIHByb2plY3QvKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBoYW5kbGUgSmlyYSBBUEkgdGltZW91dCcsIGFzeW5jICgpID0+IHtcbiAgICBtb2NrZWRBeGlvcy5wb3N0Lm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoJ3RpbWVvdXQnKSk7XG4gICAgXG4gICAgYXdhaXQgZXhwZWN0KGNyZWF0ZUppcmFJc3N1ZSh7IC4uLkJBU0VfUEFSQU1TLCB0aW1lb3V0TXM6IDEwMCB9KSkucmVqZWN0cy50b1Rocm93KC90aW1lb3V0Lyk7XG4gIH0pO1xufSk7ICJdLCJ2ZXJzaW9uIjozfQ==