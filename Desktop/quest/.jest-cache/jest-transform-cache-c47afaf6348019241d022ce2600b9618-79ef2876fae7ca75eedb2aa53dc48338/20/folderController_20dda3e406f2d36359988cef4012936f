3d4beda35c26193bf80549da8af71072
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFolder = createFolder;
exports.getFolderById = getFolderById;
exports.updateFolder = updateFolder;
exports.moveFolder = moveFolder;
exports.deleteFolder = deleteFolder;
exports.getFolderTree = getFolderTree;
exports.listFoldersByProject = listFoldersByProject;
exports.moveFolderBatch = moveFolderBatch;
const folderService = __importStar(require("../services/folderService"));
/**
 * @swagger
 * components:
 *   schemas:
 *     Folder:
 *       type: object
 *       properties:
 *         id:
 *           type: integer
 *           description: 폴더 ID
 *         name:
 *           type: string
 *           description: 폴더 이름
 *         description:
 *           type: string
 *           description: 폴더 설명
 *         parentId:
 *           type: integer
 *           nullable: true
 *           description: 부모 폴더 ID
 *         projectId:
 *           type: string
 *           description: 프로젝트 ID
 *         sortOrder:
 *           type: integer
 *           description: 정렬 순서
 *         createdBy:
 *           type: string
 *           description: 생성자
 *         createdAt:
 *           type: string
 *           format: date-time
 *           description: 생성일
 *         updatedAt:
 *           type: string
 *           format: date-time
 *           description: 수정일
 */
async function createFolder(req, res) {
    try {
        const data = req.body;
        const createdBy = 'system';
        const folder = await folderService.createFolder(data, createdBy);
        res.status(201).json(folder);
    }
    catch (error) {
        res.status(400).json({
            error: error.message,
            code: 'FOLDER_CREATE_ERROR'
        });
    }
}
async function getFolderById(req, res) {
    try {
        const id = parseInt(req.params.id);
        const folder = await folderService.getFolderById(id);
        if (!folder) {
            return res.status(404).json({
                error: '폴더를 찾을 수 없습니다.',
                code: 'FOLDER_NOT_FOUND'
            });
        }
        res.json(folder);
    }
    catch (error) {
        res.status(500).json({
            error: error.message,
            code: 'FOLDER_GET_ERROR'
        });
    }
}
async function updateFolder(req, res) {
    try {
        const id = parseInt(req.params.id);
        const data = req.body;
        const updatedBy = 'system';
        const folder = await folderService.updateFolder(id, data, updatedBy);
        if (!folder) {
            return res.status(404).json({
                error: '폴더를 찾을 수 없습니다.',
                code: 'FOLDER_NOT_FOUND'
            });
        }
        res.json(folder);
    }
    catch (error) {
        res.status(400).json({
            error: error.message,
            code: 'FOLDER_UPDATE_ERROR'
        });
    }
}
async function moveFolder(req, res) {
    try {
        const id = parseInt(req.params.id);
        const data = req.body;
        const movedBy = 'system';
        const folder = await folderService.moveFolder(id, data, movedBy);
        if (!folder) {
            return res.status(404).json({
                error: '폴더를 찾을 수 없습니다.',
                code: 'FOLDER_NOT_FOUND'
            });
        }
        res.json(folder);
    }
    catch (error) {
        res.status(400).json({
            error: error.message,
            code: 'FOLDER_MOVE_ERROR'
        });
    }
}
async function deleteFolder(req, res) {
    try {
        const id = parseInt(req.params.id);
        const mode = req.query.mode || 'soft';
        const deletedBy = 'system';
        const success = await folderService.deleteFolder(id, mode, deletedBy);
        if (!success) {
            return res.status(404).json({
                error: '폴더를 찾을 수 없습니다.',
                code: 'FOLDER_NOT_FOUND'
            });
        }
        res.json({ success: true });
    }
    catch (error) {
        res.status(400).json({
            error: error.message,
            code: 'FOLDER_DELETE_ERROR'
        });
    }
}
async function getFolderTree(req, res) {
    try {
        const projectId = parseInt(req.query.projectId) || 1;
        const depth = req.query.depth ? parseInt(req.query.depth) : undefined;
        const tree = await folderService.getFolderTree(projectId, depth);
        res.json(tree);
    }
    catch (error) {
        res.status(500).json({
            error: error.message,
            code: 'FOLDER_TREE_ERROR'
        });
    }
}
async function listFoldersByProject(req, res) {
    try {
        const projectId = parseInt(req.params.projectId);
        const folders = await folderService.listFoldersByProject(projectId);
        res.json(folders);
    }
    catch (error) {
        res.status(500).json({
            error: error.message,
            code: 'FOLDER_LIST_ERROR'
        });
    }
}
async function moveFolderBatch(req, res) {
    try {
        const { items, idempotencyKey, clientVersion } = req.body;
        if (!items || !Array.isArray(items) || items.length === 0) {
            return res.status(400).json({
                error: '이동할 항목이 필요합니다.',
                code: 'INVALID_MOVE_ITEMS'
            });
        }
        const results = {
            success: [],
            failed: []
        };
        // 배치 이동 처리
        for (const item of items) {
            try {
                const folder = await folderService.moveFolder(parseInt(item.id), {
                    targetParentId: item.targetParentId,
                    dropType: item.dropType,
                    relativeToId: item.relativeToId,
                    orderIndex: item.orderIndex
                }, 'system');
                if (folder) {
                    results.success.push({ id: item.id, folder });
                }
                else {
                    results.failed.push({
                        id: item.id,
                        error: '폴더를 찾을 수 없습니다.',
                        reason: 'FOLDER_NOT_FOUND'
                    });
                }
            }
            catch (error) {
                let reason = 'UNKNOWN_ERROR';
                if (error.message.includes('순환'))
                    reason = 'CYCLIC_MOVE';
                else if (error.message.includes('권한'))
                    reason = 'PERMISSION_DENIED';
                else if (error.message.includes('이름'))
                    reason = 'NAME_CONFLICT';
                else if (error.message.includes('잠금'))
                    reason = 'LOCKED';
                else if (error.message.includes('아카이브'))
                    reason = 'ARCHIVED';
                results.failed.push({
                    id: item.id,
                    error: error.message,
                    reason
                });
            }
        }
        // 응답 헤더에 idempotency key 추가
        if (idempotencyKey) {
            res.setHeader('X-Idempotency-Key', idempotencyKey);
        }
        res.json({
            success: results.success,
            failed: results.failed,
            totalProcessed: items.length,
            successCount: results.success.length,
            failureCount: results.failed.length
        });
    }
    catch (error) {
        res.status(500).json({
            error: error.message,
            code: 'FOLDER_BATCH_MOVE_ERROR'
        });
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,