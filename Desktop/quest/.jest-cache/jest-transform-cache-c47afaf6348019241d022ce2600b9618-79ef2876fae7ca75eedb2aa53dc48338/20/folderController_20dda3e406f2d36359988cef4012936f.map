{"file":"/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/src/main/app/domains/folders/controllers/folderController.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/src/main/app/domains/folders/controllers/folderController.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport * as folderService from '../services/folderService';\nimport { FolderCreateRequest, FolderUpdateRequest, FolderMoveRequest } from '../models/Folder';\n\n/**\n * @swagger\n * components:\n *   schemas:\n *     Folder:\n *       type: object\n *       properties:\n *         id:\n *           type: integer\n *           description: 폴더 ID\n *         name:\n *           type: string\n *           description: 폴더 이름\n *         description:\n *           type: string\n *           description: 폴더 설명\n *         parentId:\n *           type: integer\n *           nullable: true\n *           description: 부모 폴더 ID\n *         projectId:\n *           type: string\n *           description: 프로젝트 ID\n *         sortOrder:\n *           type: integer\n *           description: 정렬 순서\n *         createdBy:\n *           type: string\n *           description: 생성자\n *         createdAt:\n *           type: string\n *           format: date-time\n *           description: 생성일\n *         updatedAt:\n *           type: string\n *           format: date-time\n *           description: 수정일\n */\n\nexport async function createFolder(req: Request, res: Response) {\n    try {\n        const data: FolderCreateRequest = req.body;\n        const createdBy = 'system';\n        \n        const folder = await folderService.createFolder(data, createdBy);\n        res.status(201).json(folder);\n    } catch (error: any) {\n        res.status(400).json({ \n            error: error.message,\n            code: 'FOLDER_CREATE_ERROR'\n        });\n    }\n}\n\nexport async function getFolderById(req: Request, res: Response) {\n    try {\n        const id = parseInt(req.params.id);\n        const folder = await folderService.getFolderById(id);\n        \n        if (!folder) {\n            return res.status(404).json({ \n                error: '폴더를 찾을 수 없습니다.',\n                code: 'FOLDER_NOT_FOUND'\n            });\n        }\n        \n        res.json(folder);\n    } catch (error: any) {\n        res.status(500).json({ \n            error: error.message,\n            code: 'FOLDER_GET_ERROR'\n        });\n    }\n}\n\nexport async function updateFolder(req: Request, res: Response) {\n    try {\n        const id = parseInt(req.params.id);\n        const data: FolderUpdateRequest = req.body;\n        const updatedBy = 'system';\n        \n        const folder = await folderService.updateFolder(id, data, updatedBy);\n        \n        if (!folder) {\n            return res.status(404).json({ \n                error: '폴더를 찾을 수 없습니다.',\n                code: 'FOLDER_NOT_FOUND'\n            });\n        }\n        \n        res.json(folder);\n    } catch (error: any) {\n        res.status(400).json({ \n            error: error.message,\n            code: 'FOLDER_UPDATE_ERROR'\n        });\n    }\n}\n\nexport async function moveFolder(req: Request, res: Response) {\n    try {\n        const id = parseInt(req.params.id);\n        const data: FolderMoveRequest = req.body;\n        const movedBy = 'system';\n        \n        const folder = await folderService.moveFolder(id, data, movedBy);\n        \n        if (!folder) {\n            return res.status(404).json({ \n                error: '폴더를 찾을 수 없습니다.',\n                code: 'FOLDER_NOT_FOUND'\n            });\n        }\n        \n        res.json(folder);\n    } catch (error: any) {\n        res.status(400).json({ \n            error: error.message,\n            code: 'FOLDER_MOVE_ERROR'\n        });\n    }\n}\n\nexport async function deleteFolder(req: Request, res: Response) {\n    try {\n        const id = parseInt(req.params.id);\n        const mode = (req.query.mode as 'soft' | 'hard') || 'soft';\n        const deletedBy = 'system';\n        \n        const success = await folderService.deleteFolder(id, mode, deletedBy);\n        \n        if (!success) {\n            return res.status(404).json({ \n                error: '폴더를 찾을 수 없습니다.',\n                code: 'FOLDER_NOT_FOUND'\n            });\n        }\n        \n        res.json({ success: true });\n    } catch (error: any) {\n        res.status(400).json({ \n            error: error.message,\n            code: 'FOLDER_DELETE_ERROR'\n        });\n    }\n}\n\nexport async function getFolderTree(req: Request, res: Response) {\n    try {\n        const projectId = parseInt(req.query.projectId as string) || 1;\n        const depth = req.query.depth ? parseInt(req.query.depth as string) : undefined;\n        \n        const tree = await folderService.getFolderTree(projectId, depth);\n        res.json(tree);\n    } catch (error: any) {\n        res.status(500).json({ \n            error: error.message,\n            code: 'FOLDER_TREE_ERROR'\n        });\n    }\n}\n\nexport async function listFoldersByProject(req: Request, res: Response) {\n    try {\n        const projectId = parseInt(req.params.projectId);\n        const folders = await folderService.listFoldersByProject(projectId);\n        res.json(folders);\n    } catch (error: any) {\n        res.status(500).json({ \n            error: error.message,\n            code: 'FOLDER_LIST_ERROR'\n        });\n    }\n} \n\nexport async function moveFolderBatch(req: Request, res: Response) {\n    try {\n        const { items, idempotencyKey, clientVersion } = req.body;\n        \n        if (!items || !Array.isArray(items) || items.length === 0) {\n            return res.status(400).json({ \n                error: '이동할 항목이 필요합니다.',\n                code: 'INVALID_MOVE_ITEMS'\n            });\n        }\n\n        const results = {\n            success: [] as Array<{ id: string; folder: any }>,\n            failed: [] as Array<{ id: string; error: string; reason: string }>\n        };\n\n        // 배치 이동 처리\n        for (const item of items) {\n            try {\n                const folder = await folderService.moveFolder(\n                    parseInt(item.id), \n                    {\n                        targetParentId: item.targetParentId,\n                        dropType: item.dropType,\n                        relativeToId: item.relativeToId,\n                        orderIndex: item.orderIndex\n                    }, \n                    'system'\n                );\n                \n                if (folder) {\n                    results.success.push({ id: item.id, folder });\n                } else {\n                    results.failed.push({ \n                        id: item.id, \n                        error: '폴더를 찾을 수 없습니다.',\n                        reason: 'FOLDER_NOT_FOUND'\n                    });\n                }\n            } catch (error: any) {\n                let reason = 'UNKNOWN_ERROR';\n                if (error.message.includes('순환')) reason = 'CYCLIC_MOVE';\n                else if (error.message.includes('권한')) reason = 'PERMISSION_DENIED';\n                else if (error.message.includes('이름')) reason = 'NAME_CONFLICT';\n                else if (error.message.includes('잠금')) reason = 'LOCKED';\n                else if (error.message.includes('아카이브')) reason = 'ARCHIVED';\n                \n                results.failed.push({ \n                    id: item.id, \n                    error: error.message,\n                    reason\n                });\n            }\n        }\n\n        // 응답 헤더에 idempotency key 추가\n        if (idempotencyKey) {\n            res.setHeader('X-Idempotency-Key', idempotencyKey);\n        }\n\n        res.json({\n            success: results.success,\n            failed: results.failed,\n            totalProcessed: items.length,\n            successCount: results.success.length,\n            failureCount: results.failed.length\n        });\n    } catch (error: any) {\n        res.status(500).json({ \n            error: error.message,\n            code: 'FOLDER_BATCH_MOVE_ERROR'\n        });\n    }\n} "],"version":3}