{"file":"/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/src/main/app/domains/testcases/controllers/testCaseController.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/src/main/app/domains/testcases/controllers/testCaseController.ts"],"sourcesContent":["import { Router } from 'express';\nimport * as testCaseService from '../services/testCaseService';\n\n/**\n * @swagger\n * components:\n *   schemas:\n *     TestCase:\n *       type: object\n *       properties:\n *         id:\n *           type: integer\n *           description: 테스트케이스 ID\n *         title:\n *           type: string\n *           description: 테스트케이스 제목\n *         description:\n *           type: string\n *           description: 테스트케이스 설명\n *         priority:\n *           type: string\n *           enum: [High, Medium, Low]\n *           description: 우선순위\n *         status:\n *           type: string\n *           enum: [Active, Inactive, Draft]\n *           description: 상태\n *         folderId:\n *           type: integer\n *           description: 폴더 ID\n *         createdBy:\n *           type: string\n *           description: 생성자\n *         createdAt:\n *           type: string\n *           format: date-time\n *           description: 생성일\n *         updatedAt:\n *           type: string\n *           format: date-time\n *           description: 수정일\n */\n\nconst router = Router();\n\n/**\n * @swagger\n * /api/testcases:\n *   get:\n *     summary: 테스트케이스 목록 조회\n *     description: 페이지네이션, 검색, 필터링을 지원하는 테스트케이스 목록을 조회합니다.\n *     tags: [Test Cases]\n *     parameters:\n *       - in: query\n *         name: page\n *         schema:\n *           type: integer\n *           default: 1\n *         description: 페이지 번호\n *       - in: query\n *         name: limit\n *         schema:\n *           type: integer\n *           default: 20\n *         description: 페이지당 항목 수\n *       - in: query\n *         name: search\n *         schema:\n *           type: string\n *         description: 검색어\n *       - in: query\n *         name: folderId\n *         schema:\n *           type: integer\n *         description: 폴더 ID로 필터링\n *     responses:\n *       200:\n *         description: 테스트케이스 목록 조회 성공\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/TestCase'\n *       500:\n *         description: 서버 오류\n */\n// 테스트케이스 목록 조회\nrouter.get('/', async (req, res) => {\n    try {\n        const { page = 1, limit = 20, search, folderId } = req.query;\n        const testCases = await testCaseService.getTestCases({\n            page: Number(page),\n            limit: Number(limit),\n            search: search as string,\n            folderId: folderId ? Number(folderId) : undefined\n        });\n        res.json(testCases);\n    } catch (error) {\n        console.error('테스트케이스 조회 실패:', error);\n        res.status(500).json({ message: '테스트케이스 조회에 실패했습니다.' });\n    }\n});\n\n/**\n * @swagger\n * /api/testcases/{id}:\n *   get:\n *     summary: 특정 테스트케이스 조회\n *     description: ID로 특정 테스트케이스를 조회합니다.\n *     tags: [Test Cases]\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: integer\n *         description: 테스트케이스 ID\n *     responses:\n *       200:\n *         description: 테스트케이스 조회 성공\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/TestCase'\n *       404:\n *         description: 테스트케이스를 찾을 수 없음\n *       500:\n *         description: 서버 오류\n */\n// 특정 테스트케이스 조회\nrouter.get('/:id', async (req, res) => {\n    try {\n        const id = parseInt(req.params.id);\n        const testCase = await testCaseService.getTestCaseById(id);\n        if (!testCase) {\n            return res.status(404).json({ message: '테스트케이스를 찾을 수 없습니다.' });\n        }\n        res.json(testCase);\n    } catch (error) {\n        console.error('테스트케이스 조회 실패:', error);\n        res.status(500).json({ message: '테스트케이스 조회에 실패했습니다.' });\n    }\n});\n\n/**\n * @swagger\n * /api/testcases:\n *   post:\n *     summary: 테스트케이스 생성\n *     description: 새로운 테스트케이스를 생성합니다.\n *     tags: [Test Cases]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - title\n *               - priority\n *               - status\n *             properties:\n *               title:\n *                 type: string\n *                 description: 테스트케이스 제목\n *               description:\n *                 type: string\n *                 description: 테스트케이스 설명\n *               priority:\n *                 type: string\n *                 enum: [High, Medium, Low]\n *                 description: 우선순위\n *               status:\n *                 type: string\n *                 enum: [Active, Inactive, Draft]\n *                 description: 상태\n *               folderId:\n *                 type: integer\n *                 description: 폴더 ID\n *     responses:\n *       201:\n *         description: 테스트케이스 생성 성공\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/TestCase'\n *       400:\n *         description: 잘못된 요청\n *       500:\n *         description: 서버 오류\n */\n// 테스트케이스 생성\nrouter.post('/', async (req, res) => {\n    try {\n        const testCase = await testCaseService.createTestCase(req.body);\n        res.status(201).json(testCase);\n    } catch (error) {\n        console.error('테스트케이스 생성 실패:', error);\n        res.status(400).json({ message: '테스트케이스 생성에 실패했습니다.' });\n    }\n});\n\n/**\n * @swagger\n * /api/testcases/{id}:\n *   put:\n *     summary: 테스트케이스 수정\n *     description: 특정 테스트케이스를 수정합니다.\n *     tags: [Test Cases]\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: integer\n *         description: 테스트케이스 ID\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               title:\n *                 type: string\n *                 description: 테스트케이스 제목\n *               description:\n *                 type: string\n *                 description: 테스트케이스 설명\n *               priority:\n *                 type: string\n *                 enum: [High, Medium, Low]\n *                 description: 우선순위\n *               status:\n *                 type: string\n *                 enum: [Active, Inactive, Draft]\n *                 description: 상태\n *               folderId:\n *                 type: integer\n *                 description: 폴더 ID\n *     responses:\n *       200:\n *         description: 테스트케이스 수정 성공\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/TestCase'\n *       404:\n *         description: 테스트케이스를 찾을 수 없음\n *       400:\n *         description: 잘못된 요청\n *       500:\n *         description: 서버 오류\n */\n// 테스트케이스 수정\nrouter.put('/:id', async (req, res) => {\n    try {\n        const id = parseInt(req.params.id);\n        const testCase = await testCaseService.updateTestCase(id, req.body);\n        if (!testCase) {\n            return res.status(404).json({ message: '테스트케이스를 찾을 수 없습니다.' });\n        }\n        res.json(testCase);\n    } catch (error) {\n        console.error('테스트케이스 수정 실패:', error);\n        res.status(400).json({ message: '테스트케이스 수정에 실패했습니다.' });\n    }\n});\n\n/**\n * @swagger\n * /api/testcases/{id}:\n *   delete:\n *     summary: 테스트케이스 삭제\n *     description: 특정 테스트케이스를 삭제합니다.\n *     tags: [Test Cases]\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: integer\n *         description: 테스트케이스 ID\n *     responses:\n *       200:\n *         description: 테스트케이스 삭제 성공\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   example: '테스트케이스가 성공적으로 삭제되었습니다.'\n *       404:\n *         description: 테스트케이스를 찾을 수 없음\n *       400:\n *         description: 잘못된 요청\n *       500:\n *         description: 서버 오류\n */\n// 테스트케이스 삭제\nrouter.delete('/:id', async (req, res) => {\n    try {\n        const id = parseInt(req.params.id);\n        const success = await testCaseService.deleteTestCase(id);\n        if (!success) {\n            return res.status(404).json({ message: '테스트케이스를 찾을 수 없습니다.' });\n        }\n        res.json({ message: '테스트케이스가 성공적으로 삭제되었습니다.' });\n    } catch (error) {\n        console.error('테스트케이스 삭제 실패:', error);\n        res.status(400).json({ message: '테스트케이스 삭제에 실패했습니다.' });\n    }\n});\n\nexport default router; "],"version":3}