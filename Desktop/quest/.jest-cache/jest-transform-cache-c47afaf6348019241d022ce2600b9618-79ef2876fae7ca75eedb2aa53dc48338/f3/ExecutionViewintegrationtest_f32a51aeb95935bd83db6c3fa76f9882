02b6082bd0218d1c970b78bcc36c0d80
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("@testing-library/react");
const react_redux_1 = require("react-redux");
const toolkit_1 = require("@reduxjs/toolkit");
const api_1 = require("../src/renderer/services/api");
// 실제 ExecutionView 컴포넌트 임포트
const ExecutionView_1 = __importDefault(require("../src/renderer/features/ReleaseManagementV2/components/ExecutionView"));
// Mock store
const createMockStore = () => {
    return (0, toolkit_1.configureStore)({
        reducer: {
            [api_1.api.reducerPath]: api_1.api.reducer,
        },
        middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api_1.api.middleware),
    });
};
// Mock props
const mockRelease = {
    id: 'test-release-id',
    name: 'Test Release',
    version: '1.0.0',
    owner: 'admin',
    createdAt: '2024-01-01T00:00:00Z'
};
const mockTestCases = [
    {
        id: '81',
        name: 'Test Case 1',
        title: 'Test Case 1',
        description: 'Test description 1',
        status: 'Inactive',
        priority: 'High',
        steps: ['Step 1', 'Step 2'],
        expected: 'Expected result 1',
        lastUpdated: '2024-01-01T00:00:00Z',
        tags: ['test'],
        createdBy: 'admin',
        createdAt: '2024-01-01T00:00:00Z',
        updatedAt: '2024-01-01T00:00:00Z'
    }
];
// Mock callbacks
const mockOnTestCaseUpdate = jest.fn();
const mockOnBulkUpdate = jest.fn();
const mockOnAddTestCases = jest.fn();
const mockOnTestCasesLoad = jest.fn();
describe('ExecutionView Integration Test', () => {
    let mockStore;
    beforeEach(() => {
        mockStore = createMockStore();
        jest.clearAllMocks();
    });
    const renderExecutionView = () => {
        return (0, react_1.render)((0, jsx_runtime_1.jsx)(react_redux_1.Provider, { store: mockStore, children: (0, jsx_runtime_1.jsx)(ExecutionView_1.default, { release: mockRelease, testCases: mockTestCases, onTestCaseUpdate: mockOnTestCaseUpdate, onBulkUpdate: mockOnBulkUpdate, onAddTestCases: mockOnAddTestCases, onTestCasesLoad: mockOnTestCasesLoad }) }));
    };
    describe('실제 컴포넌트 렌더링', () => {
        it('실제 ExecutionView 컴포넌트가 렌더링되어야 한다', async () => {
            renderExecutionView();
            // 컴포넌트가 렌더링되는지 확인
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('Test Release')).toBeInTheDocument();
            });
        });
        it('테스트케이스 정보가 표시되어야 한다', async () => {
            renderExecutionView();
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('Test Case 1')).toBeInTheDocument();
            });
        });
    });
    describe('API 통합 테스트', () => {
        it('API 훅들이 실제로 호출되어야 한다', async () => {
            renderExecutionView();
            // API 훅들이 호출되는지 확인 (실제 RTK Query 사용)
            await (0, react_1.waitFor)(() => {
                // 컴포넌트가 정상적으로 렌더링되었는지 확인
                expect(react_1.screen.getByText('Test Release')).toBeInTheDocument();
            });
        });
    });
    describe('상태 관리 테스트', () => {
        it('Redux store와 정상적으로 연동되어야 한다', async () => {
            renderExecutionView();
            await (0, react_1.waitFor)(() => {
                // Redux store가 정상적으로 작동하는지 확인
                expect(react_1.screen.getByText('Test Release')).toBeInTheDocument();
            });
        });
    });
    describe('사용자 인터랙션 테스트', () => {
        it('테스트케이스를 클릭할 수 있어야 한다', async () => {
            renderExecutionView();
            await (0, react_1.waitFor)(() => {
                const testCaseElement = react_1.screen.getByText('Test Case 1');
                expect(testCaseElement).toBeInTheDocument();
                // 테스트케이스 클릭 시뮬레이션
                react_1.fireEvent.click(testCaseElement);
            });
        });
    });
    describe('에러 처리 테스트', () => {
        it('API 에러 시에도 컴포넌트가 렌더링되어야 한다', async () => {
            // 에러 상황에서도 컴포넌트가 렌더링되는지 확인
            renderExecutionView();
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('Test Release')).toBeInTheDocument();
            });
        });
    });
});
// API/DB 중심 동작 통합 테스트
describe('API/DB 중심 동작 통합 테스트', () => {
    let mockStore;
    beforeEach(() => {
        mockStore = createMockStore();
        jest.clearAllMocks();
    });
    it('실제 API 데이터를 사용하여 렌더링되어야 한다', async () => {
        const { getByText } = (0, react_1.render)((0, jsx_runtime_1.jsx)(react_redux_1.Provider, { store: mockStore, children: (0, jsx_runtime_1.jsx)(ExecutionView_1.default, { release: mockRelease, testCases: mockTestCases, onTestCaseUpdate: mockOnTestCaseUpdate, onBulkUpdate: mockOnBulkUpdate, onAddTestCases: mockOnAddTestCases, onTestCasesLoad: mockOnTestCasesLoad }) }));
        await (0, react_1.waitFor)(() => {
            expect(getByText('Test Release')).toBeInTheDocument();
        });
    });
    it('실시간 동기화가 작동해야 한다', async () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(react_redux_1.Provider, { store: mockStore, children: (0, jsx_runtime_1.jsx)(ExecutionView_1.default, { release: mockRelease, testCases: mockTestCases, onTestCaseUpdate: mockOnTestCaseUpdate, onBulkUpdate: mockOnBulkUpdate, onAddTestCases: mockOnAddTestCases, onTestCasesLoad: mockOnTestCasesLoad }) }));
        // 실시간 동기화가 작동하는지 확인 (컴포넌트가 정상 렌더링)
        await (0, react_1.waitFor)(() => {
            expect(react_1.screen.getByText('Test Release')).toBeInTheDocument();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,