{"file":"/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/tests/ExecutionView.integration.test.tsx","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/tests/ExecutionView.integration.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { Provider } from 'react-redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport { api } from '../src/renderer/services/api';\n\n// 실제 ExecutionView 컴포넌트 임포트\nimport ExecutionView from '../src/renderer/features/ReleaseManagementV2/components/ExecutionView';\n\n// Mock store\nconst createMockStore = () => {\n  return configureStore({\n    reducer: {\n      [api.reducerPath]: api.reducer,\n    },\n    middleware: (getDefaultMiddleware) =>\n      getDefaultMiddleware().concat(api.middleware),\n  });\n};\n\n// Mock props\nconst mockRelease = {\n  id: 'test-release-id',\n  name: 'Test Release',\n  version: '1.0.0',\n  owner: 'admin',\n  createdAt: '2024-01-01T00:00:00Z'\n};\n\nconst mockTestCases = [\n  {\n    id: '81',\n    name: 'Test Case 1',\n    title: 'Test Case 1',\n    description: 'Test description 1',\n    status: 'Inactive' as const,\n    priority: 'High' as const,\n    steps: ['Step 1', 'Step 2'],\n    expected: 'Expected result 1',\n    lastUpdated: '2024-01-01T00:00:00Z',\n    tags: ['test'],\n    createdBy: 'admin',\n    createdAt: '2024-01-01T00:00:00Z',\n    updatedAt: '2024-01-01T00:00:00Z'\n  }\n];\n\n// Mock callbacks\nconst mockOnTestCaseUpdate = jest.fn();\nconst mockOnBulkUpdate = jest.fn();\nconst mockOnAddTestCases = jest.fn();\nconst mockOnTestCasesLoad = jest.fn();\n\ndescribe('ExecutionView Integration Test', () => {\n  let mockStore: ReturnType<typeof createMockStore>;\n\n  beforeEach(() => {\n    mockStore = createMockStore();\n    jest.clearAllMocks();\n  });\n\n  const renderExecutionView = () => {\n    return render(\n      <Provider store={mockStore}>\n        <ExecutionView\n          release={mockRelease}\n          testCases={mockTestCases}\n          onTestCaseUpdate={mockOnTestCaseUpdate}\n          onBulkUpdate={mockOnBulkUpdate}\n          onAddTestCases={mockOnAddTestCases}\n          onTestCasesLoad={mockOnTestCasesLoad}\n        />\n      </Provider>\n    );\n  };\n\n  describe('실제 컴포넌트 렌더링', () => {\n    it('실제 ExecutionView 컴포넌트가 렌더링되어야 한다', async () => {\n      renderExecutionView();\n      \n      // 컴포넌트가 렌더링되는지 확인\n      await waitFor(() => {\n        expect(screen.getByText('Test Release')).toBeInTheDocument();\n      });\n    });\n\n    it('테스트케이스 정보가 표시되어야 한다', async () => {\n      renderExecutionView();\n      \n      await waitFor(() => {\n        expect(screen.getByText('Test Case 1')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('API 통합 테스트', () => {\n    it('API 훅들이 실제로 호출되어야 한다', async () => {\n      renderExecutionView();\n      \n      // API 훅들이 호출되는지 확인 (실제 RTK Query 사용)\n      await waitFor(() => {\n        // 컴포넌트가 정상적으로 렌더링되었는지 확인\n        expect(screen.getByText('Test Release')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('상태 관리 테스트', () => {\n    it('Redux store와 정상적으로 연동되어야 한다', async () => {\n      renderExecutionView();\n      \n      await waitFor(() => {\n        // Redux store가 정상적으로 작동하는지 확인\n        expect(screen.getByText('Test Release')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('사용자 인터랙션 테스트', () => {\n    it('테스트케이스를 클릭할 수 있어야 한다', async () => {\n      renderExecutionView();\n      \n      await waitFor(() => {\n        const testCaseElement = screen.getByText('Test Case 1');\n        expect(testCaseElement).toBeInTheDocument();\n        \n        // 테스트케이스 클릭 시뮬레이션\n        fireEvent.click(testCaseElement);\n      });\n    });\n  });\n\n  describe('에러 처리 테스트', () => {\n    it('API 에러 시에도 컴포넌트가 렌더링되어야 한다', async () => {\n      // 에러 상황에서도 컴포넌트가 렌더링되는지 확인\n      renderExecutionView();\n      \n      await waitFor(() => {\n        expect(screen.getByText('Test Release')).toBeInTheDocument();\n      });\n    });\n  });\n});\n\n// API/DB 중심 동작 통합 테스트\ndescribe('API/DB 중심 동작 통합 테스트', () => {\n  let mockStore: ReturnType<typeof createMockStore>;\n\n  beforeEach(() => {\n    mockStore = createMockStore();\n    jest.clearAllMocks();\n  });\n\n  it('실제 API 데이터를 사용하여 렌더링되어야 한다', async () => {\n    const { getByText } = render(\n      <Provider store={mockStore}>\n        <ExecutionView\n          release={mockRelease}\n          testCases={mockTestCases}\n          onTestCaseUpdate={mockOnTestCaseUpdate}\n          onBulkUpdate={mockOnBulkUpdate}\n          onAddTestCases={mockOnAddTestCases}\n          onTestCasesLoad={mockOnTestCasesLoad}\n        />\n      </Provider>\n    );\n\n    await waitFor(() => {\n      expect(getByText('Test Release')).toBeInTheDocument();\n    });\n  });\n\n  it('실시간 동기화가 작동해야 한다', async () => {\n    render(\n      <Provider store={mockStore}>\n        <ExecutionView\n          release={mockRelease}\n          testCases={mockTestCases}\n          onTestCaseUpdate={mockOnTestCaseUpdate}\n          onBulkUpdate={mockOnBulkUpdate}\n          onAddTestCases={mockOnAddTestCases}\n          onTestCasesLoad={mockOnTestCasesLoad}\n        />\n      </Provider>\n    );\n\n    // 실시간 동기화가 작동하는지 확인 (컴포넌트가 정상 렌더링)\n    await waitFor(() => {\n      expect(screen.getByText('Test Release')).toBeInTheDocument();\n    });\n  });\n});\n"],"version":3}