{"file":"/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/src/main/app/domains/tree/controllers/treeController.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/src/main/app/domains/tree/controllers/treeController.ts"],"sourcesContent":["import { Router } from 'express';\nimport * as treeService from '../services/treeService';\nimport { CreateTreeNodeRequest, UpdateTreeNodeRequest, DragDropRequest } from '../types';\n\n/**\n * @swagger\n * components:\n *   schemas:\n *     TreeNode:\n *       type: object\n *       properties:\n *         id:\n *           type: integer\n *           description: 노드 ID\n *         name:\n *           type: string\n *           description: 노드 이름\n *         type:\n *           type: string\n *           enum: [folder, testcase, suite]\n *           description: 노드 타입\n *         parentId:\n *           type: integer\n *           nullable: true\n *           description: 부모 노드 ID\n *         sortOrder:\n *           type: integer\n *           description: 정렬 순서\n *         createdBy:\n *           type: string\n *           description: 생성자\n *         createdAt:\n *           type: string\n *           format: date-time\n *           description: 생성일\n *         updatedAt:\n *           type: string\n *           format: date-time\n *           description: 수정일\n *     TreeStructure:\n *       type: object\n *       properties:\n *         nodes:\n *           type: array\n *           items:\n *             $ref: '#/components/schemas/TreeNode'\n *         rootNodes:\n *           type: array\n *           items:\n *             $ref: '#/components/schemas/TreeNode'\n */\n\nconst router = Router();\n\n// =====================================================\n// 기본 CRUD 엔드포인트\n// =====================================================\n\n/**\n * @swagger\n * /api/tree/structure:\n *   get:\n *     summary: 트리 구조 조회\n *     description: 전체 트리 구조를 조회합니다.\n *     tags: [Tree]\n *     responses:\n *       200:\n *         description: 트리 구조 조회 성공\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/TreeStructure'\n *       500:\n *         description: 서버 오류\n */\n// 트리 구조 조회\nrouter.get('/structure', async (req, res) => {\n  try {\n    const treeStructure = await treeService.getTreeStructure();\n    res.json(treeStructure);\n  } catch (error) {\n    console.error('트리 구조 조회 실패:', error);\n    res.status(500).json({ \n      message: error instanceof Error ? error.message : '트리 구조 조회에 실패했습니다.',\n      error: error instanceof Error ? error.stack : String(error)\n    });\n  }\n});\n\n/**\n * @swagger\n * /api/tree:\n *   get:\n *     summary: 모든 트리 노드 조회\n *     description: 모든 트리 노드를 조회합니다.\n *     tags: [Tree]\n *     responses:\n *       200:\n *         description: 트리 노드 조회 성공\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/TreeNode'\n *       500:\n *         description: 서버 오류\n */\n// 모든 노드 조회\nrouter.get('/', async (req, res) => {\n  try {\n    const nodes = await treeService.getAllTreeNodes();\n    res.json(nodes);\n  } catch (error) {\n    console.error('노드 조회 실패:', error);\n    res.status(500).json({ \n      message: error instanceof Error ? error.message : '노드 조회에 실패했습니다.',\n      error: error instanceof Error ? error.stack : String(error)\n    });\n  }\n});\n\n// 특정 노드 조회\nrouter.get('/:id', async (req, res) => {\n  try {\n    const id = parseInt(req.params.id);\n    if (isNaN(id)) {\n      return res.status(400).json({ message: '유효하지 않은 노드 ID입니다.' });\n    }\n\n    const node = await treeService.getTreeNodeById(id);\n    if (!node) {\n      return res.status(404).json({ message: '노드를 찾을 수 없습니다.' });\n    }\n\n    res.json(node);\n  } catch (error) {\n    console.error('노드 조회 실패:', error);\n    res.status(500).json({ \n      message: error instanceof Error ? error.message : '노드 조회에 실패했습니다.',\n      error: error instanceof Error ? error.stack : String(error)\n    });\n  }\n});\n\n// 노드 생성\nrouter.post('/', async (req, res) => {\n  try {\n    console.log('노드 생성 요청:', req.body);\n\n    const nodeData: CreateTreeNodeRequest = {\n      name: req.body.name,\n      type: req.body.type,\n      parentId: req.body.parentId || null,\n      createdBy: req.body.createdBy || 'system'\n    };\n\n    console.log('노드 데이터:', nodeData);\n\n    const node = await treeService.createTreeNode(nodeData);\n    console.log('노드 생성 성공:', node);\n    res.status(201).json(node);\n  } catch (error) {\n    console.error('노드 생성 실패:', error);\n    res.status(400).json({ \n      message: error instanceof Error ? error.message : '노드 생성에 실패했습니다.',\n      error: error instanceof Error ? error.stack : String(error)\n    });\n  }\n});\n\n// 노드 수정\nrouter.put('/:id', async (req, res) => {\n  try {\n    const id = parseInt(req.params.id);\n    if (isNaN(id)) {\n      return res.status(400).json({ message: '유효하지 않은 노드 ID입니다.' });\n    }\n\n    const updateData: UpdateTreeNodeRequest = {\n      name: req.body.name,\n      parentId: req.body.parentId,\n      sortOrder: req.body.sortOrder\n    };\n\n    const node = await treeService.updateTreeNode(id, updateData);\n    if (!node) {\n      return res.status(404).json({ message: '노드를 찾을 수 없습니다.' });\n    }\n\n    res.json(node);\n  } catch (error) {\n    console.error('노드 수정 실패:', error);\n    res.status(400).json({ \n      message: error instanceof Error ? error.message : '노드 수정에 실패했습니다.',\n      error: error instanceof Error ? error.stack : String(error)\n    });\n  }\n});\n\n// 노드 삭제\nrouter.delete('/:id', async (req, res) => {\n  try {\n    const id = parseInt(req.params.id);\n    if (isNaN(id)) {\n      return res.status(400).json({ message: '유효하지 않은 노드 ID입니다.' });\n    }\n\n    const success = await treeService.deleteTreeNode(id);\n    if (!success) {\n      return res.status(404).json({ message: '노드를 찾을 수 없습니다.' });\n    }\n\n    res.json({ message: '노드가 성공적으로 삭제되었습니다.' });\n  } catch (error) {\n    console.error('노드 삭제 실패:', error);\n    res.status(400).json({ \n      message: error instanceof Error ? error.message : '노드 삭제에 실패했습니다.',\n      error: error instanceof Error ? error.stack : String(error)\n    });\n  }\n});\n\n// =====================================================\n// 검색 엔드포인트\n// =====================================================\n\n// 노드 검색\nrouter.get('/search', async (req, res) => {\n  try {\n    const searchRequest = {\n      query: req.query.query as string,\n      type: req.query.type as 'folder' | 'testcase',\n      parentId: req.query.parentId ? parseInt(req.query.parentId as string) : undefined,\n      limit: req.query.limit ? parseInt(req.query.limit as string) : undefined,\n      offset: req.query.offset ? parseInt(req.query.offset as string) : undefined\n    };\n\n    const result = await treeService.searchTreeNodes(searchRequest);\n    res.json(result);\n  } catch (error) {\n    console.error('노드 검색 실패:', error);\n    res.status(500).json({ \n      message: error instanceof Error ? error.message : '노드 검색에 실패했습니다.',\n      error: error instanceof Error ? error.stack : String(error)\n    });\n  }\n});\n\n// =====================================================\n// 드래그 앤 드롭 엔드포인트\n// =====================================================\n\n// 드래그 앤 드롭 처리\nrouter.post('/dragdrop', async (req, res) => {\n  try {\n    const { draggedNodeId, targetNodeId, dropType, position } = req.body;\n\n    if (!draggedNodeId || !targetNodeId || !dropType) {\n      return res.status(400).json({ message: '필수 파라미터가 누락되었습니다.' });\n    }\n\n    const dragDropRequest: DragDropRequest = {\n      sourceId: draggedNodeId,\n      targetId: targetNodeId,\n      position\n    };\n\n    const result = await treeService.handleTreeNodeDragDrop(dragDropRequest);\n    res.json(result);\n  } catch (error) {\n    console.error('드래그 앤 드롭 실패:', error);\n    res.status(400).json({ \n      message: error instanceof Error ? error.message : '드래그 앤 드롭에 실패했습니다.',\n      error: error instanceof Error ? error.stack : String(error)\n    });\n  }\n});\n\n// 드롭 영역 유효성 검사\nrouter.post('/validate-drop', async (req, res) => {\n  try {\n    const { draggedNodeId, targetNodeId, dropZone } = req.body;\n\n    if (!draggedNodeId || !targetNodeId || !dropZone) {\n      return res.status(400).json({ message: '필수 파라미터가 누락되었습니다.' });\n    }\n\n    const validation = await treeService.validateDropZone(draggedNodeId, targetNodeId, dropZone);\n    res.json(validation);\n  } catch (error) {\n    console.error('드롭 영역 유효성 검사 실패:', error);\n    res.status(500).json({ \n      message: error instanceof Error ? error.message : '드롭 영역 유효성 검사에 실패했습니다.',\n      error: error instanceof Error ? error.stack : String(error)\n    });\n  }\n});\n\n// =====================================================\n// 성능 모니터링 엔드포인트\n// =====================================================\n\n// 성능 통계 조회\nrouter.get('/performance/stats', async (req, res) => {\n  try {\n    // 성능 통계 로직 구현\n    res.json({ message: '성능 통계 기능은 추후 구현 예정입니다.' });\n  } catch (error) {\n    console.error('성능 통계 조회 실패:', error);\n    res.status(500).json({ \n      message: error instanceof Error ? error.message : '성능 통계 조회에 실패했습니다.',\n      error: error instanceof Error ? error.stack : String(error)\n    });\n  }\n});\n\nexport default router; "],"version":3}