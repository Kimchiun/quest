{"file":"/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/src/main/app/infrastructure/security/passport.ts","mappings":";;;;;AAAA,wDAAgC;AAChC,mDAA2D;AAC3D,+CAAmE;AACnE,mEAAmE;AACnE,uEAAuE;AACvE,0EAA4G;AAG5G,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,YAAY,CAAC;AAE1D,kBAAQ,CAAC,GAAG,CACR,IAAI,yBAAa,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE;IACjD,IAAI,CAAC;QACD,MAAM,IAAI,GAAG,MAAM,IAAA,gCAAkB,EAAC,QAAQ,CAAC,CAAC;QAChD,IAAI,CAAC,IAAI;YAAE,OAAO,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,cAAc,EAAE,CAAC,CAAC;QACjE,MAAM,KAAK,GAAG,MAAM,IAAA,8BAAgB,EAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QACrD,IAAI,CAAC,KAAK;YAAE,OAAO,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;QAC9D,OAAO,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC5B,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACX,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;IACrB,CAAC;AACL,CAAC,CAAC,CACL,CAAC;AAEF,kBAAQ,CAAC,GAAG,CACR,IAAI,uBAAW,CACX;IACI,cAAc,EAAE,yBAAU,CAAC,2BAA2B,EAAE;IACxD,WAAW,EAAE,UAAU;CAC1B,EACD,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IACpB,IAAI,CAAC;QACD,MAAM,IAAI,GAAG,MAAM,IAAA,gCAAkB,EAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACxD,IAAI,CAAC,IAAI;YAAE,OAAO,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACpC,OAAO,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC5B,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACX,OAAO,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IAC5B,CAAC;AACL,CAAC,CACJ,CACJ,CAAC;AAEF,8BAA8B;AAC9B,qDAAqD;AACrD,uDAAuD;AAEvD,kBAAe,kBAAQ,CAAC","names":[],"sources":["/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/src/main/app/infrastructure/security/passport.ts"],"sourcesContent":["import passport from 'passport';\nimport { Strategy as LocalStrategy } from 'passport-local';\nimport { Strategy as JwtStrategy, ExtractJwt } from 'passport-jwt';\n// import { Strategy as SamlStrategy } from 'passport-saml'; // 템플릿\n// import { Strategy as OAuth2Strategy } from 'passport-oauth2'; // 템플릿\nimport { createUser, findUserByUsername, validatePassword } from '../../domains/users/services/userService';\nimport { User } from '../../domains/users/types';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'dev_secret';\n\npassport.use(\n    new LocalStrategy(async (username, password, done) => {\n        try {\n            const user = await findUserByUsername(username);\n            if (!user) return done(null, false, { message: '사용자를 찾을 수 없음' });\n            const valid = await validatePassword(user, password);\n            if (!valid) return done(null, false, { message: '비밀번호 불일치' });\n            return done(null, user);\n        } catch (err) {\n            return done(err);\n        }\n    })\n);\n\npassport.use(\n    new JwtStrategy(\n        {\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            secretOrKey: JWT_SECRET,\n        },\n        async (payload, done) => {\n            try {\n                const user = await findUserByUsername(payload.username);\n                if (!user) return done(null, false);\n                return done(null, user);\n            } catch (err) {\n                return done(err, false);\n            }\n        }\n    )\n);\n\n// SAML, OAuth2 전략 템플릿 (구현 필요)\n// passport.use(new SamlStrategy({ ... }, verifyFn));\n// passport.use(new OAuth2Strategy({ ... }, verifyFn));\n\nexport default passport; "],"version":3}