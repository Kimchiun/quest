{"file":"/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/tests/advanced-search.test.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/tests/advanced-search.test.ts"],"sourcesContent":["import { buildAdvancedQuery, advancedSearch, saveSearchPreset, getSearchPresets, deleteSearchPreset } from '../src/main/app/domains/testcases/elasticsearch/advancedSearchService';\nimport { AdvancedSearchFilter } from '../src/main/app/domains/testcases/elasticsearch/advancedSearchService';\n\n// Mock Elasticsearch client\njest.mock('../src/main/app/infrastructure/elasticsearch/esClient', () => ({\n  search: jest.fn(),\n  index: jest.fn(),\n  delete: jest.fn(),\n}));\n\ndescribe('Advanced Search Service', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('buildAdvancedQuery', () => {\n    it('should build basic query without filters', () => {\n      const filters: AdvancedSearchFilter = {};\n      const query = buildAdvancedQuery(filters);\n\n      expect(query.query.bool.must).toEqual([]);\n      expect(query.query.bool.should).toEqual([]);\n      expect(query.query.bool.filter).toEqual([]);\n      expect(query.query.bool.minimum_should_match).toBe(0);\n    });\n\n    it('should build query with keyword search', () => {\n      const filters: AdvancedSearchFilter = {\n        keyword: 'login test'\n      };\n      const query = buildAdvancedQuery(filters);\n\n      expect(query.query.bool.should).toHaveLength(4);\n      expect(query.query.bool.should[0]).toEqual({\n        match: { title: { query: 'login test', boost: 3 } }\n      });\n      expect(query.query.bool.minimum_should_match).toBe(1);\n    });\n\n    it('should build query with multiple filters', () => {\n      const filters: AdvancedSearchFilter = {\n        keyword: 'test',\n        folders: ['Smoke Tests'],\n        tags: ['critical'],\n        status: ['Active'],\n        priority: ['High'],\n        createdBy: ['tester1'],\n        dateRange: {\n          from: '2024-01-01',\n          to: '2024-12-31'\n        }\n      };\n      const query = buildAdvancedQuery(filters);\n\n      // 키워드 검색\n      expect(query.query.bool.should).toHaveLength(4);\n      expect(query.query.bool.minimum_should_match).toBe(1);\n\n      // 필터 조건들 (날짜 범위 포함)\n      expect(query.query.bool.filter).toHaveLength(6);\n      expect(query.query.bool.filter).toContainEqual({\n        terms: { folder: ['Smoke Tests'] }\n      });\n      expect(query.query.bool.filter).toContainEqual({\n        terms: { tags: ['critical'] }\n      });\n      expect(query.query.bool.filter).toContainEqual({\n        terms: { status: ['Active'] }\n      });\n      expect(query.query.bool.filter).toContainEqual({\n        terms: { priority: ['High'] }\n      });\n      expect(query.query.bool.filter).toContainEqual({\n        terms: { createdBy: ['tester1'] }\n      });\n      expect(query.query.bool.filter).toContainEqual({\n        range: { createdAt: { gte: '2024-01-01', lte: '2024-12-31' } }\n      });\n    });\n\n    it('should build query with date range filters', () => {\n      const filters: AdvancedSearchFilter = {\n        dateRange: {\n          from: '2024-01-01',\n          to: '2024-12-31'\n        }\n      };\n      const query = buildAdvancedQuery(filters);\n\n      expect(query.query.bool.filter).toContainEqual({\n        range: { createdAt: { gte: '2024-01-01', lte: '2024-12-31' } }\n      });\n    });\n\n    it('should build query with only from date', () => {\n      const filters: AdvancedSearchFilter = {\n        dateRange: {\n          from: '2024-01-01',\n          to: ''\n        }\n      };\n      const query = buildAdvancedQuery(filters);\n\n      expect(query.query.bool.filter).toContainEqual({\n        range: { createdAt: { gte: '2024-01-01' } }\n      });\n    });\n\n    it('should build query with only to date', () => {\n      const filters: AdvancedSearchFilter = {\n        dateRange: {\n          from: '',\n          to: '2024-12-31'\n        }\n      };\n      const query = buildAdvancedQuery(filters);\n\n      expect(query.query.bool.filter).toContainEqual({\n        range: { createdAt: { lte: '2024-12-31' } }\n      });\n    });\n  });\n\n  describe('advancedSearch', () => {\n    it('should execute advanced search and return results', async () => {\n      const mockSearchResult = {\n        hits: {\n          hits: [\n            {\n              _id: '1',\n              _source: {\n                id: 1,\n                title: 'Login Test',\n                priority: 'High',\n                status: 'Active',\n                createdBy: 'tester1',\n                createdAt: '2024-01-15T00:00:00Z'\n              },\n              highlight: {\n                title: ['<mark>Login</mark> Test']\n              }\n            }\n          ],\n          total: { value: 1 }\n        }\n      };\n\n      const esClient = require('../src/main/app/infrastructure/elasticsearch/esClient');\n      esClient.search.mockResolvedValue(mockSearchResult);\n\n      const filters: AdvancedSearchFilter = {\n        keyword: 'login',\n        status: ['Active']\n      };\n\n      const result = await advancedSearch(filters, 0, 20);\n\n      expect(result.testCases).toHaveLength(1);\n      expect(result.testCases[0].title).toBe('Login Test');\n      expect(result.total).toBe(1);\n      expect(result.highlights['1']).toEqual(['<mark>Login</mark> Test']);\n    });\n\n    it('should handle search errors gracefully', async () => {\n      const esClient = require('../src/main/app/infrastructure/elasticsearch/esClient');\n      esClient.search.mockRejectedValue(new Error('Search failed'));\n\n      const filters: AdvancedSearchFilter = {\n        keyword: 'test'\n      };\n\n      await expect(advancedSearch(filters)).rejects.toThrow('Search failed');\n    });\n  });\n\n  describe('Search Presets', () => {\n    it('should save search preset', async () => {\n      const mockPreset = {\n        id: 'preset_123',\n        name: 'Critical Tests',\n        filters: {\n          priority: ['High'],\n          tags: ['critical']\n        },\n        createdBy: 'tester1',\n        createdAt: '2024-01-15T00:00:00Z'\n      };\n\n      const esClient = require('../src/main/app/infrastructure/elasticsearch/esClient');\n      esClient.index.mockResolvedValue({});\n\n      const presetData = {\n        name: 'Critical Tests',\n        filters: {\n          priority: ['High' as const],\n          tags: ['critical']\n        },\n        createdBy: 'tester1'\n      };\n\n      const result = await saveSearchPreset(presetData);\n\n      expect(result.name).toBe('Critical Tests');\n      expect(result.filters).toEqual(presetData.filters);\n      expect(result.createdBy).toBe('tester1');\n      expect(result.id).toMatch(/^preset_\\d+_/);\n      expect(result.createdAt).toBeDefined();\n    });\n\n    it('should get search presets', async () => {\n      const mockPresets = [\n        {\n          _id: 'preset_1',\n          _source: {\n            id: 'preset_1',\n            name: 'Critical Tests',\n            filters: { priority: ['High'] },\n            createdBy: 'tester1',\n            createdAt: '2024-01-15T00:00:00Z'\n          }\n        }\n      ];\n\n      const esClient = require('../src/main/app/infrastructure/elasticsearch/esClient');\n      esClient.search.mockResolvedValue({\n        hits: { hits: mockPresets }\n      });\n\n      const presets = await getSearchPresets('tester1');\n\n      expect(presets).toHaveLength(1);\n      expect(presets[0].name).toBe('Critical Tests');\n      expect(presets[0].createdBy).toBe('tester1');\n    });\n\n    it('should delete search preset', async () => {\n      const esClient = require('../src/main/app/infrastructure/elasticsearch/esClient');\n      esClient.delete.mockResolvedValue({});\n\n      const result = await deleteSearchPreset('preset_123');\n\n      expect(result).toBe(true);\n      expect(esClient.delete).toHaveBeenCalledWith({\n        index: 'search_presets',\n        id: 'preset_123'\n      });\n    });\n\n    it('should handle delete preset errors', async () => {\n      const esClient = require('../src/main/app/infrastructure/elasticsearch/esClient');\n      esClient.delete.mockRejectedValue(new Error('Delete failed'));\n\n      const result = await deleteSearchPreset('preset_123');\n\n      expect(result).toBe(false);\n    });\n  });\n}); "],"version":3}