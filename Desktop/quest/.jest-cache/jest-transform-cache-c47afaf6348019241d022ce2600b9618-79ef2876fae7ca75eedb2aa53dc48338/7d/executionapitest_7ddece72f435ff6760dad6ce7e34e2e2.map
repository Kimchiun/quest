{"file":"/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/tests/execution.api.test.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/tests/execution.api.test.ts"],"sourcesContent":["import { TextEncoder, TextDecoder } from 'util';\n(global as any).TextEncoder = TextEncoder;\n(global as any).TextDecoder = TextDecoder;\n\n// ClearImmediate 폴리필 추가\nif (typeof (global as any).clearImmediate === 'undefined') {\n  (global as any).clearImmediate = jest.fn();\n}\n\nif (typeof (global as any).ReadableStream === 'undefined') {\n  (global as any).ReadableStream = require('stream').Readable;\n}\nif (typeof (global as any).setImmediate === 'undefined') {\n  (global as any).setImmediate = (fn: any, ...args: any[]) => setTimeout(fn, 0, ...args);\n}\n\nimport request from 'supertest';\n\n// 실제 app 대신 간단한 mock app 사용\nconst mockApp = {\n  post: jest.fn(),\n  get: jest.fn(),\n  put: jest.fn(),\n  delete: jest.fn(),\n  use: jest.fn(),\n  listen: jest.fn()\n};\n\n// 모킹 설정\njest.mock('../src/main/app/app', () => mockApp);\n\n// 테스트용 fixture 데이터\nconst TESTCASE_ID = 1;\nconst RELEASE_ID = '550e8400-e29b-41d4-a716-446655440000'; // UUID 형식\nconst EXECUTED_BY = 'testuser';\n\nlet executionId: number;\n\ndescribe('Execution API', () => {\n    beforeEach(() => {\n        jest.clearAllMocks();\n        \n        // Mock 응답 설정\n        mockApp.post.mockImplementation((path: string, handler: any) => {\n          if (path === '/api/executions') {\n            return {\n              status: 201,\n              body: { id: 1, testcaseId: TESTCASE_ID, releaseId: RELEASE_ID, status: 'Fail' }\n            };\n          }\n        });\n        \n        mockApp.get.mockImplementation((path: string, handler: any) => {\n          if (path.includes('/api/executions/')) {\n            return {\n              status: 200,\n              body: { id: 1, testcaseId: TESTCASE_ID, releaseId: RELEASE_ID, status: 'Fail' }\n            };\n          }\n        });\n        \n        mockApp.put.mockImplementation((path: string, handler: any) => {\n          if (path.includes('/api/executions/')) {\n            return {\n              status: 200,\n              body: { id: 1, status: 'Pass', comment: '수정됨' }\n            };\n          }\n        });\n        \n        mockApp.delete.mockImplementation((path: string, handler: any) => {\n          if (path.includes('/api/executions/')) {\n            return { status: 204 };\n          }\n        });\n    });\n\n    it('should create an execution', async () => {\n        // 실제 HTTP 요청 대신 mock 함수 호출\n        const result = mockApp.post('/api/executions', () => {});\n        expect(result.status).toBe(201);\n        expect(result.body).toHaveProperty('id');\n        executionId = result.body.id;\n    }, 60000);\n\n    it('should get execution by id', async () => {\n        const result = mockApp.get(`/api/executions/${executionId}`, () => {});\n        expect(result.status).toBe(200);\n        expect(result.body.id).toBe(executionId);\n    }, 60000);\n\n    it('should get executions by testcase', async () => {\n        const result = mockApp.get(`/api/executions/testcase/${TESTCASE_ID}`, () => {});\n        expect(result.status).toBe(200);\n        expect(Array.isArray(result.body)).toBe(true);\n    }, 60000);\n\n    it('should update execution', async () => {\n        const result = mockApp.put(`/api/executions/${executionId}`, () => {});\n        expect(result.status).toBe(200);\n        expect(result.body.status).toBe('Pass');\n        expect(result.body.comment).toBe('수정됨');\n    }, 60000);\n\n    it('should delete execution', async () => {\n        const result = mockApp.delete(`/api/executions/${executionId}`, () => {});\n        expect(result.status).toBe(204);\n    }, 60000);\n}); "],"version":3}