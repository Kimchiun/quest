{"file":"/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/tests/execution.api.test.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/tests/execution.api.test.ts"],"sourcesContent":["import { TextEncoder, TextDecoder } from 'util';\n(global as any).TextEncoder = TextEncoder;\n(global as any).TextDecoder = TextDecoder;\n\n// ClearImmediate 폴리필 추가\nif (typeof (global as any).clearImmediate === 'undefined') {\n  (global as any).clearImmediate = jest.fn();\n}\n\nif (typeof (global as any).ReadableStream === 'undefined') {\n  (global as any).ReadableStream = require('stream').Readable;\n}\nif (typeof (global as any).setImmediate === 'undefined') {\n  (global as any).setImmediate = (fn: any, ...args: any[]) => setTimeout(fn, 0, ...args);\n}\n\nimport request from 'supertest';\nimport app from '../src/main/app/app';\n\n// 모킹 설정 - 올바른 경로 사용\njest.mock('../src/main/app/infrastructure/database/pgClient', () => ({\n  query: jest.fn().mockResolvedValue({ rows: [] }),\n  connect: jest.fn().mockResolvedValue({}),\n}));\n\njest.mock('../src/main/app/infrastructure/elasticsearch/esClient', () => ({\n  search: jest.fn().mockResolvedValue({ hits: { hits: [] } }),\n  index: jest.fn().mockResolvedValue({}),\n}));\n\n// 테스트용 fixture 데이터 - 스키마에 맞게 수정\nconst TESTCASE_ID = 1;\nconst RELEASE_ID = 1; // ✅ 추가: 필수 필드\nconst EXECUTED_BY = 'testuser';\n\nlet executionId: number;\n\ndescribe('Execution API', () => {\n    beforeEach(() => {\n        // 각 테스트 전에 모킹 초기화\n        jest.clearAllMocks();\n        \n        // PostgreSQL 모킹 설정 - 스키마에 맞게 수정\n        const { query } = require('../src/main/app/infrastructure/database/pgClient');\n        query.mockImplementation((sql: string, params: any[]) => {\n          if (sql.includes('INSERT INTO executions')) {\n            return Promise.resolve({ rows: [{ id: 1 }] });\n          }\n          if (sql.includes('SELECT * FROM executions')) {\n            return Promise.resolve({ \n              rows: [{ \n                id: 1, \n                testcase_id: TESTCASE_ID,\n                release_id: RELEASE_ID, // ✅ 추가: 필수 필드\n                status: 'Fail', \n                executed_by: EXECUTED_BY,\n                executed_at: new Date().toISOString(),\n                comment: '테스트 실패'\n                // repro_steps 제거 - API에서 지원하지 않음\n              }] \n            });\n          }\n          if (sql.includes('UPDATE executions')) {\n            return Promise.resolve({ rows: [{ id: 1, status: 'Pass', comment: '수정됨' }] });\n          }\n          if (sql.includes('DELETE FROM executions')) {\n            return Promise.resolve({ rows: [] });\n          }\n          return Promise.resolve({ rows: [] });\n        });\n    });\n\n    it('should create an execution', async () => {\n        const res = await request(app)\n            .post('/api/executions')\n            .send({\n                testcaseId: TESTCASE_ID,\n                releaseId: RELEASE_ID, // ✅ 추가: 필수 필드\n                status: 'Fail',\n                executedBy: EXECUTED_BY,\n                executedAt: new Date().toISOString(),\n                comment: '테스트 실패',\n                // reproSteps 제거 - API에서 지원하지 않음\n            });\n        expect(res.status).toBe(201);\n        expect(res.body).toHaveProperty('id');\n        executionId = res.body.id;\n    }, 60000);\n\n    it('should get execution by id', async () => {\n        const res = await request(app).get(`/api/executions/${executionId}`);\n        expect(res.status).toBe(200);\n        expect(res.body.id).toBe(executionId);\n    }, 60000);\n\n    it('should get executions by testcase', async () => {\n        const res = await request(app).get(`/api/executions/testcase/${TESTCASE_ID}`);\n        expect(res.status).toBe(200);\n        expect(Array.isArray(res.body)).toBe(true);\n    }, 60000);\n\n    it('should update execution', async () => {\n        const res = await request(app)\n            .put(`/api/executions/${executionId}`)\n            .send({ status: 'Pass', comment: '수정됨' });\n        expect(res.status).toBe(200);\n        expect(res.body.status).toBe('Pass');\n        expect(res.body.comment).toBe('수정됨');\n    }, 60000);\n\n    it('should delete execution', async () => {\n        const res = await request(app).delete(`/api/executions/${executionId}`);\n        expect(res.status).toBe(204);\n    }, 60000);\n}); "],"version":3}