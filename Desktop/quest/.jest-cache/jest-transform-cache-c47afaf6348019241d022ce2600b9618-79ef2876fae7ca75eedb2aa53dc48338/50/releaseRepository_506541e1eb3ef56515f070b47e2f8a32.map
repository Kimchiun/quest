{"file":"/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/src/main/app/domains/releases/repositories/releaseRepository.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/src/main/app/domains/releases/repositories/releaseRepository.ts"],"sourcesContent":["import { Release, ReleaseScope, ReleaseCase, Run, DefectLink, Environment } from '../entities/release';\n\nexport class ReleaseRepository {\n  // 모든 릴리즈 조회\n  async findAll(): Promise<Release[]> {\n    try {\n      const { getPgClient } = await import('../../../infrastructure/database/pgClient');\n      const pgClient = getPgClient();\n      \n      if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n      }\n\n      const result = await pgClient.query(`\n        SELECT \n          id,\n          name,\n          version,\n          description,\n          status,\n          assignee_name,\n          scheduled_date,\n          deployed_date,\n          created_at,\n          updated_at\n        FROM releases\n        ORDER BY created_at DESC\n      `);\n\n      return result.rows.map((row: any) => ({\n        id: row.id,\n        projectId: '1',\n        name: row.name,\n        version: row.version,\n        description: row.description || '',\n        status: row.status,\n        startAt: row.scheduled_date,\n        endAt: row.deployed_date,\n        owners: row.assignee_name ? [row.assignee_name] : [],\n        assignee_name: row.assignee_name,\n        watchers: [],\n        tags: [],\n        createdBy: 'system',\n        updatedBy: 'system',\n        createdAt: row.created_at,\n        updatedAt: row.updated_at,\n        settings: {\n          gateCriteria: {\n            minPassRate: 85,\n            maxFailCritical: 0,\n            zeroBlockers: true,\n            coverageByPriority: {\n              P0: 100,\n              P1: 95,\n              P2: 90\n            }\n          },\n          autoSyncScope: true,\n          allowReopen: false\n        }\n      }));\n    } catch (error) {\n      console.error('릴리즈 조회 실패:', error);\n      return []; // 실패 시 빈 배열 반환\n    }\n  }\n\n  // ID로 릴리즈 조회\n  async findById(id: string): Promise<Release | null> {\n    try {\n      const { getPgClient } = await import('../../../infrastructure/database/pgClient');\n      const pgClient = getPgClient();\n      \n      if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n      }\n\n      const result = await pgClient.query(`\n        SELECT \n          id,\n          name,\n          version,\n          description,\n          status,\n          assignee_name,\n          scheduled_date,\n          deployed_date,\n          created_at,\n          updated_at\n        FROM releases\n        WHERE id = $1\n      `, [id]);\n\n      if (result.rows.length === 0) {\n        return null;\n      }\n\n      const row = result.rows[0];\n      return {\n        id: String(row.id),\n        projectId: '1',\n        name: row.name,\n        version: row.version,\n        description: row.description || '',\n        status: row.status,\n        startAt: row.scheduled_date,\n        endAt: row.deployed_date,\n        owners: row.assignee_name ? [row.assignee_name] : [],\n        assignee_name: row.assignee_name,\n        watchers: [],\n        tags: [],\n        createdBy: 'system',\n        updatedBy: 'system',\n        createdAt: row.created_at,\n        updatedAt: row.updated_at,\n        settings: {\n          gateCriteria: {\n            minPassRate: 85,\n            maxFailCritical: 0,\n            zeroBlockers: true,\n            coverageByPriority: {\n              P0: 100,\n              P1: 95,\n              P2: 90\n            }\n          },\n          autoSyncScope: true,\n          allowReopen: false\n        }\n      };\n    } catch (error) {\n      console.error('릴리즈 조회 실패:', error);\n      return null;\n    }\n  }\n\n  // 프로젝트별 릴리즈 조회\n  async findByProjectId(projectId: string): Promise<Release[]> {\n    try {\n      const { getPgClient } = await import('../../../infrastructure/database/pgClient');\n      const pgClient = getPgClient();\n      \n      if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n      }\n\n      const result = await pgClient.query(`\n        SELECT \n          id,\n          name,\n          version,\n          description,\n          status,\n          assignee_name,\n          scheduled_date,\n          deployed_date,\n          created_at,\n          updated_at\n        FROM releases\n        ORDER BY created_at DESC\n      `);\n\n      return result.rows.map((row: any) => ({\n        id: row.id,\n        projectId: '1',\n        name: row.name,\n        version: row.version,\n        description: row.description || '',\n        status: row.status,\n        startAt: row.scheduled_date,\n        endAt: row.deployed_date,\n        owners: row.assignee_name ? [row.assignee_name] : [],\n        assignee_name: row.assignee_name,\n        watchers: [],\n        tags: [],\n        createdBy: 'system',\n        updatedBy: 'system',\n        createdAt: row.created_at,\n        updatedAt: row.updated_at,\n        settings: {\n          gateCriteria: {\n            minPassRate: 85,\n            maxFailCritical: 0,\n            zeroBlockers: true,\n            coverageByPriority: {\n              P0: 100,\n              P1: 95,\n              P2: 90\n            }\n          },\n          autoSyncScope: true,\n          allowReopen: false\n        }\n      }));\n    } catch (error) {\n      console.error('프로젝트별 릴리즈 조회 실패:', error);\n      return [];\n    }\n  }\n\n  // 릴리즈 생성\n  async create(releaseData: Omit<Release, 'id' | 'createdAt' | 'updatedAt'>): Promise<Release> {\n    try {\n      const { getPgClient } = await import('../../../infrastructure/database/pgClient');\n      const pgClient = getPgClient();\n      \n      if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n      }\n\n      const now = new Date().toISOString();\n      \n      const result = await pgClient.query(`\n        INSERT INTO releases (\n          name, version, description, status, assignee_name, \n          scheduled_date, deployed_date, created_at, updated_at\n        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)\n        RETURNING *\n      `, [\n        releaseData.name,\n        releaseData.version,\n        releaseData.description || '',\n        releaseData.status,\n        releaseData.assignee || releaseData.owners?.[0] || null,\n        releaseData.startAt || null,\n        releaseData.endAt || null,\n        now,\n        now\n      ]);\n\n      const createdRelease = result.rows[0];\n      \n      return {\n        id: createdRelease.id,\n        projectId: '1',\n        name: createdRelease.name,\n        version: createdRelease.version,\n        description: createdRelease.description || '',\n        status: createdRelease.status,\n        startAt: createdRelease.scheduled_date,\n        endAt: createdRelease.deployed_date,\n        owners: createdRelease.assignee_name ? [createdRelease.assignee_name] : [],\n        assignee_name: createdRelease.assignee_name,\n        watchers: [],\n        tags: [],\n        createdBy: 'system',\n        updatedBy: 'system',\n        createdAt: createdRelease.created_at,\n        updatedAt: createdRelease.updated_at,\n        settings: {\n          gateCriteria: {\n            minPassRate: 85,\n            maxFailCritical: 0,\n            zeroBlockers: true,\n            coverageByPriority: {\n              P0: 100,\n              P1: 95,\n              P2: 90\n            }\n          },\n          autoSyncScope: true,\n          allowReopen: false\n        }\n      };\n    } catch (error) {\n      console.error('릴리즈 생성 실패:', error);\n      throw error;\n    }\n  }\n\n  // 릴리즈 업데이트\n  async update(id: string, updateData: Partial<Release>): Promise<Release | null> {\n    try {\n      const { getPgClient } = await import('../../../infrastructure/database/pgClient');\n      const pgClient = getPgClient();\n      \n      if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n      }\n\n      const now = new Date().toISOString();\n      \n      const result = await pgClient.query(`\n        UPDATE releases \n        SET \n          name = COALESCE($1, name),\n          version = COALESCE($2, version),\n          description = COALESCE($3, description),\n          status = COALESCE($4, status),\n          assignee_name = COALESCE($5, assignee_name),\n          scheduled_date = COALESCE($6, scheduled_date),\n          deployed_date = COALESCE($7, deployed_date),\n          updated_at = $8\n        WHERE id = $9\n        RETURNING *\n      `, [\n        updateData.name,\n        updateData.version,\n        updateData.description,\n        updateData.status,\n        updateData.owners?.[0] || null,\n        updateData.startAt,\n        updateData.endAt,\n        now,\n        id\n      ]);\n\n      if (result.rows.length === 0) {\n        return null;\n      }\n\n      const updatedRelease = result.rows[0];\n      \n      return {\n        id: updatedRelease.id,\n        projectId: '1',\n        name: updatedRelease.name,\n        version: updatedRelease.version,\n        description: updatedRelease.description || '',\n        status: updatedRelease.status,\n        startAt: updatedRelease.scheduled_date,\n        endAt: updatedRelease.deployed_date,\n        owners: updatedRelease.assignee_name ? [updatedRelease.assignee_name] : [],\n        watchers: [],\n        tags: [],\n        createdBy: 'system',\n        updatedBy: 'system',\n        createdAt: updatedRelease.created_at,\n        updatedAt: updatedRelease.updated_at,\n        settings: {\n          gateCriteria: {\n            minPassRate: 85,\n            maxFailCritical: 0,\n            zeroBlockers: true,\n            coverageByPriority: {\n              P0: 100,\n              P1: 95,\n              P2: 90\n            }\n          },\n          autoSyncScope: true,\n          allowReopen: false\n        }\n      };\n    } catch (error) {\n      console.error('릴리즈 업데이트 실패:', error);\n      throw error;\n    }\n  }\n\n  // 릴리즈 삭제 (메모리 배열 기반 - deprecated)\n  async delete(id: string): Promise<boolean> {\n    try {\n      await this.deleteRelease(id);\n      return true;\n    } catch (error) {\n      console.error('릴리즈 삭제 실패:', error);\n      return false;\n    }\n  }\n\n  // 상태별 릴리즈 조회\n  async findByStatus(status: Release['status']): Promise<Release[]> {\n    try {\n      const { getPgClient } = await import('../../../infrastructure/database/pgClient');\n      const pgClient = getPgClient();\n      \n      if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n      }\n\n      const result = await pgClient.query(`\n        SELECT \n          id,\n          name,\n          version,\n          description,\n          status,\n          assignee_name,\n          scheduled_date,\n          deployed_date,\n          created_at,\n          updated_at\n        FROM releases\n        WHERE status = $1\n        ORDER BY created_at DESC\n      `, [status]);\n\n      return result.rows.map((row: any) => ({\n        id: row.id,\n        projectId: '1',\n        name: row.name,\n        version: row.version,\n        description: row.description || '',\n        status: row.status,\n        startAt: row.scheduled_date,\n        endAt: row.deployed_date,\n        owners: row.assignee_name ? [row.assignee_name] : [],\n        assignee_name: row.assignee_name,\n        watchers: [],\n        tags: [],\n        createdBy: 'system',\n        updatedBy: 'system',\n        createdAt: row.created_at,\n        updatedAt: row.updated_at,\n        settings: {\n          gateCriteria: {\n            minPassRate: 85,\n            maxFailCritical: 0,\n            zeroBlockers: true,\n            coverageByPriority: {\n              P0: 100,\n              P1: 95,\n              P2: 90\n            }\n          },\n          autoSyncScope: true,\n          allowReopen: false\n        }\n      }));\n    } catch (error) {\n      console.error('상태별 릴리즈 조회 실패:', error);\n      return [];\n    }\n  }\n\n  // 검색어로 릴리즈 조회\n  async search(query: string): Promise<Release[]> {\n    try {\n      const { getPgClient } = await import('../../../infrastructure/database/pgClient');\n      const pgClient = getPgClient();\n      \n      if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n      }\n\n      const searchPattern = `%${query}%`;\n      \n      const result = await pgClient.query(`\n        SELECT \n          id,\n          name,\n          version,\n          description,\n          status,\n          assignee_name,\n          scheduled_date,\n          deployed_date,\n          created_at,\n          updated_at\n        FROM releases\n        WHERE \n          name ILIKE $1 OR \n          description ILIKE $1 OR \n          version ILIKE $1\n        ORDER BY created_at DESC\n      `, [searchPattern]);\n\n      return result.rows.map((row: any) => ({\n        id: row.id,\n        projectId: '1',\n        name: row.name,\n        version: row.version,\n        description: row.description || '',\n        status: row.status,\n        startAt: row.scheduled_date,\n        endAt: row.deployed_date,\n        owners: row.assignee_name ? [row.assignee_name] : [],\n        assignee_name: row.assignee_name,\n        watchers: [],\n        tags: [],\n        createdBy: 'system',\n        updatedBy: 'system',\n        createdAt: row.created_at,\n        updatedAt: row.updated_at,\n        settings: {\n          gateCriteria: {\n            minPassRate: 85,\n            maxFailCritical: 0,\n            zeroBlockers: true,\n            coverageByPriority: {\n              P0: 100,\n              P1: 95,\n              P2: 90\n            }\n          },\n          autoSyncScope: true,\n          allowReopen: false\n        }\n      }));\n    } catch (error) {\n      console.error('릴리즈 검색 실패:', error);\n      return [];\n    }\n  }\n\n  // 릴리즈 스코프 업데이트\n  async updateScope(releaseId: string, scope: ReleaseScope): Promise<Release | null> {\n    const release = await this.findById(releaseId);\n    if (!release) return null;\n\n    // 실제로는 ReleaseScope 엔티티를 업데이트하는 로직이 필요\n    return this.update(releaseId, { updatedAt: new Date().toISOString() });\n  }\n\n  // 릴리즈 케이스 추가\n  async addCase(releaseId: string, releaseCase: ReleaseCase): Promise<Release | null> {\n    const release = await this.findById(releaseId);\n    if (!release) return null;\n\n    // 실제로는 ReleaseCase를 추가하는 로직이 필요\n    return this.update(releaseId, { updatedAt: new Date().toISOString() });\n  }\n\n  // 릴리즈 케이스 업데이트\n  async updateCase(releaseId: string, caseId: string, updates: Partial<ReleaseCase>): Promise<Release | null> {\n    const release = await this.findById(releaseId);\n    if (!release) return null;\n\n    // 실제로는 ReleaseCase를 업데이트하는 로직이 필요\n    return this.update(releaseId, { updatedAt: new Date().toISOString() });\n  }\n\n  // 실행 결과 저장\n  async saveRun(releaseId: string, run: Run): Promise<Release | null> {\n    const release = await this.findById(releaseId);\n    if (!release) return null;\n\n    // 실제로는 Run을 저장하는 로직이 필요\n    return this.update(releaseId, { updatedAt: new Date().toISOString() });\n  }\n\n  // 결함 링크 추가\n  async addDefectLink(releaseId: string, defectLink: DefectLink): Promise<Release | null> {\n    const release = await this.findById(releaseId);\n    if (!release) return null;\n\n    // 실제로는 DefectLink를 추가하는 로직이 필요\n    return this.update(releaseId, { updatedAt: new Date().toISOString() });\n  }\n\n  // 환경 정보 업데이트\n  async updateEnvironment(releaseId: string, environment: Environment): Promise<Release | null> {\n    const release = await this.findById(releaseId);\n    if (!release) return null;\n\n    // 실제로는 Environment를 업데이트하는 로직이 필요\n    return this.update(releaseId, { updatedAt: new Date().toISOString() });\n  }\n\n  // 게이트 기준 업데이트\n  async updateGateCriteria(releaseId: string, gateCriteria: Release['settings']['gateCriteria']): Promise<Release | null> {\n    const release = await this.findById(releaseId);\n    if (!release) return null;\n\n    return this.update(releaseId, {\n      settings: {\n        ...release.settings,\n        gateCriteria\n      }\n    });\n  }\n\n  // 릴리즈 테스트 케이스 조회\n  async getTestCases(releaseId: string): Promise<any[]> {\n    try {\n      const { getPgClient } = await import('../../../infrastructure/database/pgClient');\n      const pgClient = getPgClient();\n      \n      if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n      }\n\n      // release_test_cases 테이블과 testcases 테이블을 조인하여 모든 상세 정보 조회\n      const result = await pgClient.query(`\n        SELECT \n          tc.id,\n          tc.title,\n          tc.prereq as description,\n          tc.steps,\n          tc.expected,\n          tc.priority,\n          tc.status,\n          tc.created_by,\n          tc.created_at,\n          tc.updated_at,\n          rtc.status as execution_status,\n          rtc.assignee_name as assigned_to,\n          rtc.executed_at,\n          tc.folder_id\n        FROM testcases tc\n        INNER JOIN release_test_cases rtc ON tc.id = rtc.test_case_id\n        WHERE rtc.release_id = $1\n        ORDER BY tc.id\n      `, [releaseId]);\n\n      return result.rows.map((row: any) => ({\n        id: row.id,\n        title: row.title,\n        description: row.description || '',\n        steps: row.steps || '',\n        expected: row.expected || '',\n        priority: row.priority,\n        status: row.status,\n        createdBy: row.created_by,\n        createdAt: row.created_at,\n        updatedAt: row.updated_at,\n        executionStatus: row.execution_status,\n        assignedTo: row.assigned_to,\n        executedAt: row.executed_at,\n        executedBy: '', // executed_by 컬럼이 없으므로 빈 문자열로 설정\n        folderId: row.folder_id\n      }));\n    } catch (error) {\n      console.error('릴리즈 테스트 케이스 조회 실패:', error);\n      // 에러 발생 시 빈 배열 반환\n      return [];\n    }\n  }\n\n  // 릴리즈 테스트케이스 삭제\n  async deleteTestCases(releaseId: string): Promise<void> {\n    try {\n      const { getPgClient } = await import('../../../infrastructure/database/pgClient');\n      const pgClient = getPgClient();\n      \n      if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n      }\n\n      // 릴리즈에 연결된 모든 테스트케이스 삭제\n      await pgClient.query(`\n        DELETE FROM release_test_cases\n        WHERE release_id = $1\n      `, [releaseId]);\n\n      console.log(`릴리즈 ${releaseId}의 모든 테스트케이스가 삭제되었습니다.`);\n    } catch (error) {\n      console.error('릴리즈 테스트케이스 삭제 실패:', error);\n      throw error;\n    }\n  }\n\n  // 특정 테스트케이스들 삭제\n  async deleteSpecificTestCases(releaseId: string, testCaseIds: string[]): Promise<void> {\n    try {\n      const { getPgClient } = await import('../../../infrastructure/database/pgClient');\n      const pgClient = getPgClient();\n      \n      if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n      }\n\n      if (testCaseIds.length === 0) {\n        return;\n      }\n\n      // 릴리즈에서 특정 테스트케이스들 삭제\n      // testCaseIds를 정수 배열로 변환\n      const testCaseIdsAsIntegers = testCaseIds.map(id => parseInt(id, 10));\n      await pgClient.query(`\n        DELETE FROM release_test_cases\n        WHERE release_id = $1 AND test_case_id = ANY($2::integer[])\n      `, [releaseId, testCaseIdsAsIntegers]);\n\n      console.log(`릴리즈 ${releaseId}에서 ${testCaseIds.length}개의 테스트케이스가 삭제되었습니다.`);\n    } catch (error) {\n      console.error('특정 테스트케이스 삭제 실패:', error);\n      throw error;\n    }\n  }\n\n  // 테스트케이스 상태 변경\n  async updateTestCaseStatus(releaseId: string, testCaseId: string, status: string, comment?: string): Promise<any> {\n    try {\n      const { getPgClient } = await import('../../../infrastructure/database/pgClient');\n      const pgClient = getPgClient();\n      \n      if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n      }\n\n      console.log('=== updateTestCaseStatus called ===');\n      console.log('Parameters:', { releaseId, testCaseId, status, comment });\n      console.log('Status received (already mapped):', status);\n\n      // release_test_cases 테이블에서 상태 업데이트\n      const updateQuery = `\n        UPDATE release_test_cases\n        SET status = $1, updated_at = CURRENT_TIMESTAMP\n        WHERE release_id = $2 AND test_case_id = $3\n        RETURNING *\n      `;\n      \n      console.log('Update query:', updateQuery);\n      console.log('Update parameters:', [status, releaseId, testCaseId]);\n\n      const result = await pgClient.query(updateQuery, [status, releaseId, testCaseId]);\n\n      if (result.rows.length === 0) {\n        throw new Error('테스트케이스를 찾을 수 없습니다.');\n      }\n\n      console.log('Update result:', result.rows[0]);\n\n      // 실행 기록 추가 (executions 테이블) - 안전한 upsert 처리\n      try {\n        // 먼저 INSERT 시도\n        const insertQuery = `\n          INSERT INTO executions (\n            release_id, testcase_id, status, executed_by, executed_at, comments, created_at, updated_at\n          ) VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP, $5, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)\n        `;\n        \n        await pgClient.query(insertQuery, [releaseId, testCaseId, status, 'system', comment || '']);\n        console.log(`새로운 실행 기록 생성: release_id=${releaseId}, testcase_id=${testCaseId}`);\n      } catch (insertError: any) {\n        // UNIQUE 제약 조건 위반인 경우 UPDATE 수행\n        if (insertError.code === '23505') { // unique_violation\n          const updateQuery = `\n            UPDATE executions \n            SET \n              status = $1,\n              executed_by = $2,\n              executed_at = CURRENT_TIMESTAMP,\n              comments = $3,\n              updated_at = CURRENT_TIMESTAMP\n            WHERE release_id = $4 AND testcase_id = $5\n          `;\n          \n          await pgClient.query(updateQuery, [status, 'system', comment || '', releaseId, testCaseId]);\n          console.log(`기존 실행 기록 업데이트: release_id=${releaseId}, testcase_id=${testCaseId}`);\n        } else {\n          throw insertError;\n        }\n      }\n\n      console.log(`=== 테스트케이스 ${testCaseId} 상태가 ${status}로 변경되었습니다. ===`);\n      \n      return result.rows[0];\n    } catch (error) {\n      console.error('=== 테스트케이스 상태 변경 실패 ===');\n      console.error('Error details:', error);\n      throw error;\n    }\n  }\n\n  // 테스트 폴더 조회\n  async getTestFolders(): Promise<any[]> {\n    try {\n      const { getPgClient } = await import('../../../infrastructure/database/pgClient');\n      const pgClient = getPgClient();\n      \n      if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n      }\n  \n      // folders 테이블과 tree_nodes 테이블에서 폴더 구조를 가져오는 쿼리 (중복 제거)\n      const result = await pgClient.query(`\n        WITH RECURSIVE folders_tree AS (\n          -- folders 테이블의 루트 폴더들\n          SELECT \n            id,\n            name,\n            description,\n            parent_id,\n            created_by,\n            created_at,\n            updated_at,\n            0 as depth,\n            ARRAY[id] as path,\n            'folders' as source_table\n          FROM folders \n          WHERE parent_id IS NULL\n          \n          UNION ALL\n          \n          -- folders 테이블의 하위 폴더들\n          SELECT \n            f.id,\n            f.name,\n            f.description,\n            f.parent_id,\n            f.created_by,\n            f.created_at,\n            f.updated_at,\n            ft.depth + 1,\n            ft.path || f.id,\n            'folders' as source_table\n          FROM folders f\n          INNER JOIN folders_tree ft ON f.parent_id = ft.id\n        ),\n        tree_nodes_tree AS (\n          -- tree_nodes 테이블의 루트 폴더들\n          SELECT \n            id,\n            name,\n            '' as description,\n            parent_id,\n            created_by,\n            created_at,\n            updated_at,\n            0 as depth,\n            ARRAY[id] as path,\n            'tree_nodes' as source_table\n          FROM tree_nodes \n          WHERE type = 'folder' AND parent_id IS NULL\n          \n          UNION ALL\n          \n          -- tree_nodes 테이블의 하위 폴더들\n          SELECT \n            tn.id,\n            tn.name,\n            '' as description,\n            tn.parent_id,\n            tn.created_by,\n            tn.created_at,\n            tn.updated_at,\n            tnt.depth + 1,\n            tnt.path || tn.id,\n            'tree_nodes' as source_table\n          FROM tree_nodes tn\n          INNER JOIN tree_nodes_tree tnt ON tn.parent_id = tnt.id\n          WHERE tn.type = 'folder'\n        ),\n        combined_folders AS (\n          -- tree_nodes 테이블의 폴더들을 우선시하고, 중복되지 않는 folders 테이블의 폴더들 추가\n          SELECT * FROM tree_nodes_tree\n          UNION ALL\n          SELECT * FROM folders_tree ft\n          WHERE NOT EXISTS (\n            SELECT 1 FROM tree_nodes_tree tnt WHERE tnt.id = ft.id\n          )\n        )\n        SELECT\n          id,\n          name,\n          description,\n          parent_id,\n          created_by,\n          created_at,\n          updated_at,\n          depth,\n          path,\n          source_table\n        FROM combined_folders\n        ORDER BY path\n      `);\n\n      const folders = result.rows;\n\n      // 각 폴더에 대해 테스트케이스 개수 계산\n      for (const folder of folders) {\n        if (folder.source_table === 'folders') {\n          // folders 테이블의 폴더인 경우 - 해당 폴더의 직접적인 테스트케이스만 계산\n          const testCaseCountResult = await pgClient.query(`\n            SELECT COUNT(*) as count\n            FROM testcases \n            WHERE folder_id = $1\n          `, [folder.id]);\n          \n          folder.testCaseCount = parseInt(testCaseCountResult.rows[0]?.count || '0');\n        } else {\n          // tree_nodes 테이블의 폴더인 경우 - 해당 폴더의 직접적인 테스트케이스만 계산\n          const testCaseCountResult = await pgClient.query(`\n            SELECT \n              (SELECT COUNT(*) FROM tree_nodes WHERE type = 'testcase' AND parent_id = $1) +\n              (SELECT COUNT(*) FROM testcases WHERE folder_id = $1) as count\n          `, [folder.id]);\n          \n          folder.testCaseCount = parseInt(testCaseCountResult.rows[0]?.count || '0');\n        }\n      }\n\n      return folders;\n    } catch (error) {\n      console.error('테스트 폴더 조회 실패:', error);\n      throw error;\n    }\n  }\n\n  // 폴더별 테스트케이스 조회\n  async getFolderTestCases(folderId: string): Promise<any[]> {\n    try {\n      const { getPgClient } = await import('../../../infrastructure/database/pgClient');\n      const pgClient = getPgClient();\n      \n      if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n      }\n\n      // 먼저 해당 폴더가 어떤 테이블에 있는지 확인\n      const folderCheckResult = await pgClient.query(`\n        SELECT 'folders' as source_table FROM folders WHERE id = $1\n        UNION ALL\n        SELECT 'tree_nodes' as source_table FROM tree_nodes WHERE id = $1 AND type = 'folder'\n      `, [folderId]);\n\n      if (folderCheckResult.rows.length === 0) {\n        return [];\n      }\n\n      const sourceTable = folderCheckResult.rows[0].source_table;\n      let result;\n\n      if (sourceTable === 'folders') {\n        // folders 테이블의 폴더인 경우\n        result = await pgClient.query(`\n          SELECT \n            id,\n            title,\n            prereq as description,\n            priority,\n            status,\n            created_by,\n            created_at,\n            updated_at,\n            folder_id as folderId\n          FROM testcases \n          WHERE folder_id = $1\n          ORDER BY sort_order, id\n        `, [folderId]);\n      } else {\n        // tree_nodes 테이블의 폴더인 경우 - testcases 테이블에서 조회\n        result = await pgClient.query(`\n          SELECT \n            id,\n            title,\n            prereq as description,\n            priority,\n            status,\n            created_by,\n            created_at,\n            updated_at,\n            folder_id as folderId\n          FROM testcases \n          WHERE folder_id = $1\n          ORDER BY sort_order, id\n        `, [folderId]);\n      }\n\n      return result.rows.map((row: any) => ({\n        id: row.id,\n        title: row.title,\n        description: row.description,\n        priority: row.priority,\n        status: row.status,\n        createdBy: row.created_by,\n        createdAt: row.created_at,\n        updatedAt: row.updated_at,\n        folderId: row.folderid\n      }));\n    } catch (error) {\n      console.error('폴더 테스트케이스 조회 실패:', error);\n      return [];\n    }\n  }\n\n  // 릴리즈에 테스트케이스 추가\n  async addTestCasesToRelease(releaseId: string, testCaseIds: number[]): Promise<any> {\n    try {\n      const { getPgClient } = await import('../../../infrastructure/database/pgClient');\n      const pgClient = getPgClient();\n      \n      if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n      }\n\n      // 트랜잭션 시작\n      await pgClient.query('BEGIN');\n\n      const addedTestCases = [];\n      \n      for (const testCaseId of testCaseIds) {\n        try {\n          // 먼저 테스트케이스 정보 조회\n          const testCaseResult = await pgClient.query(\n            'SELECT id, title, priority, status FROM testcases WHERE id = $1',\n            [testCaseId]\n          );\n\n          if (testCaseResult.rows.length === 0) {\n            console.warn(`테스트케이스 ${testCaseId}를 찾을 수 없습니다.`);\n            continue;\n          }\n\n          const testCase = testCaseResult.rows[0];\n\n          // 이미 추가된 테스트케이스인지 확인\n          const existingResult = await pgClient.query(\n            'SELECT id FROM release_test_cases WHERE release_id = $1 AND test_case_id = $2',\n            [releaseId, testCaseId]\n          );\n\n          if (existingResult.rows.length === 0) {\n            // 릴리즈에 테스트케이스 추가\n            const insertResult = await pgClient.query(\n              `INSERT INTO release_test_cases (release_id, test_case_id, test_case_name, status, created_at, updated_at)\n               VALUES ($1, $2, $3, 'NOT_EXECUTED', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)\n               RETURNING *`,\n              [releaseId, testCaseId, testCase.title]\n            );\n\n            addedTestCases.push({\n              ...insertResult.rows[0],\n              testCase: testCase\n            });\n          } else {\n            // 이미 존재하는 테스트케이스도 카운트에 포함\n            const existingTestCase = existingResult.rows[0];\n            addedTestCases.push({\n              ...existingTestCase,\n              testCase: testCase\n            });\n          }\n        } catch (error) {\n          console.error(`테스트케이스 ${testCaseId} 추가 실패:`, error);\n        }\n      }\n\n      // 트랜잭션 커밋\n      await pgClient.query('COMMIT');\n\n      return {\n        addedCount: addedTestCases.length,\n        testCases: addedTestCases\n      };\n    } catch (error) {\n      console.error('릴리즈에 테스트케이스 추가 실패:', error);\n      throw error;\n    }\n  }\n\n  // 통계 정보 조회\n  async getStatistics(releaseId: string): Promise<{\n    totalCases: number;\n    passedCases: number;\n    failedCases: number;\n    blockedCases: number;\n    notRunCases: number;\n    passRate: number;\n    progress: number;\n  } | null> {\n    const release = await this.findById(releaseId);\n    if (!release) return null;\n\n    // 임시 통계 데이터 (실제로는 ReleaseCase 데이터를 기반으로 계산)\n    return {\n      totalCases: 127,\n      passedCases: 108,\n      failedCases: 19,\n      blockedCases: 3,\n      notRunCases: 15,\n      passRate: 85,\n      progress: 88\n    };\n  }\n\n  // 릴리즈 실행 통계 조회\n  async getExecutionStats(releaseId: string): Promise<{\n    planned: number;\n    executed: number;\n    passed: number;\n    failed: number;\n    blocked: number;\n    skipped: number;\n    passRate: number;\n  }> {\n    try {\n      const { getPgClient } = await import('../../../infrastructure/database/pgClient');\n      const pgClient = getPgClient();\n      \n      if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n      }\n\n      // 릴리즈에 연결된 테스트케이스들의 실행 상태를 조회\n      const result = await pgClient.query(`\n        SELECT \n          COUNT(*) as total,\n          COUNT(CASE WHEN status = 'Pass' THEN 1 END) as passed,\n          COUNT(CASE WHEN status = 'Fail' THEN 1 END) as failed,\n          COUNT(CASE WHEN status IN ('Block', 'Blocked') THEN 1 END) as blocked,\n          COUNT(CASE WHEN status = 'Skip' THEN 1 END) as skipped,\n          COUNT(CASE WHEN status = 'NOT_EXECUTED' THEN 1 END) as notRun\n        FROM release_test_cases\n        WHERE release_id = $1::uuid\n      `, [releaseId]);\n\n      const stats = result.rows[0];\n      const total = parseInt(stats.total) || 0;\n      const passed = parseInt(stats.passed) || 0;\n      const failed = parseInt(stats.failed) || 0;\n      const blocked = parseInt(stats.blocked) || 0;\n      const skipped = parseInt(stats.skipped) || 0;\n      const notRun = parseInt(stats.notRun) || 0;\n      const executed = total - notRun;\n      const passRate = executed > 0 ? Math.round((passed / executed) * 100) : 0;\n\n      console.log('=== 실행 통계 계산 ===');\n      console.log('releaseId:', releaseId);\n      console.log('raw stats:', stats);\n      console.log('calculated values:', {\n        total,\n        passed,\n        failed,\n        blocked,\n        skipped,\n        notRun,\n        executed,\n        passRate\n      });\n\n      return {\n        planned: total,\n        executed,\n        passed,\n        failed,\n        blocked,\n        skipped,\n        passRate\n      };\n    } catch (error) {\n      console.error('실행 통계 조회 실패:', error);\n      \n      // 에러 시 0개 반환 (실시간 동기화를 위해)\n      return {\n        planned: 0,\n        executed: 0,\n        passed: 0,\n        failed: 0,\n        blocked: 0,\n        skipped: 0,\n        passRate: 0\n      };\n    }\n  }\n\n  // 릴리즈 실행 통계 업데이트\n  async updateExecutionStats(releaseId: string, plannedCount: number): Promise<{\n    planned: number;\n    executed: number;\n    passed: number;\n    failed: number;\n    blocked: number;\n    skipped: number;\n    passRate: number;\n  }> {\n    try {\n      const { getPgClient } = await import('../../../infrastructure/database/pgClient');\n      const pgClient = getPgClient();\n      \n      if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n      }\n\n      // release_test_cases 테이블에서 실행 상태 조회\n      const result = await pgClient.query(`\n        SELECT \n          COUNT(CASE WHEN status = 'Pass' THEN 1 END) as passed,\n          COUNT(CASE WHEN status = 'Fail' THEN 1 END) as failed,\n          COUNT(CASE WHEN status IN ('Block', 'Blocked') THEN 1 END) as blocked,\n          COUNT(CASE WHEN status = 'Skip' THEN 1 END) as skipped,\n          COUNT(CASE WHEN status = 'Not Run' THEN 1 END) as notRun\n        FROM release_test_cases\n        WHERE release_id = $1\n      `, [releaseId]);\n\n      const stats = result.rows[0];\n      const passed = parseInt(stats.passed) || 0;\n      const failed = parseInt(stats.failed) || 0;\n      const blocked = parseInt(stats.blocked) || 0;\n      const skipped = parseInt(stats.skipped) || 0;\n      const notRun = parseInt(stats.notRun) || 0;\n      const executed = plannedCount - notRun;\n      const passRate = executed > 0 ? Math.round((passed / executed) * 100) : 0;\n\n      return {\n        planned: plannedCount,\n        executed,\n        passed,\n        failed,\n        blocked,\n        skipped,\n        passRate\n      };\n    } catch (error) {\n      console.error('실행 통계 업데이트 실패:', error);\n      \n      // 에러 시 기본값 반환\n      return {\n        planned: plannedCount,\n        executed: 0,\n        passed: 0,\n        failed: 0,\n        blocked: 0,\n        skipped: 0,\n        passRate: 0\n      };\n    }\n  }\n\n  // 릴리즈에 가져온 폴더 목록 조회\n  async getImportedFolders(releaseId: string): Promise<any[]> {\n    try {\n      const { getPgClient } = await import('../../../infrastructure/database/pgClient');\n      const pgClient = getPgClient();\n      \n      if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n      }\n\n      const result = await pgClient.query(`\n        SELECT \n          id,\n          release_id,\n          folder_id,\n          folder_name,\n          parent_id,\n          test_case_count,\n          created_at,\n          updated_at\n        FROM release_imported_folders\n        WHERE release_id = $1\n        ORDER BY created_at ASC\n      `, [releaseId]);\n\n      return result.rows.map((row: any) => ({\n        id: row.id,\n        releaseId: row.release_id,\n        folderId: row.folder_id,\n        name: row.folder_name,\n        parentId: row.parent_id,\n        testCaseCount: row.test_case_count,\n        createdAt: row.created_at,\n        updatedAt: row.updated_at\n      }));\n    } catch (error) {\n      console.error('가져온 폴더 목록 조회 실패:', error);\n      return [];\n    }\n  }\n\n  // 릴리즈에 폴더 추가\n  async addImportedFolders(releaseId: string, folders: any[]): Promise<any[]> {\n    try {\n      const { getPgClient } = await import('../../../infrastructure/database/pgClient');\n      const pgClient = getPgClient();\n      \n      if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n      }\n\n      const addedFolders = [];\n\n      for (const folder of folders) {\n        // 중복 체크\n        const existingResult = await pgClient.query(`\n          SELECT id FROM release_imported_folders \n          WHERE release_id = $1 AND folder_id = $2\n        `, [releaseId, folder.folder_id]);\n\n        if (existingResult.rows.length === 0) {\n          // 새 폴더 추가\n          const result = await pgClient.query(`\n            INSERT INTO release_imported_folders \n            (release_id, folder_id, folder_name, parent_id, test_case_count)\n            VALUES ($1, $2, $3, $4, $5)\n            RETURNING *\n          `, [\n            releaseId,\n            folder.folder_id,\n            folder.folder_name,\n            folder.parent_id || null,\n            folder.test_case_count || 0\n          ]);\n\n          addedFolders.push(result.rows[0]);\n        }\n      }\n\n      return addedFolders;\n    } catch (error) {\n      console.error('폴더 추가 실패:', error);\n      throw error;\n    }\n  }\n\n  // 릴리즈에서 폴더 제거\n  async removeImportedFolder(releaseId: string, folderId: number): Promise<void> {\n    try {\n      const { getPgClient } = await import('../../../infrastructure/database/pgClient');\n      const pgClient = getPgClient();\n      \n      if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n      }\n\n      await pgClient.query(`\n        DELETE FROM release_imported_folders \n        WHERE release_id = $1 AND folder_id = $2\n      `, [releaseId, folderId]);\n\n    } catch (error) {\n      console.error('폴더 제거 실패:', error);\n      throw error;\n    }\n  }\n\n  // 릴리즈 삭제\n  async deleteRelease(id: string): Promise<void> {\n    try {\n      const { getPgClient } = await import('../../../infrastructure/database/pgClient');\n      const pgClient = getPgClient();\n      \n      if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n      }\n\n      // 릴리즈와 관련된 데이터들을 먼저 삭제 (존재하는 테이블만)\n      await pgClient.query('DELETE FROM release_imported_folders WHERE release_id = $1', [id]);\n      await pgClient.query('DELETE FROM release_test_cases WHERE release_id = $1', [id]);\n      \n      // 마지막으로 릴리즈 삭제\n      const result = await pgClient.query('DELETE FROM releases WHERE id = $1', [id]);\n      \n      if (result.rowCount === 0) {\n        throw new Error('삭제할 릴리즈를 찾을 수 없습니다.');\n      }\n\n    } catch (error) {\n      console.error('릴리즈 삭제 실패:', error);\n      throw error;\n    }\n  }\n\n  // 초기 데이터 로드 (개발용)\n  async loadInitialData(): Promise<void> {\n    // 데이터베이스에 이미 데이터가 있는지 확인\n    const existingReleases = await this.findAll();\n    if (existingReleases.length > 0) return; // 이미 데이터가 있으면 스킵\n\n    const initialReleases: Omit<Release, 'id' | 'createdAt' | 'updatedAt'>[] = [\n      {\n        projectId: '1',\n        name: '2024.12.0 릴리즈',\n        version: '2024.12.0',\n        description: '2024년 12월 정기 릴리즈',\n        status: 'Active',\n        startAt: '2024-12-01',\n        endAt: '2024-12-15',\n        owners: ['user1'],\n        watchers: ['user2', 'user3'],\n        tags: ['정기', '중요'],\n        createdBy: 'user1',\n        updatedBy: 'user1',\n        settings: {\n          gateCriteria: {\n            minPassRate: 85,\n            maxFailCritical: 0,\n            zeroBlockers: true,\n            coverageByPriority: {\n              P0: 100,\n              P1: 95,\n              P2: 90\n            }\n          },\n          autoSyncScope: true,\n          allowReopen: false\n        }\n      },\n      {\n        projectId: '1',\n        name: '2024.11.1 핫픽스',\n        version: '2024.11.1',\n        description: '긴급 버그 수정 릴리즈',\n        status: 'Complete',\n        startAt: '2024-11-15',\n        endAt: '2024-11-20',\n        owners: ['user2'],\n        watchers: ['user1'],\n        tags: ['핫픽스', '긴급'],\n        createdBy: 'user2',\n        updatedBy: 'user2',\n        settings: {\n          gateCriteria: {\n            minPassRate: 90,\n            maxFailCritical: 0,\n            zeroBlockers: true,\n            coverageByPriority: {\n              P0: 100,\n              P1: 100,\n              P2: 95\n            }\n          },\n          autoSyncScope: false,\n          allowReopen: true\n        }\n      }\n    ];\n\n    for (const releaseData of initialReleases) {\n      await this.create(releaseData);\n    }\n  }\n}\n\nexport const releaseRepository = new ReleaseRepository();"],"version":3}