4b3d28703ceb67824ac8a2ee8c936cf5
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// Mock API hooks
jest.mock('../src/renderer/services/api', () => ({
    api: {
        reducerPath: 'api',
        reducer: (state = {}, action) => state,
        middleware: () => (next) => (action) => next(action),
    },
    useGetReleaseTestCasesQuery: jest.fn(() => ({
        data: { data: [] },
        isLoading: false,
        error: null,
        refetch: jest.fn(),
    })),
    useUpdateReleaseExecutionStatsMutation: jest.fn(() => [jest.fn()]),
    useGetReleaseExecutionStatsQuery: jest.fn(() => ({
        data: { data: { total: 0, passed: 0, failed: 0, blocked: 0, skipped: 0, planned: 0, passRate: 0 } },
        isLoading: false,
        error: null,
        refetch: jest.fn(),
    })),
    useUpdateTestCaseStatusMutation: jest.fn(() => [jest.fn()]),
    useGetTestFoldersQuery: jest.fn(() => ({ data: [] })),
    useGetImportedFoldersQuery: jest.fn(() => ({ data: [], refetch: jest.fn() })),
    useAddImportedFoldersMutation: jest.fn(() => [jest.fn()]),
    useRemoveImportedFolderMutation: jest.fn(() => [jest.fn()]),
}));
const react_1 = require("@testing-library/react");
const react_redux_1 = require("react-redux");
const toolkit_1 = require("@reduxjs/toolkit");
// Mock ExecutionView component
const MockExecutionView = () => {
    return ((0, jsx_runtime_1.jsxs)("div", { "data-testid": "execution-view", children: [(0, jsx_runtime_1.jsx)("h1", { children: "Execution View" }), (0, jsx_runtime_1.jsxs)("div", { "data-testid": "test-cases-container", children: [(0, jsx_runtime_1.jsx)("div", { "data-testid": "test-case-1", children: "Test Case 1" }), (0, jsx_runtime_1.jsx)("div", { "data-testid": "test-case-2", children: "Test Case 2" })] }), (0, jsx_runtime_1.jsx)("div", { "data-testid": "status-dropdown", children: (0, jsx_runtime_1.jsx)("button", { "data-testid": "status-button", children: "Inactive" }) })] }));
};
// Mock store
const createMockStore = () => {
    return (0, toolkit_1.configureStore)({
        reducer: {
            api: (state = {}, action) => state,
        },
        middleware: (getDefaultMiddleware) => getDefaultMiddleware(),
    });
};
describe('ExecutionView Component (Simple)', () => {
    let mockStore;
    beforeEach(() => {
        mockStore = createMockStore();
        jest.clearAllMocks();
    });
    const renderExecutionView = () => {
        return (0, react_1.render)((0, jsx_runtime_1.jsx)(react_redux_1.Provider, { store: mockStore, children: (0, jsx_runtime_1.jsx)(MockExecutionView, {}) }));
    };
    describe('기본 렌더링', () => {
        it('컴포넌트가 정상적으로 렌더링되어야 한다', () => {
            renderExecutionView();
            expect(react_1.screen.getByTestId('execution-view')).toBeInTheDocument();
            expect(react_1.screen.getByText('Execution View')).toBeInTheDocument();
        });
        it('테스트케이스 목록이 표시되어야 한다', () => {
            renderExecutionView();
            expect(react_1.screen.getByTestId('test-cases-container')).toBeInTheDocument();
            expect(react_1.screen.getByTestId('test-case-1')).toBeInTheDocument();
            expect(react_1.screen.getByTestId('test-case-2')).toBeInTheDocument();
        });
        it('상태 드롭다운이 표시되어야 한다', () => {
            renderExecutionView();
            expect(react_1.screen.getByTestId('status-dropdown')).toBeInTheDocument();
            expect(react_1.screen.getByTestId('status-button')).toBeInTheDocument();
            expect(react_1.screen.getByText('Inactive')).toBeInTheDocument();
        });
    });
    describe('API 통합', () => {
        it('API 훅들이 호출되어야 한다', () => {
            const { useGetReleaseTestCasesQuery, useGetReleaseExecutionStatsQuery } = require('../src/renderer/services/api');
            renderExecutionView();
            expect(useGetReleaseTestCasesQuery).toHaveBeenCalled();
            expect(useGetReleaseExecutionStatsQuery).toHaveBeenCalled();
        });
    });
    describe('상태 관리', () => {
        it('Redux store가 정상적으로 설정되어야 한다', () => {
            renderExecutionView();
            // Provider가 정상적으로 렌더링되었는지 확인
            expect(react_1.screen.getByTestId('execution-view')).toBeInTheDocument();
        });
    });
});
// API/DB 중심 동작 테스트
describe('API/DB 중심 동작', () => {
    it('API 데이터를 우선적으로 사용해야 한다', () => {
        const { useGetReleaseTestCasesQuery } = require('../src/renderer/services/api');
        // API 데이터가 있는 경우
        useGetReleaseTestCasesQuery.mockReturnValue({
            data: {
                data: [
                    { id: '1', title: 'API Test Case 1', status: 'Pass' },
                    { id: '2', title: 'API Test Case 2', status: 'Fail' }
                ]
            },
            isLoading: false,
            error: null,
            refetch: jest.fn(),
        });
        (0, react_1.render)((0, jsx_runtime_1.jsx)(react_redux_1.Provider, { store: createMockStore(), children: (0, jsx_runtime_1.jsx)(MockExecutionView, {}) }));
        // API 데이터가 우선적으로 사용되는지 확인
        expect(useGetReleaseTestCasesQuery).toHaveBeenCalled();
    });
    it('API 에러 시 적절한 처리가 되어야 한다', () => {
        const { useGetReleaseTestCasesQuery } = require('../src/renderer/services/api');
        // API 에러 시뮬레이션
        useGetReleaseTestCasesQuery.mockReturnValue({
            data: undefined,
            isLoading: false,
            error: { message: 'API Error' },
            refetch: jest.fn(),
        });
        (0, react_1.render)((0, jsx_runtime_1.jsx)(react_redux_1.Provider, { store: createMockStore(), children: (0, jsx_runtime_1.jsx)(MockExecutionView, {}) }));
        // 에러 상태에서도 컴포넌트가 렌더링되는지 확인
        expect(react_1.screen.getByTestId('execution-view')).toBeInTheDocument();
    });
});
// 실시간 동기화 테스트
describe('실시간 동기화', () => {
    it('폴링 설정이 올바르게 되어야 한다', () => {
        const { useGetReleaseTestCasesQuery } = require('../src/renderer/services/api');
        (0, react_1.render)((0, jsx_runtime_1.jsx)(react_redux_1.Provider, { store: createMockStore(), children: (0, jsx_runtime_1.jsx)(MockExecutionView, {}) }));
        // 폴링 설정 확인 (실제로는 RTK Query가 내부적으로 처리)
        expect(useGetReleaseTestCasesQuery).toHaveBeenCalled();
    });
});
// 에러 처리 테스트
describe('에러 처리', () => {
    it('API 에러 시 컴포넌트가 계속 렌더링되어야 한다', () => {
        const { useGetReleaseTestCasesQuery } = require('../src/renderer/services/api');
        // API 에러 시뮬레이션
        useGetReleaseTestCasesQuery.mockReturnValue({
            data: undefined,
            isLoading: false,
            error: { message: 'Network Error' },
            refetch: jest.fn(),
        });
        (0, react_1.render)((0, jsx_runtime_1.jsx)(react_redux_1.Provider, { store: createMockStore(), children: (0, jsx_runtime_1.jsx)(MockExecutionView, {}) }));
        // 에러 상태에서도 컴포넌트가 정상적으로 렌더링되는지 확인
        expect(react_1.screen.getByTestId('execution-view')).toBeInTheDocument();
        expect(react_1.screen.getByText('Execution View')).toBeInTheDocument();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,