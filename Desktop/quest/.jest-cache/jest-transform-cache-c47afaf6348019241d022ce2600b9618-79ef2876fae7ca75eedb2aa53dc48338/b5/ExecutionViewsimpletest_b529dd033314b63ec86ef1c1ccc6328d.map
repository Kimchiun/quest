{"file":"/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/tests/ExecutionView.simple.test.tsx","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Documents/quest/Desktop/quest/tests/ExecutionView.simple.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport { Provider } from 'react-redux';\nimport { configureStore } from '@reduxjs/toolkit';\n\n// Mock API hooks\njest.mock('../src/renderer/services/api', () => ({\n  api: {\n    reducerPath: 'api',\n    reducer: (state = {}, action: any) => state,\n    middleware: () => (next: any) => (action: any) => next(action),\n  },\n  useGetReleaseTestCasesQuery: jest.fn(() => ({\n    data: { data: [] },\n    isLoading: false,\n    error: null,\n    refetch: jest.fn(),\n  })),\n  useUpdateReleaseExecutionStatsMutation: jest.fn(() => [jest.fn()]),\n  useGetReleaseExecutionStatsQuery: jest.fn(() => ({\n    data: { data: { total: 0, passed: 0, failed: 0, blocked: 0, skipped: 0, planned: 0, passRate: 0 } },\n    isLoading: false,\n    error: null,\n    refetch: jest.fn(),\n  })),\n  useUpdateTestCaseStatusMutation: jest.fn(() => [jest.fn()]),\n  useGetTestFoldersQuery: jest.fn(() => ({ data: [] })),\n  useGetImportedFoldersQuery: jest.fn(() => ({ data: [], refetch: jest.fn() })),\n  useAddImportedFoldersMutation: jest.fn(() => [jest.fn()]),\n  useRemoveImportedFolderMutation: jest.fn(() => [jest.fn()]),\n}));\n\n// Mock ExecutionView component\nconst MockExecutionView = () => {\n  return (\n    <div data-testid=\"execution-view\">\n      <h1>Execution View</h1>\n      <div data-testid=\"test-cases-container\">\n        <div data-testid=\"test-case-1\">Test Case 1</div>\n        <div data-testid=\"test-case-2\">Test Case 2</div>\n      </div>\n      <div data-testid=\"status-dropdown\">\n        <button data-testid=\"status-button\">Inactive</button>\n      </div>\n    </div>\n  );\n};\n\n// Mock store\nconst createMockStore = () => {\n  return configureStore({\n    reducer: {\n      api: (state = {}, action: any) => state,\n    },\n    middleware: (getDefaultMiddleware) =>\n      getDefaultMiddleware(),\n  });\n};\n\ndescribe('ExecutionView Component (Simple)', () => {\n  let mockStore: ReturnType<typeof createMockStore>;\n\n  beforeEach(() => {\n    mockStore = createMockStore();\n    jest.clearAllMocks();\n  });\n\n  const renderExecutionView = () => {\n    return render(\n      <Provider store={mockStore}>\n        <MockExecutionView />\n      </Provider>\n    );\n  };\n\n  describe('기본 렌더링', () => {\n    it('컴포넌트가 정상적으로 렌더링되어야 한다', () => {\n      renderExecutionView();\n      \n      expect(screen.getByTestId('execution-view')).toBeInTheDocument();\n      expect(screen.getByText('Execution View')).toBeInTheDocument();\n    });\n\n    it('테스트케이스 목록이 표시되어야 한다', () => {\n      renderExecutionView();\n      \n      expect(screen.getByTestId('test-cases-container')).toBeInTheDocument();\n      expect(screen.getByTestId('test-case-1')).toBeInTheDocument();\n      expect(screen.getByTestId('test-case-2')).toBeInTheDocument();\n    });\n\n    it('상태 드롭다운이 표시되어야 한다', () => {\n      renderExecutionView();\n      \n      expect(screen.getByTestId('status-dropdown')).toBeInTheDocument();\n      expect(screen.getByTestId('status-button')).toBeInTheDocument();\n      expect(screen.getByText('Inactive')).toBeInTheDocument();\n    });\n  });\n\n  describe('API 통합', () => {\n    it('API 훅들이 호출되어야 한다', () => {\n      const { useGetReleaseTestCasesQuery, useGetReleaseExecutionStatsQuery } = require('../src/renderer/services/api');\n      \n      renderExecutionView();\n      \n      expect(useGetReleaseTestCasesQuery).toHaveBeenCalled();\n      expect(useGetReleaseExecutionStatsQuery).toHaveBeenCalled();\n    });\n  });\n\n  describe('상태 관리', () => {\n    it('Redux store가 정상적으로 설정되어야 한다', () => {\n      renderExecutionView();\n      \n      // Provider가 정상적으로 렌더링되었는지 확인\n      expect(screen.getByTestId('execution-view')).toBeInTheDocument();\n    });\n  });\n});\n\n// API/DB 중심 동작 테스트\ndescribe('API/DB 중심 동작', () => {\n  it('API 데이터를 우선적으로 사용해야 한다', () => {\n    const { useGetReleaseTestCasesQuery } = require('../src/renderer/services/api');\n    \n    // API 데이터가 있는 경우\n    (useGetReleaseTestCasesQuery as jest.Mock).mockReturnValue({\n      data: { \n        data: [\n          { id: '1', title: 'API Test Case 1', status: 'Pass' },\n          { id: '2', title: 'API Test Case 2', status: 'Fail' }\n        ] \n      },\n      isLoading: false,\n      error: null,\n      refetch: jest.fn(),\n    });\n\n    render(\n      <Provider store={createMockStore()}>\n        <MockExecutionView />\n      </Provider>\n    );\n\n    // API 데이터가 우선적으로 사용되는지 확인\n    expect(useGetReleaseTestCasesQuery).toHaveBeenCalled();\n  });\n\n  it('API 에러 시 적절한 처리가 되어야 한다', () => {\n    const { useGetReleaseTestCasesQuery } = require('../src/renderer/services/api');\n    \n    // API 에러 시뮬레이션\n    (useGetReleaseTestCasesQuery as jest.Mock).mockReturnValue({\n      data: undefined,\n      isLoading: false,\n      error: { message: 'API Error' },\n      refetch: jest.fn(),\n    });\n\n    render(\n      <Provider store={createMockStore()}>\n        <MockExecutionView />\n      </Provider>\n    );\n\n    // 에러 상태에서도 컴포넌트가 렌더링되는지 확인\n    expect(screen.getByTestId('execution-view')).toBeInTheDocument();\n  });\n});\n\n// 실시간 동기화 테스트\ndescribe('실시간 동기화', () => {\n  it('폴링 설정이 올바르게 되어야 한다', () => {\n    const { useGetReleaseTestCasesQuery } = require('../src/renderer/services/api');\n    \n    render(\n      <Provider store={createMockStore()}>\n        <MockExecutionView />\n      </Provider>\n    );\n\n    // 폴링 설정 확인 (실제로는 RTK Query가 내부적으로 처리)\n    expect(useGetReleaseTestCasesQuery).toHaveBeenCalled();\n  });\n});\n\n// 에러 처리 테스트\ndescribe('에러 처리', () => {\n  it('API 에러 시 컴포넌트가 계속 렌더링되어야 한다', () => {\n    const { useGetReleaseTestCasesQuery } = require('../src/renderer/services/api');\n    \n    // API 에러 시뮬레이션\n    (useGetReleaseTestCasesQuery as jest.Mock).mockReturnValue({\n      data: undefined,\n      isLoading: false,\n      error: { message: 'Network Error' },\n      refetch: jest.fn(),\n    });\n\n    render(\n      <Provider store={createMockStore()}>\n        <MockExecutionView />\n      </Provider>\n    );\n\n    // 에러 상태에서도 컴포넌트가 정상적으로 렌더링되는지 확인\n    expect(screen.getByTestId('execution-view')).toBeInTheDocument();\n    expect(screen.getByText('Execution View')).toBeInTheDocument();\n  });\n});\n"],"version":3}