---
description:
globs:
alwaysApply: true
---
# ITMS (지능형 테스트 관리 시스템) 코드 가이드라인

## 1. 프로젝트 개요

ITMS는 테스트 계획, 실행, 결과 추적 및 결함 관리를 위한 데스크톱 애플리케이션입니다. 사용자 친화적인 UX와 AI 기반 통찰력을 결합하여 QA 생산성을 높이고 소프트웨어 품질을 향상하며 팀 간 협업을 개선하는 것을 목표로 합니다.

본 프로젝트의 핵심 기술 스택 및 아키텍처 결정은 다음과 같습니다:

*   **프런트엔드**: Electron (데스크톱 앱), React (UI 프레임워크)
*   **백엔드**: Node.js (데스크톱 앱 내장), Go (마이크로서비스 API)
*   **데이터베이스**: PostgreSQL (관계형 데이터), Elasticsearch (검색)
*   **AI 서비스**: Python (HuggingFace, TensorFlow Lite)
*   **통신**: gRPC (실시간 동기화), REST API (통합)

아키텍처는 Electron 기반의 데스크톱 애플리케이션이 주축을 이루며, 내장된 Node.js 백엔드를 통해 로컬 데이터 처리 및 Electron API 접근을 수행합니다. 복잡한 비즈니스 로직 및 외부 시스템 연동은 Go 기반의 마이크로서비스 API를 통해 처리하며, AI 기능은 Python 마이크로서비스로 분리됩니다. 데이터 동기화 및 실시간 통신을 위해 gRPC를 적극 활용하고, 외부 통합은 REST API를 통해 이루어집니다.

## 2. 핵심 원칙

1.  **명확성**: 코드는 의도를 명확히 드러내어 쉽게 이해할 수 있어야 합니다.
2.  **모듈화**: 각 컴포넌트, 모듈은 단일 책임을 가지며 재사용 가능해야 합니다.
3.  **견고성**: 예외 상황을 예측하고 적절히 처리하여 시스템의 안정성을 보장해야 합니다.
4.  **성능 최적화**: 사용자 경험을 저해하지 않도록 UI 응답 및 데이터 처리 성능을 최적화해야 합니다.
5.  **보안 우선**: 모든 계층에서 보안 취약점을 최소화하고 데이터 보호를 최우선으로 고려해야 합니다.

## 3. 언어별 가이드라인

### 3.1. JavaScript/TypeScript (Electron & React)

#### 파일 구성 및 디렉터리 구조

*   **MUST**: `src` 디렉터리 아래에 기능별/도메인별로 디렉터리를 구성합니다.
*   **MUST**: 각 기능 디렉터리 내에는 `components`, `hooks`, `services`, `utils`, `store` 등 역할별 하위 디렉터리를 가집니다.
*   **MUST**: React 컴포넌트는 JSX/TSX 파일을 사용하고, 로직 분리를 위해 커스텀 훅은 `.ts` 파일을 사용합니다.
*   **MUST NOT**: 단일 파일에 여러 개의 컴포넌트나 모듈을 정의하여 파일의 길이가 과도하게 길어지는 것을 피합니다.

```
// MUST: 명확하고 구조화된 디렉터리 구조
src/
├── main/             // Electron Main Process
│   └── index.ts
├── renderer/         // Electron Renderer Process (React App)
│   ├── app/
│   │   ├── App.tsx
│   │   └── index.tsx
│   ├── features/
│   │   ├── test-case-management/
│   │   │   ├── components/
│   │   │   │   ├── TestCaseList.tsx
│   │   │   │   └── TestCaseEditor.tsx
│   │   │   ├── hooks/
│   │   │   │   └── useTestCases.ts
│   │   │   ├── services/
│   │   │   │   └── testCaseService.ts
│   │   │   └── store/
│   │   │       └── testCaseStore.ts
│   ├── shared/       // 공통 컴포넌트, 유틸리티 등
│   │   ├── components/
│   │   └── utils/
│   └── types/        // 전역 타입 정의
│       └── index.d.ts
└── preload/          // Electron Preload Script
    └── index.ts
```

#### 임포트/의존성 관리

*   **MUST**: 절대 경로 임포트를 사용하여 가독성을 높입니다. (예: `import { Button } from '@/shared/components/Button';`)
*   **MUST**: 외부 라이브러리 임포트, 내부 모듈 임포트, 상대 경로 임포트 순으로 그룹화하고 각 그룹 사이에 빈 줄을 추가합니다.
*   **MUST**: 필요한 모듈만 명시적으로 임포트합니다. (Named Import 선호)

```typescript
// MUST: 임포트 순서 및 그룹화
import React from 'react';
import { useQuery } from '@tanstack/react-query'; // 외부 라이브러리

import { TestCase } from '@/types'; // 내부 모듈
import { fetchTestCases } from '@/features/test-case-management/services/testCaseService'; // 내부 모듈

import { TestCaseItem } from './components/TestCaseItem'; // 상대 경로

// ...
```

#### 에러 핸들링 패턴

*   **MUST**: 비동기 작업은 `try-catch` 블록을 사용하여 에러를 명시적으로 처리합니다.
*   **MUST**: 사용자에게 의미 있는 에러 메시지를 제공하고, 개발자에게는 상세한 로그를 남깁니다.
*   **MUST**: 전역 에러 바운더리(Error Boundary)를 사용하여 React 컴포넌트 트리의 에러를 처리합니다.
*   **MUST NOT**: 에러를 단순히 무시하거나 콘솔에만 출력하고 사용자에게 알리지 않는 것을 피합니다.

```typescript
// MUST: 비동기 에러 핸들링 및 사용자 피드백
async function loadTestCases() {
    try {
        const cases = await testCaseService.fetchTestCases();
        setTestCases(cases);
    } catch (error) {
        console.error('테스트 케이스 로드 실패:', error);
        // 사용자에게 에러 메시지 표시
        alert('테스트 케이스를 불러오는 데 실패했습니다. 다시 시도해 주세요.');
    }
}

// MUST NOT: 에러 무시
async function saveUserData(data: UserData) {
    userService.save(data).catch(console.error); // 에러를 단순히 콘솔에만 출력하고 사용자에게 알리지 않음
}
```

### 3.2. Go (마이크로서비스 API)

#### 파일 구성 및 디렉터리 구조

*   **MUST**: 표준 Go 프로젝트 레이아웃을 따릅니다. (`cmd`, `pkg`, `internal`, `api`, `configs`, `docs`, `build` 등)
*   **MUST**: `internal` 디렉터리에는 외부 패키지에서 임포트할 수 없는 애플리케이션 전용 코드를 배치합니다.
*   **MUST**: `pkg` 디렉터리에는 외부 프로젝트에서 사용될 수 있는 라이브러리 코드를 배치합니다.
*   **MUST NOT**: 모든 코드를 루트 디렉터리에 두거나, 패키지 간의 순환 의존성을 만듭니다.

```
// MUST: 표준 Go 프로젝트 레이아웃
project-name/
├── cmd/             // 메인 애플리케이션 엔트리 포인트
│   └── server/
│       └── main.go
├── pkg/             // 외부에서 재사용 가능한 라이브러리 코드
│   └── utils/
│       └── validator.go
├── internal/        // 프로젝트 내부 전용 코드
│   ├── app/
│   │   ├── handler/
│   │   │   └── testcase_handler.go
│   │   ├── repository/
│   │   │   └── testcase_repo.go
│   │   └── service/
│   │       └── testcase_service.go
│   ├── config/
│   │   └── config.go
│   └── model/
│       └── testcase.go
├── api/             // Protobuf 정의 등 API 명세
│   └── proto/
│       └── testcase.proto
├── configs/         // 설정 파일
├── docs/            // 문서
└── go.mod
```

#### 임포트/의존성 관리

*   **MUST**: Go 모듈을 사용하여 의존성을 관리합니다.
*   **MUST**: 표준 라이브러리, 외부 라이브러리, 내부 프로젝트 패키지 순으로 임포트를 그룹화하고 각 그룹 사이에 빈 줄을 추가합니다.
*   **MUST**: 사용하지 않는 임포트는 제거합니다. (`goimports` 도구 사용 권장)

```go
// MUST: 임포트 순서 및 그룹화
import (
	"context"
	"fmt" // 표준 라이브러리

	"github.com/gin-gonic/gin" // 외부 라이브러리
	"google.golang.org/grpc"   // 외부 라이브러리

	"itms/internal/app/service" // 내부 프로젝트 패키지
	"itms/internal/config"      // 내부 프로젝트 패키지
)
```

#### 에러 핸들링 패턴

*   **MUST**: 에러는 마지막 반환 값으로 명시적으로 반환합니다.
*   **MUST**: 에러 메시지는 구체적이고 디버깅에 유용하도록 작성합니다.
*   **MUST**: 에러 래핑(`fmt.Errorf("%w", err)`)을 사용하여 에러 스택 트레이스를 보존합니다.
*   **MUST NOT**: 에러를 무시하거나, `panic`을 비정상적인 종료가 아닌 일반적인 에러 처리 흐름에 사용하지 않습니다.

```go
// MUST: 에러 반환 및 래핑
func (s *testCaseService) GetTestCase(ctx context.Context, id string) (*model.TestCase, error) {
    testCase, err := s.repo.FindByID(ctx, id)
    if err != nil {
        // 에러 래핑을 통해 원본 에러 정보 유지
        return nil, fmt.Errorf("테스트 케이스 조회 실패: %w", err)
    }
    if testCase == nil {
        return nil, fmt.Errorf("테스트 케이스를 찾을 수 없습니다: %s", id)
    }
    return testCase, nil
}

// MUST NOT: 에러 무시
func processData(data []byte) {
    _, err := json.Unmarshal(data, &someStruct)
    // if err != nil { ... } 에러 처리 누락
}
```

### 3.3. Python (AI 서비스)

#### 파일 구성 및 디렉터리 구조

*   **MUST**: 모듈화된 패키지 구조를 따릅니다. (`src` 또는 프로젝트 이름의 최상위 패키지)
*   **MUST**: AI 모델, 데이터 처리, API 엔드포인트 등 역할별로 디렉터리를 분리합니다.
*   **MUST**: 각 디렉터리에는 `__init__.py` 파일을 포함하여 패키지로 인식되도록 합니다.

```
// MUST: Python 패키지 구조
ai-service/
├── src/
│   ├── __init__.py
│   ├── api/          // FastAPI 엔드포인트
│   │   ├── __init__.py
│   │   └── routes.py
│   ├── models/       // AI 모델 정의 및 로딩
│   │   ├── __init__.py
│   │   └── nlp_model.py
│   ├── processing/   // 데이터 전처리 및 후처리
│   │   ├── __init__.py
│   │   └── text_processor.py
│   └── core/         // 핵심 비즈니스 로직
│       ├── __init__.py
│       └── inference.py
├── tests/            // 테스트 코드
├── requirements.txt  // 의존성 관리
└── main.py           // 애플리케이션 엔트리 포인트
```

#### 임포트/의존성 관리

*   **MUST**: `requirements.txt` 또는 `pyproject.toml`을 사용하여 의존성을 명시적으로 관리합니다.
*   **MUST**: 절대 임포트(`from package.module import ...`)를 선호하고, 상대 임포트(`from .module import ...`)는 동일 패키지 내에서만 사용합니다.
*   **MUST**: 임포트 순서는 표준 라이브러리, 서드파티 라이브러리, 로컬 애플리케이션 모듈 순으로 그룹화합니다.

```python
# MUST: 임포트 순서 및 그룹화
import os
import json # 표준 라이브러리

from fastapi import FastAPI # 서드파티 라이브러리
from transformers import pipeline # 서드파티 라이브러리

from src.models.nlp_model import load_nlp_model # 로컬 애플리케이션 모듈
from src.processing.text_processor import preprocess_text # 로컬 애플리케이션 모듈
```

#### 에러 핸들링 패턴

*   **MUST**: `try-except` 블록을 사용하여 예외를 처리하고, 구체적인 예외 타입을 명시합니다.
*   **MUST**: 사용자에게는 일반적인 에러 메시지를, 로그에는 상세한 스택 트레이스를 기록합니다.
*   **MUST**: FastAPI 사용 시 `HTTPException`을 활용하여 HTTP 응답으로 에러를 반환합니다.
*   **MUST NOT**: 광범위한 `except Exception:`을 남용하여 예상치 못한 에러를 숨기지 않습니다.

```python
# MUST: 구체적인 예외 처리 및 로깅
from fastapi import HTTPException, status
import logging

logger = logging.getLogger(__name__)

async def generate_test_cases(text: str):
    try:
        processed_text = preprocess_text(text)
        model = load_nlp_model()
        results = model(processed_text)
        return {"results": results}
    except ValueError as e:
        logger.error(f"입력 값 오류: {e}")
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=f"잘못된 입력: {e}")
    except Exception as e:
        logger.exception("테스트 케이스 생성 중 알 수 없는 오류 발생") # 상세 스택 트레이스 로깅
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="내부 서버 오류가 발생했습니다.")

# MUST NOT: 광범위한 예외 처리
def some_function():
    try:
        # ...
    except Exception: # 모든 예외를 잡아서 디버깅을 어렵게 함
        pass
```

## 4. 코드 스타일 규칙

### 4.1. MUST Follow (필수 준수 사항)

*   **일관된 명명 규칙**:
    *   **Rationale**: 코드의 가독성을 높이고 의미를 명확하게 전달합니다.
    *   **JavaScript/TypeScript**:
        *   변수, 함수: `camelCase` (예: `userName`, `getUserData`)
        *   클래스, 컴포넌트, 타입: `PascalCase` (예: `UserComponent`, `IUserData`)
        *   상수: `SCREAMING_SNAKE_CASE` (예: `MAX_RETRIES`)
    *   **Go**:
        *   변수, 함수, 패키지: `camelCase` (내보내지 않는 경우), `PascalCase` (내보내는 경우) (예: `userName`, `GetUserData`)
        *   상수: `PascalCase` 또는 `SCREAMING_SNAKE_CASE` (예: `MaxRetries`, `MAX_RETRIES`)
    *   **Python**:
        *   변수, 함수, 모듈: `snake_case` (예: `user_name`, `get_user_data`)
        *   클래스: `PascalCase` (예: `UserProcessor`)
        *   상수: `SCREAMING_SNAKE_CASE` (예: `MAX_RETRIES`)

*   **들여쓰기**:
    *   **Rationale**: 코드의 구조를 시각적으로 명확하게 구분합니다.
    *   **모든 언어**: 4칸 공백을 사용합니다. 탭 문자는 사용하지 않습니다.

*   **주석**:
    *   **Rationale**: 코드의 복잡한 로직, 비즈니스 규칙, 의도 등을 설명하여 유지보수성을 높입니다.
    *   **MUST**: 공개 API, 복잡한 알고리즘, 비즈니스 로직의 핵심 부분에는 주석을 작성합니다.
    *   **MUST**: Go에서는 공개 함수 및 타입에 GoDoc 형식의 주석을 작성합니다.
    *   **MUST NOT**: 자명한 코드에 주석을 달거나, 코드 내용을 그대로 반복하는 주석은 피합니다.

```go
// MUST: GoDoc 주석 예시
// GetTestCase retrieves a test case by its ID.
// It returns the TestCase object and an error if the test case is not found or an
// internal error occurs during retrieval.
func (s *testCaseService) GetTestCase(ctx context.Context, id string) (*model.TestCase, error) {
    // ...
}
```

*   **코드 길이 및 복잡성**:
    *   **Rationale**: 함수와 파일의 길이를 적절히 유지하여 가독성과 테스트 용이성을 높입니다.
    *   **MUST**: 함수는 단일 책임을 가지도록 작게 유지합니다. (이상적으로 50줄 이내)
    *   **MUST**: 파일당 코드 길이는 500줄을 초과하지 않도록 노력합니다. (예외: 타입 정의 파일 등)
    *   **MUST**: 순환 복잡도(Cyclomatic Complexity)를 낮게 유지합니다.

*   **타입 정의 (TypeScript, Go, Python Type Hinting)**:
    *   **Rationale**: 코드의 안정성을 높이고, 개발 과정에서 오류를 조기에 발견하며, 코드 자동 완성 및 리팩토링을 용이하게 합니다.
    *   **MUST**: 모든 함수 매개변수, 반환 값, 변수에 명시적인 타입을 선언합니다.
    *   **MUST**: 복잡한 데이터 구조는 인터페이스(TypeScript), 구조체(Go), 데이터 클래스/TypedDict(Python)로 정의합니다.

```typescript
// MUST: TypeScript 타입 정의
interface TestCase {
    id: string;
    title: string;
    priority: 'High' | 'Medium' | 'Low';
    steps: string[];
}

function createTestCase(data: Omit<TestCase, 'id'>): TestCase {
    // ...
}
```

### 4.2. MUST NOT Do (금지 사항)

*   **매직 넘버/문자열 사용 금지**:
    *   **Rationale**: 코드의 의미를 불분명하게 만들고, 변경 시 오류를 유발할 수 있습니다.
    *   **MUST NOT**: 의미 있는 상수 대신 하드코딩된 숫자나 문자열을 사용합니다.
    *   **MUST**: 모든 매직 넘버/문자열은 명명된 상수로 정의하여 사용합니다.

```typescript
// MUST NOT: 매직 넘버 사용
if (status === 200) { /* ... */ }

// MUST: 상수 사용
const HTTP_STATUS_OK = 200;
if (status === HTTP_STATUS_OK) { /* ... */ }
```

*   **전역 변수 남용 금지**:
    *   **Rationale**: 코드의 예측 불가능성을 높이고, 사이드 이펙트를 유발하며, 테스트를 어렵게 만듭니다.
    *   **MUST NOT**: 불필요하게 전역 변수를 선언하고 사용합니다.
    *   **MUST**: 상태 관리는 Redux (React), Context API (React), 또는 Go/Python의 서비스 계층을 통해 명시적으로 관리합니다.

*   **복잡한 조건문/중첩 루프**:
    *   **Rationale**: 코드의 가독성을 저해하고, 오류 발생 가능성을 높입니다.
    *   **MUST NOT**: 3단계 이상 중첩된 조건문이나 루프를 사용합니다.
    *   **MUST**: 함수 분리, 가드 절(Guard Clause) 사용, 디자인 패턴 적용 등을 통해 복잡성을 줄입니다.

```typescript
// MUST NOT: 과도한 중첩
function processData(data: any) {
    if (data) {
        if (data.items) {
            for (const item of data.items) {
                if (item.isValid) {
                    // ... 복잡한 로직
                }
            }
        }
    }
}

// MUST: 가드 절 및 함수 분리
function processData(data: any) {
    if (!data || !data.items) {
        return;
    }
    for (const item of data.items) {
        processItem(item);
    }
}

function processItem(item: any) {
    if (!item.isValid) {
        return;
    }
    // ... 복잡한 로직
}
```

*   **직접적인 DOM 조작 (React)**:
    *   **Rationale**: React의 선언적 패러다임을 위반하고, 상태 관리와 UI 동기화를 어렵게 만듭니다.
    *   **MUST NOT**: `document.getElementById`, `querySelector` 등을 사용하여 React 컴포넌트 내부에서 직접 DOM을 조작합니다.
    *   **MUST**: `useState`, `useRef`, 또는 라이브러리(예: React DnD)를 통해 React의 상태 관리 및 참조 시스템을 활용합니다.

## 5. 아키텍처 패턴

### 5.1. 컴포넌트/모듈 구조 가이드라인

*   **단일 책임 원칙 (SRP)**:
    *   **Rationale**: 각 컴포넌트/모듈은 하나의 책임만 가지도록 설계하여 재사용성, 테스트 용이성, 유지보수성을 높입니다.
    *   **React**: UI 컴포넌트는 UI 렌더링에만 집중하고, 데이터 페칭이나 복잡한 로직은 커스텀 훅이나 서비스 레이어로 분리합니다.
    *   **Go/Python**: 서비스, 리포지토리, 핸들러 등 계층별로 명확히 책임을 분리합니다.

*   **계층형 아키텍처**:
    *   **Rationale**: 각 계층은 명확한 역할을 가지며, 의존성은 상위 계층에서 하위 계층으로만 흐르도록 하여 시스템의 응집도를 높입니다.
    *   **프런트엔드**: Presentational/Container 패턴 또는 Atomic Design 원칙을 적용하여 컴포넌트를 구성합니다.
    *   **백엔드**: Controller/Handler -> Service -> Repository/Data Access Object (DAO) 계층으로 구성합니다.

### 5.2. 데이터 흐름 패턴

*   **단방향 데이터 흐름 (React)**:
    *   **Rationale**: React의 핵심 원칙으로, 상태 변화를 예측 가능하게 하고 디버깅을 용이하게 합니다.
    *   **MUST**: 부모 컴포넌트에서 자식 컴포넌트로 데이터를 Props를 통해 전달합니다.
    *   **MUST NOT**: 자식 컴포넌트가 부모 컴포넌트의 상태를 직접 수정하는 것을 금지합니다. (콜백 함수를 통해 부모 상태 업데이트 요청)

*   **데이터 동기화 (gRPC)**:
    *   **Rationale**: 실시간 데이터 동기화 및 오프라인 모드 지원을 위해 효율적인 통신을 보장합니다.
    *   **MUST**: 클라이언트(Electron Node.js)와 서버(Go 마이크로서비스) 간 실시간 통신은 gRPC를 사용합니다.
    *   **MUST**: Protobuf를 사용하여 데이터 스키마를 정의하고 관리합니다.
    *   **MUST**: 오프라인 모드 시 IndexedDB에 데이터를 캐싱하고, 네트워크 재연결 시 gRPC를 통해 서버와 자동 동기화합니다.

### 5.3. 상태 관리 컨벤션 (React)

*   **글로벌 상태 관리**:
    *   **Rationale**: 애플리케이션 전반에 걸쳐 공유되는 상태를 일관되고 효율적으로 관리합니다.
    *   **MUST**: Redux Toolkit을 사용하여 전역 상태를 관리합니다.
    *   **MUST**: Slice 패턴을 사용하여 각 도메인별 상태를 모듈화합니다. (예: `testCasesSlice`, `usersSlice`)
    *   **MUST**: Redux Thunk 또는 Redux Saga를 사용하여 비동기 로직을 처리합니다.

*   **로컬 컴포넌트 상태**:
    *   **Rationale**: 특정 컴포넌트에만 국한되는 상태는 불필요한 전역 상태 오염을 방지합니다.
    *   **MUST**: `useState` 훅을 사용하여 컴포넌트 내부의 로컬 상태를 관리합니다.
    *   **MUST**: `useReducer` 훅은 복잡한 로컬 상태 로직을 관리할 때 사용합니다.

### 5.4. API 설계 표준

*   **RESTful API (Go)**:
    *   **Rationale**: 외부 시스템(Jira, Redmine 등)과의 통합을 위해 표준화된 통신 방식을 제공합니다.
    *   **MUST**: 자원(Resource) 중심의 URL을 설계합니다. (예: `/testcases`, `/defects/{id}`)
    *   **MUST**: HTTP 메서드(GET, POST, PUT, DELETE)를 자원의 CRUD 작업에 맞게 사용합니다.
    *   **MUST**: 상태 코드(Status Code)를 적절하게 사용하여 응답의 의미를 명확히 합니다.
    *   **MUST**: 요청 및 응답 페이로드는 JSON 형식을 사용합니다.

*   **gRPC API (Go)**:
    *   **Rationale**: 내부 서비스 간의 고성능 통신 및 실시간 동기화를 위해 사용합니다.
    *   **MUST**: `.proto` 파일에 서비스 정의 및 메시지 구조를 명확히 명시합니다.
    *   **MUST**: 스트리밍(Streaming) 기능을 활용하여 실시간 업데이트 및 양방향 통신을 구현합니다.

*   **API 버전 관리**:
    *   **Rationale**: API 변경 시 하위 호환성을 유지하고 클라이언트의 안정적인 사용을 보장합니다.
    *   **MUST**: URL 기반 버전 관리(`api/v1/testcases`)를 사용합니다.

```protobuf
// MUST: gRPC Protobuf 서비스 정의 예시
syntax = "proto3";

package testcase;

option go_package = "itms/api/proto/testcase";

service TestCaseService {
  rpc GetTestCase (GetTestCaseRequest) returns (TestCase);
  rpc CreateTestCase (CreateTestCaseRequest) returns (TestCase);
  rpc StreamTestCases (StreamTestCasesRequest) returns (stream TestCase); // 스트리밍 예시
}

message TestCase {
  string id = 1;
  string title = 2;
  repeated string steps = 3;
  string status = 4;
}

message GetTestCaseRequest {
  string id = 1;
}

message CreateTestCaseRequest {
  string title = 1;
  repeated string steps = 2;
}

message StreamTestCasesRequest {
  string filter = 1;
}
```
